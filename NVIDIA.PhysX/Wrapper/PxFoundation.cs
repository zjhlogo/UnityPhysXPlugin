//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace NVIDIA.PhysX {

public partial class PxFoundation {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;
  public object userData;

  internal PxFoundation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PxFoundation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static PxFoundation getWrapper(global::System.IntPtr cPtr, bool cMemoryOwn) {
      var wrapper = WrapperCache.find(cPtr);
      if (!(wrapper is PxFoundation)) {
          wrapper = new PxFoundation(cPtr, cMemoryOwn);
          WrapperCache.add(cPtr, wrapper);
      }
      return wrapper as PxFoundation;
  }

  ~PxFoundation() {
    WrapperCache.remove(swigCPtr.Handle, this);
  }

  public static PxFoundation create(PxVersion physicsVersion, PxAllocatorCallback allocatorCallback, PxErrorCallback errorCallback) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_create((int)physicsVersion, PxAllocatorCallback.getCPtr(allocatorCallback), PxErrorCallback.getCPtr(errorCallback));
    PxFoundation ret = (cPtr == global::System.IntPtr.Zero) ? null : PxFoundation.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPhysics createPhysics(PxVersion physicsVersion, PxTolerancesScale scale, bool trackOutstandingAllocations, PxPvd pvd) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createPhysics__SWIG_0(swigCPtr, (int)physicsVersion, PxTolerancesScale.getCPtr(scale), trackOutstandingAllocations, PxPvd.getCPtr(pvd));
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPhysics.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPhysics createPhysics(PxVersion physicsVersion, PxTolerancesScale scale, bool trackOutstandingAllocations) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createPhysics__SWIG_1(swigCPtr, (int)physicsVersion, PxTolerancesScale.getCPtr(scale), trackOutstandingAllocations);
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPhysics.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPhysics createPhysics(PxVersion physicsVersion, PxTolerancesScale scale) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createPhysics__SWIG_2(swigCPtr, (int)physicsVersion, PxTolerancesScale.getCPtr(scale));
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPhysics.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPhysics createPhysics(PxVersion physicsVersion) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createPhysics__SWIG_3(swigCPtr, (int)physicsVersion);
    PxPhysics ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPhysics.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxCudaContextManager createCudaContextManager(string dllPath) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createCudaContextManager(swigCPtr, dllPath);
    PxCudaContextManager ret = (cPtr == global::System.IntPtr.Zero) ? null : PxCudaContextManager.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxPvd createPvd() {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createPvd(swigCPtr);
    PxPvd ret = (cPtr == global::System.IntPtr.Zero) ? null : PxPvd.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PxCooking createCooking(PxVersion physicsVersion, PxCookingParams params_) {
    global::System.IntPtr cPtr = NativePINVOKE.PxFoundation_createCooking(swigCPtr, (int)physicsVersion, PxCookingParams.getCPtr(params_));
    PxCooking ret = (cPtr == global::System.IntPtr.Zero) ? null : PxCooking.getWrapper(cPtr, false);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void release() {
    NativePINVOKE.PxFoundation_release(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setErrorLevel(PxErrorCode mask) {
    NativePINVOKE.PxFoundation_setErrorLevel__SWIG_0(swigCPtr, (int)mask);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setErrorLevel() {
    NativePINVOKE.PxFoundation_setErrorLevel__SWIG_1(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public PxErrorCode getErrorLevel() {
    PxErrorCode ret = (PxErrorCode)NativePINVOKE.PxFoundation_getErrorLevel(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getReportAllocationNames() {
    bool ret = NativePINVOKE.PxFoundation_getReportAllocationNames(swigCPtr);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setReportAllocationNames(bool value) {
    NativePINVOKE.PxFoundation_setReportAllocationNames(swigCPtr, value);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
