/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Native(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Native(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Native(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#include "header.h"


#include <stdint.h>		// Use the C99 official header


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN physx::PxVec3 *new_physx_PxVec3__SWIG_0(float s){ thread_local physx::PxVec3 v; v = physx::PxVec3(s); return &v; }
SWIGINTERN physx::PxVec3 *new_physx_PxVec3__SWIG_1(float x,float y,float z){ thread_local physx::PxVec3 v; v = physx::PxVec3(x, y, z); return &v; }
SWIGINTERN physx::PxVec4 *new_physx_PxVec4__SWIG_0(float s){ thread_local physx::PxVec4 v; v = physx::PxVec4(s); return &v; }
SWIGINTERN physx::PxVec4 *new_physx_PxVec4__SWIG_1(float x,float y,float z,float w){ thread_local physx::PxVec4 v; v = physx::PxVec4(x, y, z, w); return &v; }
SWIGINTERN physx::PxVec4 *new_physx_PxVec4__SWIG_2(physx::PxVec3 const &xyz,float w){ thread_local physx::PxVec4 v; v = physx::PxVec4(xyz, w); return &v; }
SWIGINTERN physx::PxQuat *new_physx_PxQuat__SWIG_0(float r){ thread_local physx::PxQuat q; q = physx::PxQuat(r); return &q; }
SWIGINTERN physx::PxQuat *new_physx_PxQuat__SWIG_1(float x,float y,float z,float w){ thread_local physx::PxQuat q; q = physx::PxQuat(x, y, z, w); return &q; }
SWIGINTERN physx::PxQuat *new_physx_PxQuat__SWIG_2(float angleRadians,physx::PxVec3 const &unitAxis){ thread_local physx::PxQuat q; q = physx::PxQuat(angleRadians, unitAxis); return &q; }
SWIGINTERN physx::PxQuat *new_physx_PxQuat__SWIG_3(physx::PxMat33 const &m){ thread_local physx::PxQuat q; q = physx::PxQuat(m); return &q; }
SWIGINTERN physx::PxPlane *new_physx_PxPlane__SWIG_0(float nx,float ny,float nz,float distance){ thread_local physx::PxPlane p; p = physx::PxPlane(nx, ny, nz, distance); return &p; }
SWIGINTERN physx::PxPlane *new_physx_PxPlane__SWIG_1(physx::PxVec3 const &normal,float distance){ thread_local physx::PxPlane p; p = physx::PxPlane(normal, distance); return &p; }
SWIGINTERN physx::PxPlane *new_physx_PxPlane__SWIG_2(physx::PxVec3 const &point,physx::PxVec3 const &normal){ thread_local physx::PxPlane p; p = physx::PxPlane(point, normal); return &p; }
SWIGINTERN physx::PxPlane *new_physx_PxPlane__SWIG_3(physx::PxVec3 const &p0,physx::PxVec3 const &p1,physx::PxVec3 const &p2){ thread_local physx::PxPlane p; p = physx::PxPlane(p0, p1, p2); return &p; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_0(physx::PxVec3 const &position){ thread_local physx::PxTransform t; t = physx::PxTransform(position); return &t; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_1(physx::PxIDENTITY r){ thread_local physx::PxTransform t; t = physx::PxTransform(r); return &t; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_2(physx::PxQuat const &orientation){ thread_local physx::PxTransform t; t = physx::PxTransform(orientation); return &t; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_3(float x,float y,float z,physx::PxQuat aQ=physx::PxQuat(physx::PxIdentity)){ thread_local physx::PxTransform t; t = physx::PxTransform(x, y, z, aQ); return &t; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_5(physx::PxVec3 const &p0,physx::PxQuat const &q0){ thread_local physx::PxTransform t; t = physx::PxTransform(p0, q0); return &t; }
SWIGINTERN physx::PxTransform *new_physx_PxTransform__SWIG_6(physx::PxMat44 const &m){ thread_local physx::PxTransform t; t = physx::PxTransform(m); return &t; }
SWIGINTERN physx::PxMat33 *new_physx_PxMat33__SWIG_0(physx::PxIDENTITY r){ thread_local physx::PxMat33 m; m = physx::PxMat33(r); return &m; }
SWIGINTERN physx::PxMat33 *new_physx_PxMat33__SWIG_1(physx::PxZERO r){ thread_local physx::PxMat33 m; m = physx::PxMat33(r); return &m; }
SWIGINTERN physx::PxMat33 *new_physx_PxMat33__SWIG_2(physx::PxVec3 const &col0,physx::PxVec3 const &col1,physx::PxVec3 const &col2){ thread_local physx::PxMat33 m; m = physx::PxMat33(col0, col1, col2); return &m; }
SWIGINTERN physx::PxMat33 *new_physx_PxMat33__SWIG_3(float r){ thread_local physx::PxMat33 m; m = physx::PxMat33(r); return &m; }
SWIGINTERN physx::PxMat33 *new_physx_PxMat33__SWIG_4(physx::PxQuat const &q){ thread_local physx::PxMat33 m; m = physx::PxMat33(q); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_0(physx::PxIDENTITY r){ thread_local physx::PxMat44 m; m = physx::PxMat44(r); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_1(physx::PxZERO r){ thread_local physx::PxMat44 m; m = physx::PxMat44(r); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_2(physx::PxVec4 const &col0,physx::PxVec4 const &col1,physx::PxVec4 const &col2,physx::PxVec4 const &col3){ thread_local physx::PxMat44 m; m = physx::PxMat44(col0, col1, col2, col3); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_3(float r){ thread_local physx::PxMat44 m; m = physx::PxMat44(r); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_4(physx::PxVec3 const &col0,physx::PxVec3 const &col1,physx::PxVec3 const &col2,physx::PxVec3 const &col3){ thread_local physx::PxMat44 m; m = physx::PxMat44(col0, col1, col2, col3); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_5(physx::PxQuat const &q){ thread_local physx::PxMat44 m; m = physx::PxMat44(q); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_6(physx::PxVec4 const &diagonal){ thread_local physx::PxMat44 m; m = physx::PxMat44(diagonal); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_7(physx::PxMat33 const &axes,physx::PxVec3 const &position){ thread_local physx::PxMat44 m; m = physx::PxMat44(axes, position); return &m; }
SWIGINTERN physx::PxMat44 *new_physx_PxMat44__SWIG_8(physx::PxTransform const &t){ thread_local physx::PxMat44 m; m = physx::PxMat44(t); return &m; }
SWIGINTERN physx::PxBounds3 *new_physx_PxBounds3(physx::PxVec3 const &minimum,physx::PxVec3 const &maximum){ thread_local physx::PxBounds3 b; b = physx::PxBounds3(minimum, maximum); return &b; }
SWIGINTERN physx::PxMassProperties *new_physx_PxMassProperties__SWIG_0(physx::PxReal const m,physx::PxMat33 const &inertiaT,physx::PxVec3 const &com){ thread_local physx::PxMassProperties mp; mp = physx::PxMassProperties(m, inertiaT, com); return &mp; }
SWIGINTERN physx::PxMassProperties *new_physx_PxMassProperties__SWIG_1(physx::PxGeometry const &geometry){ thread_local physx::PxMassProperties mp; mp = physx::PxMassProperties(geometry); return &mp; }
 physx::PxJoint* physx_PxConstraintInfo_joint_get(const physx::PxConstraintInfo* info) { return (physx::PxJoint*)info->externalReference; }
 physx::PxRigidActor* physx_PxContactPairHeader_actor0_get(const physx::PxContactPairHeader* header) { return header->actors[0]; }
 physx::PxRigidActor* physx_PxContactPairHeader_actor1_get(const physx::PxContactPairHeader* header) { return header->actors[1]; }
 physx::PxContactPairHeaderFlag::Enum physx_PxContactPairHeader_flags_get(const physx::PxContactPairHeader* header) { return (physx::PxContactPairHeaderFlag::Enum)(uint32_t)header->flags; }
 physx::PxShape* physx_PxContactPair_shape0_get(const physx::PxContactPair* pair) { return pair->shapes[0]; }
 physx::PxShape* physx_PxContactPair_shape1_get(const physx::PxContactPair* pair) { return pair->shapes[1]; }
 physx::PxContactPairFlag::Enum physx_PxContactPair_flags_get(const physx::PxContactPair* pair) { return (physx::PxContactPairFlag::Enum)(uint32_t)pair->flags; }
 physx::PxPairFlag::Enum physx_PxContactPair_events_get(const physx::PxContactPair* pair) { return (physx::PxPairFlag::Enum)(uint32_t)pair->events; }

            physx::PxSimulationFilterShader* physx_PxDefaultSimulationFilterShader_function_get() { thread_local physx::PxSimulationFilterShader s; s = physx::PxCustomSimulationFilterShader; return &s; }
        
SWIGINTERN bool physx_PxDefaultSimulationFilterShader_getGroupCollisionFlag(physx::PxU16 const group1,physx::PxU16 const group2){ return physx::PxGetGroupCollisionFlag(group1, group2); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setGroupCollisionFlag(physx::PxU16 const group1,physx::PxU16 const group2,bool const enable){ physx::PxSetGroupCollisionFlag(group1, group2, enable); }
SWIGINTERN physx::PxU16 physx_PxDefaultSimulationFilterShader_getGroup(physx::PxActor const &actor){ return physx::PxGetGroup(actor); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setGroup(physx::PxActor &actor,physx::PxU16 const collisionGroup){ physx::PxSetGroup(actor, collisionGroup); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_getFilterOps(physx::PxFilterOp::Enum &op0,physx::PxFilterOp::Enum &op1,physx::PxFilterOp::Enum &op2){ physx::PxGetFilterOps(op0, op1, op2); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setFilterOps(physx::PxFilterOp::Enum op0,physx::PxFilterOp::Enum op1,physx::PxFilterOp::Enum op2){ physx::PxSetFilterOps(op0, op1, op2); }
SWIGINTERN bool physx_PxDefaultSimulationFilterShader_getFilterBool(){ return physx::PxGetFilterBool(); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setFilterBool(bool const enable){ physx::PxSetFilterBool(enable); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_getFilterConstants(physx::PxGroupsMask &c0,physx::PxGroupsMask &c1){ physx::PxGetFilterConstants(c0, c1); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setFilterConstants(physx::PxGroupsMask const &c0,physx::PxGroupsMask const &c1){ physx::PxSetFilterConstants(c0, c1); }
SWIGINTERN physx::PxGroupsMask physx_PxDefaultSimulationFilterShader_getGroupsMask(physx::PxActor const &actor){ return physx::PxGetGroupsMask(actor); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setGroupsMask(physx::PxActor &actor,physx::PxGroupsMask const &mask){ physx::PxSetGroupsMask(actor, mask); }
SWIGINTERN void physx_PxDefaultSimulationFilterShader_setCallbacksEnabled(physx::PxActor &actor,bool yes){ physx::PxSetCallbacksEnabled(actor, yes); }
SWIGINTERN bool physx_PxDefaultSimulationFilterShader_getCallbacksEnabled(physx::PxActor &actor){ return physx::PxGetCallbacksEnabled(actor); }

            physx::PxSceneFlag::Enum physx_PxSceneDesc_flags_get(const physx::PxSceneDesc* desc) { return (physx::PxSceneFlag::Enum)(uint32_t)desc->flags; }
            void physx_PxSceneDesc_flags_set(physx::PxSceneDesc* desc, physx::PxSceneFlag::Enum flags) { desc->flags.set(flags); }
        
SWIGINTERN physx::PxDefaultMemoryInputData *new_physx_PxDefaultMemoryInputData(void *data,physx::PxU32 length){ return new physx::PxDefaultMemoryInputData((physx::PxU8*)data, length); }

            physx::PxHeightFieldFlag::Enum physx_PxHeightFieldDesc_flags_get(const physx::PxHeightFieldDesc* desc) { return (physx::PxHeightFieldFlag::Enum)(uint32_t)desc->flags; }
            void physx_PxHeightFieldDesc_flags_set(physx::PxHeightFieldDesc* desc, physx::PxHeightFieldFlag::Enum flags) { desc->flags.set(flags); }
        

            physx::PxConvexMeshGeometryFlag::Enum physx_PxConvexMeshGeometry_meshFlags_get(const physx::PxConvexMeshGeometry* geom) { return (physx::PxConvexMeshGeometryFlag::Enum)(uint32_t)geom->meshFlags; }
            void physx_PxConvexMeshGeometry_meshFlags_set(physx::PxConvexMeshGeometry* geom, physx::PxConvexMeshGeometryFlag::Enum flags) { geom->meshFlags.set(flags); }
        

            physx::PxMeshGeometryFlag::Enum physx_PxTriangleMeshGeometry_meshFlags_get(const physx::PxTriangleMeshGeometry* geom) { return (physx::PxMeshGeometryFlag::Enum)(uint32_t)geom->meshFlags; }
            void physx_PxTriangleMeshGeometry_meshFlags_set(physx::PxTriangleMeshGeometry* geom, physx::PxMeshGeometryFlag::Enum flags) { geom->meshFlags.set(flags); }
        
SWIGINTERN physx::PxHeightFieldGeometry *new_physx_PxHeightFieldGeometry__SWIG_1(physx::PxHeightField *hf,physx::PxReal heightScale,physx::PxReal rowScale,physx::PxReal columnScale){ return new physx::PxHeightFieldGeometry(hf, (physx::PxMeshGeometryFlag::Enum)0, heightScale, rowScale, columnScale); }
SWIGINTERN physx::PxHeightFieldGeometry *new_physx_PxHeightFieldGeometry__SWIG_2(physx::PxHeightField *hf,physx::PxReal heightScale,physx::PxReal rowScale,physx::PxReal columnScale,physx::PxMeshGeometryFlag::Enum flags){ return new physx::PxHeightFieldGeometry(hf, flags, heightScale, rowScale, columnScale); }

            physx::PxMeshGeometryFlag::Enum physx_PxHeightFieldGeometry_heightFieldFlags_get(const physx::PxHeightFieldGeometry* geom) { return (physx::PxMeshGeometryFlag::Enum)(uint32_t)geom->heightFieldFlags; }
            void physx_PxHeightFieldGeometry_heightFieldFlags_set(physx::PxHeightFieldGeometry* geom, physx::PxMeshGeometryFlag::Enum flags) { geom->heightFieldFlags.set(flags); }
        
SWIGINTERN void physx_PxArticulationCache_readJointVelocities(physx::PxArticulationCache *self,physx::PxReal velocities[],int start,int count){ memcpy(velocities, self->jointVelocity + start, sizeof(physx::PxReal) * count); }
SWIGINTERN void physx_PxArticulationCache_writeJointVelocities(physx::PxArticulationCache *self,physx::PxReal const velocities[],int start,int count){ memcpy(self->jointVelocity + start, velocities, sizeof(physx::PxReal) * count); }
SWIGINTERN void physx_PxArticulationCache_readJointPositions(physx::PxArticulationCache *self,physx::PxReal positions[],int start,int count){ memcpy(positions, self->jointPosition + start, sizeof(physx::PxReal) * count); }
SWIGINTERN void physx_PxArticulationCache_writeJointPositions(physx::PxArticulationCache *self,physx::PxReal const positions[],int start,int count){ memcpy(self->jointPosition + start, positions, sizeof(physx::PxReal) * count); }

            const physx::PxArticulationRootLinkData& physx_PxArticulationCache_rootLinkData_get(physx::PxArticulationCache* self) { return self->rootLinkData[0]; }
            void physx_PxArticulationCache_rootLinkData_set(physx::PxArticulationCache* self, const physx::PxArticulationRootLinkData& value) { self->rootLinkData[0] = value; }
        

            physx::PxD6JointDriveFlag::Enum physx_PxD6JointDrive_flags_get(const physx::PxD6JointDrive* drive) { return (physx::PxD6JointDriveFlag::Enum)(uint32_t)drive->flags; }
            void physx_PxD6JointDrive_flags_set(physx::PxD6JointDrive* drive, physx::PxD6JointDriveFlag::Enum flags) { drive->flags.set(flags); }
        

            physx::PxHitFlag::Enum physx_PxLocationHit_flags_get(const physx::PxLocationHit* hit) { return (physx::PxHitFlag::Enum)(uint32_t)hit->flags; }
            void physx_PxLocationHit_flags_set(physx::PxLocationHit* hit, physx::PxHitFlag::Enum flags) { hit->flags.set(flags); }
        

            physx::PxQueryFlag::Enum physx_PxQueryFilterData_flags_get(const physx::PxQueryFilterData* data) { return (physx::PxQueryFlag::Enum)(uint32_t)data->flags; }
            void physx_PxQueryFilterData_flags_set(physx::PxQueryFilterData* data, physx::PxQueryFlag::Enum flags) { data->flags.set(flags); }
        

            physx::PxMeshPreprocessingFlag::Enum physx_PxCookingParams_meshPreprocessParams_get(const physx::PxCookingParams* params) { return (physx::PxMeshPreprocessingFlag::Enum)(uint32_t)params->meshPreprocessParams; }
            void physx_PxCookingParams_meshPreprocessParams_set(physx::PxCookingParams* params, physx::PxMeshPreprocessingFlag::Enum flags) { params->meshPreprocessParams.set(flags); }
        

            physx::PxMeshFlag::Enum physx_PxSimpleTriangleMesh_flags_get(const physx::PxSimpleTriangleMesh* mesh) { return (physx::PxMeshFlag::Enum)(uint32_t)mesh->flags; }
            void physx_PxSimpleTriangleMesh_flags_set(physx::PxSimpleTriangleMesh* mesh, physx::PxMeshFlag::Enum flags) { mesh->flags.set(flags); }
        

            physx::PxConvexFlag::Enum physx_PxConvexMeshDesc_flags_get(const physx::PxConvexMeshDesc* desc) { return (physx::PxConvexFlag::Enum)(uint32_t)desc->flags; }
            void physx_PxConvexMeshDesc_flags_set(physx::PxConvexMeshDesc* desc, physx::PxConvexFlag::Enum flags) { desc->flags.set(flags); }
        
SWIGINTERN void physx_PxPvdSceneClient_setScenePvdFlags(physx::PxPvdSceneClient *self,physx::PxPvdSceneFlag::Enum flags){ self->setScenePvdFlags(flags); }
SWIGINTERN physx::PxPvdSceneFlag::Enum physx_PxPvdSceneClient_getScenePvdFlags(physx::PxPvdSceneClient *self){ return (physx::PxPvdSceneFlag::Enum)(uint32_t)self->getScenePvdFlags(); }

            physx::PxSimulationFilterShader* physx_PxUnityCollisionFiltering_function_get() { thread_local physx::PxSimulationFilterShader s; s = physx::PxUnityCollisionFiltering::shader; return &s; }
        
SWIGINTERN physx::PxFoundation *physx_PxFoundation_create(physx::PxVersion physicsVersion,physx::PxAllocatorCallback &allocatorCallback,physx::PxErrorCallback &errorCallback){ return PxCreateFoundation(physicsVersion, allocatorCallback, errorCallback); }
SWIGINTERN physx::PxPhysics *physx_PxFoundation_createPhysics__SWIG_0(physx::PxFoundation *self,physx::PxVersion physicsVersion,physx::PxTolerancesScale const &scale=physx::PxTolerancesScale(),bool trackOutstandingAllocations=false,physx::PxPvd *pvd=nullptr){ return PxCreatePhysics(physicsVersion, *self, scale, trackOutstandingAllocations, pvd); }
SWIGINTERN physx::PxCudaContextManager *physx_PxFoundation_createCudaContextManager(physx::PxFoundation *self,char const *dllPath){ return PxFoundation_createCudaContextManager(*self, dllPath); }
SWIGINTERN physx::PxPvd *physx_PxFoundation_createPvd(physx::PxFoundation *self){ return physx::PxCreatePvd(*self); }
SWIGINTERN physx::PxCooking *physx_PxFoundation_createCooking(physx::PxFoundation *self,physx::PxVersion physicsVersion,physx::PxCookingParams const &params){ return PxCreateCooking(physicsVersion, *self, params); }
SWIGINTERN physx::PxTriangleMesh *physx_PxPhysics_getTriangleMesh(physx::PxPhysics *self,physx::PxU32 index){ physx::PxTriangleMesh* tm; self->getTriangleMeshes(&tm, 1, index); return tm; }
SWIGINTERN physx::PxHeightField *physx_PxPhysics_getHeightField(physx::PxPhysics *self,physx::PxU32 index){ physx::PxHeightField* hf; self->getHeightFields(&hf, 1, index); return hf; }
SWIGINTERN physx::PxConvexMesh *physx_PxPhysics_getConvexMesh(physx::PxPhysics *self,physx::PxU32 index){ physx::PxConvexMesh* cm; self->getConvexMeshes(&cm, 1, index); return cm; }
SWIGINTERN physx::PxBVHStructure *physx_PxPhysics_getBVHStructure(physx::PxPhysics *self,physx::PxU32 index){ physx::PxBVHStructure* bvh; self->getBVHStructures(&bvh, 1, index); return bvh; }
SWIGINTERN physx::PxScene *physx_PxPhysics_getScene(physx::PxPhysics *self,physx::PxU32 index){ physx::PxScene* s; self->getScenes(&s, 1, index); return s; }
SWIGINTERN physx::PxShape *physx_PxPhysics_createShape__SWIG_0(physx::PxPhysics *self,physx::PxGeometry const &geometry,physx::PxMaterial const &material,bool isExclusive=false,physx::PxShapeFlag::Enum shapeFlags=(physx::PxShapeFlag::Enum) (uint32_t) (physx::PxShapeFlag::eVISUALIZATION|physx::PxShapeFlag::eSCENE_QUERY_SHAPE|physx::PxShapeFlag::eSIMULATION_SHAPE)){ return self->createShape(geometry, material, isExclusive, shapeFlags); }
SWIGINTERN physx::PxShape *physx_PxPhysics_createShape__SWIG_3(physx::PxPhysics *self,physx::PxGeometry const &geometry,physx::PxMaterial *materials[],physx::PxU16 materialCount,bool isExclusive=false,physx::PxShapeFlag::Enum shapeFlags=(physx::PxShapeFlag::Enum) (uint32_t) (physx::PxShapeFlag::eVISUALIZATION|physx::PxShapeFlag::eSCENE_QUERY_SHAPE|physx::PxShapeFlag::eSIMULATION_SHAPE)){ return self->createShape(geometry, materials, materialCount, isExclusive, shapeFlags); }
SWIGINTERN physx::PxShape *physx_PxPhysics_getShape(physx::PxPhysics *self,physx::PxU32 index){ physx::PxShape* s; self->getShapes(&s, 1, index); return s; }
SWIGINTERN physx::PxFixedJoint *physx_PxPhysics_createFixedJoint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxFixedJointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxRevoluteJoint *physx_PxPhysics_createRevoluteJoint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxRevoluteJointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxDistanceJoint *physx_PxPhysics_createDistanceJoint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxDistanceJointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxSphericalJoint *physx_PxPhysics_createSphericalJoint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxSphericalJointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxPrismaticJoint *physx_PxPhysics_createPrismaticJoint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxPrismaticJointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxD6Joint *physx_PxPhysics_createD6Joint(physx::PxPhysics *self,physx::PxRigidActor *actor0,physx::PxTransform const &localFrame0,physx::PxRigidActor *actor1,physx::PxTransform const &localFrame1){ return physx::PxD6JointCreate(*self, actor0, localFrame0, actor1, localFrame1); }
SWIGINTERN physx::PxMaterial *physx_PxPhysics_getMaterial(physx::PxPhysics *self,physx::PxU32 index){ physx::PxMaterial* m; self->getMaterials(&m, 1, index); return m; }
SWIGINTERN bool physx_PxPhysics_initExtensions__SWIG_0(physx::PxPhysics *self,physx::PxPvd *pvd=nullptr){ return PxInitExtensions(*self, pvd); }
SWIGINTERN void physx_PxPhysics_closeExtensions(physx::PxPhysics *self){ PxCloseExtensions(); }
SWIGINTERN physx::PxSceneFlag::Enum physx_PxScene_getFlags(physx::PxScene const *self){ return (physx::PxSceneFlag::Enum)(uint32_t)self->getFlags(); }
SWIGINTERN physx::PxU32 physx_PxScene_getNbActors(physx::PxScene *self){ return self->getNbActors(physx::PxActorTypeFlag::Enum::eRIGID_STATIC | physx::PxActorTypeFlag::Enum::eRIGID_DYNAMIC); }
SWIGINTERN physx::PxActor *physx_PxScene_getActor(physx::PxScene *self,physx::PxU32 index){ physx::PxActor* actor; self->getActors(physx::PxActorTypeFlag::Enum::eRIGID_STATIC | physx::PxActorTypeFlag::Enum::eRIGID_DYNAMIC, &actor, 1, index); return actor; }
SWIGINTERN physx::PxU32 physx_PxScene_getNbStaticActors(physx::PxScene *self){ return self->getNbActors(physx::PxActorTypeFlag::Enum::eRIGID_STATIC); }
SWIGINTERN physx::PxActor *physx_PxScene_getStaticActor(physx::PxScene *self,physx::PxU32 index){ physx::PxActor* actor; self->getActors(physx::PxActorTypeFlag::Enum::eRIGID_STATIC, &actor, 1, index); return actor; }
SWIGINTERN physx::PxU32 physx_PxScene_getNbDynamicActors(physx::PxScene *self){ return self->getNbActors(physx::PxActorTypeFlag::Enum::eRIGID_DYNAMIC); }
SWIGINTERN physx::PxActor *physx_PxScene_getDynamicActor(physx::PxScene *self,physx::PxU32 index){ physx::PxActor* actor; self->getActors(physx::PxActorTypeFlag::Enum::eRIGID_DYNAMIC, &actor, 1, index); return actor; }
SWIGINTERN physx::PxArticulationBase *physx_PxScene_getArticulation(physx::PxScene *self,physx::PxU32 index){ physx::PxArticulationBase* a; self->getArticulations(&a, 1, index); return a; }
SWIGINTERN physx::PxConstraint *physx_PxScene_getConstraint(physx::PxScene *self,physx::PxU32 index){ physx::PxConstraint* c; self->getConstraints(&c, 1, index); return c; }
SWIGINTERN physx::PxAggregate *physx_PxScene_getAggregate(physx::PxScene *self,physx::PxU32 index){ physx::PxAggregate* a; self->getAggregates(&a, 1, index); return a; }
SWIGINTERN bool physx_PxScene_raycast__SWIG_0(physx::PxScene *self,physx::PxVec3 const &origin,physx::PxVec3 const &unitDir,physx::PxReal const distance,physx::PxRaycastCallback &hitCall,physx::PxHitFlag::Enum hitFlags=physx::PxHitFlag::eDEFAULT,physx::PxQueryFilterData const &filterData=physx::PxQueryFilterData(),physx::PxQueryCache const *cache=NULL){ return self->raycast(origin, unitDir, distance, hitCall, hitFlags, filterData, nullptr, cache); }
SWIGINTERN bool physx_PxScene_sweep__SWIG_0(physx::PxScene *self,physx::PxGeometry const &geometry,physx::PxTransform const &pose,physx::PxVec3 const &unitDir,physx::PxReal const distance,physx::PxSweepCallback &hitCall,physx::PxHitFlag::Enum hitFlags=physx::PxHitFlag::eDEFAULT,physx::PxQueryFilterData const &filterData=physx::PxQueryFilterData(),physx::PxQueryCache const *cache=NULL,physx::PxReal const inflation=0.){ return self->sweep(geometry, pose, unitDir, distance, hitCall, hitFlags, filterData, nullptr, cache, inflation); }
SWIGINTERN bool physx_PxScene_overlap__SWIG_0(physx::PxScene *self,physx::PxGeometry const &geometry,physx::PxTransform const &pose,physx::PxOverlapCallback &hitCall,physx::PxQueryFilterData const &filterData=physx::PxQueryFilterData()){ return self->overlap(geometry, pose, hitCall, filterData); }
SWIGINTERN physx::PxBroadPhaseRegionInfo physx_PxScene_getBroadPhaseRegion(physx::PxScene *self,physx::PxU32 index){ physx::PxBroadPhaseRegionInfo r; self->getBroadPhaseRegions(&r, 1, index); return r; }
SWIGINTERN void physx_PxBase_setBaseFlags(physx::PxBase *self,physx::PxBaseFlag::Enum inFlags){ self->setBaseFlags(inFlags); }
SWIGINTERN physx::PxBaseFlag::Enum physx_PxBase_getBaseFlags(physx::PxBase const *self){ return (physx::PxBaseFlag::Enum)(uint32_t)self->getBaseFlags(); }
SWIGINTERN physx::PxRigidActor *physx_PxBase_getRigidActor(physx::PxBase *self){ return self->is<physx::PxRigidActor>(); }
SWIGINTERN physx::PxRigidStatic *physx_PxBase_getRigidStatic(physx::PxBase *self){ return self->is<physx::PxRigidStatic>(); }
SWIGINTERN physx::PxRigidBody *physx_PxBase_getRigidBody(physx::PxBase *self){ return self->is<physx::PxRigidBody>(); }
SWIGINTERN physx::PxRigidDynamic *physx_PxBase_getRigidDynamic(physx::PxBase *self){ return self->is<physx::PxRigidDynamic>(); }
SWIGINTERN physx::PxArticulationLink *physx_PxBase_getArticulationLink(physx::PxBase *self){ return self->is<physx::PxArticulationLink>(); }
SWIGINTERN physx::PxConvexMesh *physx_PxBase_getConvexMesh(physx::PxBase *self){ return self->is<physx::PxConvexMesh>(); }
SWIGINTERN physx::PxTriangleMesh *physx_PxBase_getTriangleMesh(physx::PxBase *self){ return self->is<physx::PxTriangleMesh>(); }
SWIGINTERN physx::PxHeightField *physx_PxBase_getHeightField(physx::PxBase *self){ return self->is<physx::PxHeightField>(); }
SWIGINTERN physx::PxMaterial *physx_PxBase_getMaterial(physx::PxBase *self){ return self->is<physx::PxMaterial>(); }
SWIGINTERN void physx_PxActor_setActorFlags(physx::PxActor *self,physx::PxActorFlag::Enum inFlags){ self->setActorFlags(inFlags); }
SWIGINTERN physx::PxActorFlag::Enum physx_PxActor_getActorFlags(physx::PxActor *self){ return (physx::PxActorFlag::Enum)(uint32_t)self->getActorFlags(); }
SWIGINTERN physx::PxMat44 const &physx_PxRigidActor_getGlobalMatrix(physx::PxRigidActor *self){ thread_local physx::PxMat44 m; m = physx::PxMat44(self->getGlobalPose()); return m; }
SWIGINTERN physx::PxShape *physx_PxRigidActor_getShape(physx::PxRigidActor *self,physx::PxU32 index){ physx::PxShape* s; self->getShapes(&s, 1, index); return s; }
SWIGINTERN physx::PxConstraint *physx_PxRigidActor_getConstraint(physx::PxRigidActor *self,physx::PxU32 index){ physx::PxConstraint* c; self->getConstraints(&c, 1, index); return c; }
SWIGINTERN physx::PxShape *physx_PxRigidActor_createExclusiveShape__SWIG_0(physx::PxRigidActor *self,physx::PxGeometry const &geometry,physx::PxMaterial *materials[],physx::PxU16 materialCount,physx::PxShapeFlag::Enum shapeFlags=(physx::PxShapeFlag::Enum) (uint32_t) (physx::PxShapeFlag::eVISUALIZATION|physx::PxShapeFlag::eSCENE_QUERY_SHAPE|physx::PxShapeFlag::eSIMULATION_SHAPE)){ return physx::PxRigidActorExt::createExclusiveShape(*self, geometry, materials, materialCount, shapeFlags); }
SWIGINTERN physx::PxShape *physx_PxRigidActor_createExclusiveShape__SWIG_2(physx::PxRigidActor *self,physx::PxGeometry const &geometry,physx::PxMaterial &material,physx::PxShapeFlag::Enum shapeFlags=(physx::PxShapeFlag::Enum) (uint32_t) (physx::PxShapeFlag::eVISUALIZATION|physx::PxShapeFlag::eSCENE_QUERY_SHAPE|physx::PxShapeFlag::eSIMULATION_SHAPE)){ return physx::PxRigidActorExt::createExclusiveShape(*self, geometry, material, shapeFlags); }
SWIGINTERN void physx_PxRigidBody_setRigidBodyFlags(physx::PxRigidBody *self,physx::PxRigidBodyFlag::Enum inFlags){ self->setRigidBodyFlags(inFlags); }
SWIGINTERN physx::PxRigidBodyFlag::Enum physx_PxRigidBody_getRigidBodyFlags(physx::PxRigidBody *self){ return (physx::PxRigidBodyFlag::Enum)(uint32_t)self->getRigidBodyFlags(); }
SWIGINTERN bool physx_PxRigidBody_updateMassAndInertia__SWIG_0(physx::PxRigidBody *self,physx::PxReal const shapeDensities[],physx::PxU32 shapeDensityCount,physx::PxVec3 const *massLocalPose=NULL,bool includeNonSimShapes=false){ return physx::PxRigidBodyExt::updateMassAndInertia(*self, shapeDensities, shapeDensityCount, massLocalPose, includeNonSimShapes); }
SWIGINTERN bool physx_PxRigidBody_updateMassAndInertia__SWIG_3(physx::PxRigidBody *self,physx::PxReal density=1000.0,physx::PxVec3 const *massLocalPose=NULL,bool includeNonSimShapes=false){ return physx::PxRigidBodyExt::updateMassAndInertia(*self, density, massLocalPose, includeNonSimShapes); }
SWIGINTERN bool physx_PxRigidBody_setMassAndUpdateInertia__SWIG_0(physx::PxRigidBody *self,physx::PxReal const shapeMasses[],physx::PxU32 shapeMassCount,physx::PxVec3 const *massLocalPose=NULL,bool includeNonSimShapes=false){ return physx::PxRigidBodyExt::setMassAndUpdateInertia(*self, shapeMasses, shapeMassCount, massLocalPose, includeNonSimShapes); }
SWIGINTERN bool physx_PxRigidBody_setMassAndUpdateInertia__SWIG_3(physx::PxRigidBody *self,physx::PxReal mass,physx::PxVec3 const *massLocalPose=NULL,bool includeNonSimShapes=false){ return physx::PxRigidBodyExt::setMassAndUpdateInertia(*self, mass, massLocalPose, includeNonSimShapes); }
SWIGINTERN physx::PxMassProperties physx_PxRigidBody_computeMassPropertiesFromShapes(physx::PxShape *shapes[],int shapeCount){ return physx::PxRigidBodyExt::computeMassPropertiesFromShapes(shapes, shapeCount); }
SWIGINTERN void physx_PxRigidBody_addForceAtPos__SWIG_0(physx::PxRigidBody *self,physx::PxVec3 const &force,physx::PxVec3 const &pos,physx::PxForceMode::Enum mode=physx::PxForceMode::eFORCE,bool wakeup=true){ physx::PxRigidBodyExt::addForceAtPos(*self, force, pos, mode, wakeup); }
SWIGINTERN void physx_PxRigidBody_addForceAtLocalPos__SWIG_0(physx::PxRigidBody *self,physx::PxVec3 const &force,physx::PxVec3 const &pos,physx::PxForceMode::Enum mode=physx::PxForceMode::eFORCE,bool wakeup=true){ physx::PxRigidBodyExt::addForceAtLocalPos(*self, force, pos, mode, wakeup); }
SWIGINTERN void physx_PxRigidBody_addLocalForceAtPos__SWIG_0(physx::PxRigidBody *self,physx::PxVec3 const &force,physx::PxVec3 const &pos,physx::PxForceMode::Enum mode=physx::PxForceMode::eFORCE,bool wakeup=true){ physx::PxRigidBodyExt::addLocalForceAtPos(*self, force, pos, mode, wakeup); }
SWIGINTERN void physx_PxRigidBody_addLocalForceAtLocalPos__SWIG_0(physx::PxRigidBody *self,physx::PxVec3 const &force,physx::PxVec3 const &pos,physx::PxForceMode::Enum mode=physx::PxForceMode::eFORCE,bool wakeup=true){ physx::PxRigidBodyExt::addLocalForceAtLocalPos(*self, force, pos, mode, wakeup); }
SWIGINTERN physx::PxVec3 physx_PxRigidBody_getVelocityAtPos(physx::PxRigidBody *self,physx::PxVec3 const &pos){ return physx::PxRigidBodyExt::getVelocityAtPos(*self, pos); }
SWIGINTERN physx::PxVec3 physx_PxRigidBody_getLocalVelocityAtLocalPos(physx::PxRigidBody *self,physx::PxVec3 const &pos){ return physx::PxRigidBodyExt::getLocalVelocityAtLocalPos(*self, pos); }
SWIGINTERN physx::PxVec3 physx_PxRigidBody_getVelocityAtOffset(physx::PxRigidBody *self,physx::PxVec3 const &pos){ return physx::PxRigidBodyExt::getVelocityAtOffset(*self, pos); }
SWIGINTERN void physx_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_0(physx::PxRigidBody *self,physx::PxVec3 const &impulsiveForce,physx::PxVec3 const &impulsiveTorque,physx::PxVec3 &deltaLinearVelocity,physx::PxVec3 &deltaAngularVelocity){ physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*self, impulsiveForce, impulsiveTorque, deltaLinearVelocity, deltaAngularVelocity); }
SWIGINTERN void physx_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_1(physx::PxRigidBody *self,physx::PxTransform const &globalPose,physx::PxVec3 const &point,physx::PxVec3 const &impulse,physx::PxReal const invMassScale,physx::PxReal const invInertiaScale,physx::PxVec3 &deltaLinearVelocity,physx::PxVec3 &deltaAngularVelocity){ physx::PxRigidBodyExt::computeVelocityDeltaFromImpulse(*self, globalPose, point, impulse, invMassScale, invInertiaScale, deltaLinearVelocity, deltaAngularVelocity); }
SWIGINTERN void physx_PxRigidBody_computeLinearAngularImpulse(physx::PxRigidBody *self,physx::PxTransform const &globalPose,physx::PxVec3 const &point,physx::PxVec3 const &impulse,physx::PxReal const invMassScale,physx::PxReal const invInertiaScale,physx::PxVec3 &linearImpulse,physx::PxVec3 &angularImpulse){ physx::PxRigidBodyExt::computeLinearAngularImpulse(*self, globalPose, point, impulse, invMassScale, invInertiaScale, linearImpulse, angularImpulse); }
SWIGINTERN void physx_PxRigidDynamic_setRigidDynamicLockFlags(physx::PxRigidDynamic *self,physx::PxRigidDynamicLockFlag::Enum flags){ self->setRigidDynamicLockFlags(flags); }
SWIGINTERN physx::PxRigidDynamicLockFlag::Enum physx_PxRigidDynamic_getRigidDynamicLockFlags(physx::PxRigidDynamic *self){ return (physx::PxRigidDynamicLockFlag::Enum)(uint32_t)self->getRigidDynamicLockFlags(); }
SWIGINTERN physx::PxMaterial *physx_PxShape_getMaterial(physx::PxShape *self,physx::PxU32 index){ physx::PxMaterial* m; self->getMaterials(&m, 1, index); return m; }
SWIGINTERN void physx_PxShape_setFlags(physx::PxShape *self,physx::PxShapeFlag::Enum inFlags){ self->setFlags(inFlags); }
SWIGINTERN physx::PxShapeFlag::Enum physx_PxShape_getFlags(physx::PxShape *self){ return (physx::PxShapeFlag::Enum)(uint32_t)self->getFlags(); }
SWIGINTERN physx::PxVec3 const &physx_PxConvexMesh_getVertex(physx::PxConvexMesh *self,physx::PxU32 index){ return self->getVertices()[index]; }
SWIGINTERN physx::PxU8 physx_PxConvexMesh_getIndex(physx::PxConvexMesh *self,physx::PxU32 index){ return self->getIndexBuffer()[index]; }
SWIGINTERN physx::PxReal physx_PxConvexMesh_getMass(physx::PxConvexMesh *self){ physx::PxReal m; physx::PxMat33 i; physx::PxVec3 c; self->getMassInformation(m, i, c); return m; }
SWIGINTERN physx::PxMat33 const &physx_PxConvexMesh_getLocalInertia(physx::PxConvexMesh *self){ physx::PxReal m; thread_local physx::PxMat33 i; physx::PxVec3 c; self->getMassInformation(m, i, c); return i; }
SWIGINTERN physx::PxVec3 const &physx_PxConvexMesh_getLocalCenterOfMass(physx::PxConvexMesh *self){ physx::PxReal m; physx::PxMat33 i; thread_local physx::PxVec3 c; self->getMassInformation(m, i, c); return c; }
SWIGINTERN physx::PxVec3 physx_PxTriangleMesh_getVertex(physx::PxTriangleMesh *self,physx::PxU32 index){ return self->getVertices()[index]; }
SWIGINTERN void physx_PxTriangleMesh_setVertex(physx::PxTriangleMesh *self,physx::PxU32 index,physx::PxVec3 const &position){ self->getVerticesForModification()[index] = position; }
SWIGINTERN int physx_PxTriangleMesh_getTriangleVertex(physx::PxTriangleMesh *self,physx::PxU32 index,physx::PxU32 vertexIndex){ if (self->getTriangleMeshFlags().isSet(physx::PxTriangleMeshFlag::e16_BIT_INDICES)) return ((physx::PxU16*)self->getTriangles())[index * 3 + vertexIndex]; else return ((physx::PxU32*)self->getTriangles())[index * 3 + vertexIndex]; }
SWIGINTERN physx::PxTriangleMeshFlag::Enum physx_PxTriangleMesh_getTriangleMeshFlags(physx::PxTriangleMesh *self){ return (physx::PxTriangleMeshFlag::Enum)(uint32_t)self->getTriangleMeshFlags(); }
SWIGINTERN physx::PxHeightFieldFlag::Enum physx_PxHeightField_getFlags(physx::PxHeightField *self){ return (physx::PxHeightFieldFlag::Enum)(uint32_t)self->getFlags(); }
SWIGINTERN void physx_PxMaterial_setFlags(physx::PxMaterial *self,physx::PxMaterialFlag::Enum inFlags){ self->setFlags(inFlags); }
SWIGINTERN physx::PxMaterialFlag::Enum physx_PxMaterial_getFlags(physx::PxMaterial *self){ return (physx::PxMaterialFlag::Enum)(uint32_t)self->getFlags(); }
SWIGINTERN physx::PxRigidActor *physx_PxPruningStructure_getRigidActor(physx::PxPruningStructure *self,physx::PxU32 index){ physx::PxRigidActor* ra; self->getRigidActors(&ra, 1, index); return ra; }
SWIGINTERN physx::PxRigidActor *physx_PxConstraint_getActor0(physx::PxConstraint *self){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); return a0; }
SWIGINTERN physx::PxRigidActor *physx_PxConstraint_getActor1(physx::PxConstraint *self){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); return a1; }
SWIGINTERN void physx_PxConstraint_setActor0(physx::PxConstraint *self,physx::PxRigidActor *actor){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); self->setActors(actor, a1); }
SWIGINTERN void physx_PxConstraint_setActor1(physx::PxConstraint *self,physx::PxRigidActor *actor){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); self->setActors(a0, actor); }
SWIGINTERN void physx_PxConstraint_setFlags(physx::PxConstraint *self,physx::PxConstraintFlag::Enum flags){ self->setFlags(flags); }
SWIGINTERN physx::PxConstraintFlag::Enum physx_PxConstraint_getFlags(physx::PxConstraint *self){ return (physx::PxConstraintFlag::Enum)(uint32_t)self->getFlags(); }
SWIGINTERN physx::PxArticulationJoint *physx_PxArticulationJointBase_getArticulationJoint(physx::PxArticulationJointBase *self){ return static_cast<physx::PxArticulationJoint*>(self); }
SWIGINTERN physx::PxArticulationJointReducedCoordinate *physx_PxArticulationJointBase_getArticulationJointReducedCoordinate(physx::PxArticulationJointBase *self){ return static_cast<physx::PxArticulationJointReducedCoordinate*>(self); }
SWIGINTERN physx::PxArticulationJointReducedCoordinate *physx_PxArticulationLink_getInboundJointReducedCoordinate(physx::PxArticulationLink *self){ return static_cast<physx::PxArticulationJointReducedCoordinate*>(self->getInboundJoint()); }
SWIGINTERN physx::PxArticulationLink *physx_PxArticulationLink_getChild(physx::PxArticulationLink *self,physx::PxU32 index){ physx::PxArticulationLink* c; self->getChildren(&c, 1, index); return c; }
SWIGINTERN physx::PxArticulationLink *physx_PxArticulationBase_getLink(physx::PxArticulationBase *self,physx::PxU32 index){ physx::PxArticulationLink* l; self->getLinks(&l, 1, index); return l; }
SWIGINTERN void physx_PxArticulationReducedCoordinate_setArticulationFlags(physx::PxArticulationReducedCoordinate *self,physx::PxArticulationFlag::Enum flags){ self->setArticulationFlags(flags); }
SWIGINTERN physx::PxArticulationFlag::Enum physx_PxArticulationReducedCoordinate_getArticulationFlags(physx::PxArticulationReducedCoordinate *self){ return (physx::PxArticulationFlag::Enum)(uint32_t)self->getArticulationFlags(); }
SWIGINTERN void physx_PxArticulationReducedCoordinate_applyCache__SWIG_0(physx::PxArticulationReducedCoordinate *self,physx::PxArticulationCache &cache,physx::PxArticulationCache::Enum const flag,bool autowake=true){ self->applyCache(cache, flag, autowake); }
SWIGINTERN void physx_PxArticulationReducedCoordinate_copyInternalStateToCache(physx::PxArticulationReducedCoordinate *self,physx::PxArticulationCache &cache,physx::PxArticulationCache::Enum const flag){ self->copyInternalStateToCache(cache, flag); }
SWIGINTERN physx::PxJoint *physx_PxArticulationReducedCoordinate_getLoopJoint(physx::PxArticulationReducedCoordinate *self,physx::PxU32 index){ physx::PxJoint* j; self->getLoopJoints(&j, 1, index); return j; }
SWIGINTERN physx::PxActor *physx_PxAggregate_getActor(physx::PxAggregate *self,physx::PxU32 index){ physx::PxActor* a; self->getActors(&a, 1, index); return a; }
SWIGINTERN physx::PxRigidActor *physx_PxJoint_getActor0(physx::PxJoint *self){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); return a0; }
SWIGINTERN physx::PxRigidActor *physx_PxJoint_getActor1(physx::PxJoint *self){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); return a1; }
SWIGINTERN void physx_PxJoint_setActor0(physx::PxJoint *self,physx::PxRigidActor *actor){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); self->setActors(actor, a1); }
SWIGINTERN void physx_PxJoint_setActor1(physx::PxJoint *self,physx::PxRigidActor *actor){ physx::PxRigidActor *a0, *a1; self->getActors(a0, a1); self->setActors(a0, actor); }
SWIGINTERN void physx_PxJoint_setConstraintFlags(physx::PxJoint *self,physx::PxConstraintFlag::Enum flags){ self->setConstraintFlags(flags); }
SWIGINTERN physx::PxConstraintFlag::Enum physx_PxJoint_getConstraintFlags(physx::PxJoint *self){ return (physx::PxConstraintFlag::Enum)(uint32_t)self->getConstraintFlags(); }
SWIGINTERN void physx_PxRevoluteJoint_setRevoluteJointFlags(physx::PxRevoluteJoint *self,physx::PxRevoluteJointFlag::Enum flags){ self->setRevoluteJointFlags(flags); }
SWIGINTERN physx::PxRevoluteJointFlag::Enum physx_PxRevoluteJoint_getRevoluteJointFlags(physx::PxRevoluteJoint *self){ return (physx::PxRevoluteJointFlag::Enum)(uint32_t)self->getRevoluteJointFlags(); }
SWIGINTERN void physx_PxDistanceJoint_setDistanceJointFlags(physx::PxDistanceJoint *self,physx::PxDistanceJointFlag::Enum flags){ self->setDistanceJointFlags(flags); }
SWIGINTERN physx::PxDistanceJointFlag::Enum physx_PxDistanceJoint_getDistanceJointFlags(physx::PxDistanceJoint *self){ return (physx::PxDistanceJointFlag::Enum)(uint32_t)self->getDistanceJointFlags(); }
SWIGINTERN void physx_PxSphericalJoint_setSphericalJointFlags(physx::PxSphericalJoint *self,physx::PxSphericalJointFlag::Enum flags){ self->setSphericalJointFlags(flags); }
SWIGINTERN physx::PxSphericalJointFlag::Enum physx_PxSphericalJoint_getSphericalJointFlags(physx::PxSphericalJoint *self){ return (physx::PxSphericalJointFlag::Enum)(uint32_t)self->getSphericalJointFlags(); }
SWIGINTERN void physx_PxPrismaticJoint_setPrismaticJointFlags(physx::PxPrismaticJoint *self,physx::PxPrismaticJointFlag::Enum flags){ self->setPrismaticJointFlags(flags); }
SWIGINTERN physx::PxPrismaticJointFlag::Enum physx_PxPrismaticJoint_getPrismaticJointFlags(physx::PxPrismaticJoint *self){ return (physx::PxPrismaticJointFlag::Enum)(uint32_t)self->getPrismaticJointFlags(); }
SWIGINTERN physx::PxPvdTransport *physx_PxPvdTransport_createDefaultSocketTransport(char const *host,int port,int timeout){ thread_local std::string sl_host; sl_host = host; return physx::PxDefaultPvdSocketTransportCreate(sl_host.c_str(), port, timeout); }
SWIGINTERN bool physx_PxPvd_connect(physx::PxPvd *self,physx::PxPvdTransport &transport,physx::PxPvdInstrumentationFlag::Enum flags){ return self->connect(transport, physx::PxPvdInstrumentationFlag::ePROFILE/*flags*/); }
SWIGINTERN physx::PxPvdInstrumentationFlag::Enum physx_PxPvd_getInstrumentationFlags(physx::PxPvd *self){ return (physx::PxPvdInstrumentationFlag::Enum)(uint32_t)self->getInstrumentationFlags(); }
SWIGINTERN physx::PxDefaultCpuDispatcher *physx_PxCpuDispatcher_createDefault__SWIG_0(physx::PxU32 numThreads,physx::PxU32 affinityMasks[]=NULL){ return physx::PxDefaultCpuDispatcherCreate(numThreads, affinityMasks); }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "NativeCSHARP_wrap.h"

SwigDirector_PxSimulationEventCallback::SwigDirector_PxSimulationEventCallback() : physx::wrap::PxSimulationEventCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_PxSimulationEventCallback::onConstraintBreak(physx::PxConstraintInfoList const &constraints) {
  void * jconstraints = 0 ;
  
  if (!swig_callbackonConstraintBreak) {
    physx::wrap::PxSimulationEventCallback::onConstraintBreak(constraints);
    return;
  } else {
    jconstraints = (physx::PxConstraintInfoList *) &constraints; 
    swig_callbackonConstraintBreak(jconstraints);
  }
}

void SwigDirector_PxSimulationEventCallback::onWake(physx::PxActorList const &actors) {
  void * jactors = 0 ;
  
  if (!swig_callbackonWake) {
    physx::wrap::PxSimulationEventCallback::onWake(actors);
    return;
  } else {
    jactors = (physx::PxActorList *) &actors; 
    swig_callbackonWake(jactors);
  }
}

void SwigDirector_PxSimulationEventCallback::onSleep(physx::PxActorList const &actors) {
  void * jactors = 0 ;
  
  if (!swig_callbackonSleep) {
    physx::wrap::PxSimulationEventCallback::onSleep(actors);
    return;
  } else {
    jactors = (physx::PxActorList *) &actors; 
    swig_callbackonSleep(jactors);
  }
}

void SwigDirector_PxSimulationEventCallback::onContact(physx::PxContactPairHeader const &pairHeader, physx::PxContactPairList const &pairs) {
  void * jpairHeader = 0 ;
  void * jpairs = 0 ;
  
  if (!swig_callbackonContact) {
    physx::wrap::PxSimulationEventCallback::onContact(pairHeader,pairs);
    return;
  } else {
    jpairHeader = (physx::PxContactPairHeader *) &pairHeader; 
    jpairs = (physx::PxContactPairList *) &pairs; 
    swig_callbackonContact(jpairHeader, jpairs);
  }
}

void SwigDirector_PxSimulationEventCallback::onTrigger(physx::PxTriggerPairList const &pairs) {
  void * jpairs = 0 ;
  
  if (!swig_callbackonTrigger) {
    physx::wrap::PxSimulationEventCallback::onTrigger(pairs);
    return;
  } else {
    jpairs = (physx::PxTriggerPairList *) &pairs; 
    swig_callbackonTrigger(jpairs);
  }
}

void SwigDirector_PxSimulationEventCallback::onAdvance(physx::PxRigidBodyList const &bodyBuffer, physx::PxTransformList const &poseBuffer) {
  void * jbodyBuffer = 0 ;
  void * jposeBuffer = 0 ;
  
  if (!swig_callbackonAdvance) {
    physx::wrap::PxSimulationEventCallback::onAdvance(bodyBuffer,poseBuffer);
    return;
  } else {
    jbodyBuffer = (physx::PxRigidBodyList *) &bodyBuffer; 
    jposeBuffer = (physx::PxTransformList *) &poseBuffer; 
    swig_callbackonAdvance(jbodyBuffer, jposeBuffer);
  }
}

SwigDirector_PxSimulationEventCallback::~SwigDirector_PxSimulationEventCallback() {
  
}


void SwigDirector_PxSimulationEventCallback::swig_connect_director(SWIG_Callback0_t callbackonConstraintBreak, SWIG_Callback1_t callbackonWake, SWIG_Callback2_t callbackonSleep, SWIG_Callback3_t callbackonContact, SWIG_Callback4_t callbackonTrigger, SWIG_Callback5_t callbackonAdvance) {
  swig_callbackonConstraintBreak = callbackonConstraintBreak;
  swig_callbackonWake = callbackonWake;
  swig_callbackonSleep = callbackonSleep;
  swig_callbackonContact = callbackonContact;
  swig_callbackonTrigger = callbackonTrigger;
  swig_callbackonAdvance = callbackonAdvance;
}

void SwigDirector_PxSimulationEventCallback::swig_init_callbacks() {
  swig_callbackonConstraintBreak = 0;
  swig_callbackonWake = 0;
  swig_callbackonSleep = 0;
  swig_callbackonContact = 0;
  swig_callbackonTrigger = 0;
  swig_callbackonAdvance = 0;
}

SwigDirector_PxSimulationFilterCallback::SwigDirector_PxSimulationFilterCallback() : physx::wrap::PxSimulationFilterCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_PxSimulationFilterCallback::pairLost(physx::PxU32 pairID, bool objectRemoved, physx::PxFilterObjectAttributes attributes0, physx::PxFilterData const &filterData0, physx::PxFilterObjectAttributes attributes1, physx::PxFilterData const &filterData1) {
  unsigned int jpairID  ;
  unsigned int jobjectRemoved  ;
  unsigned int jattributes0  ;
  physx::PxFilterData*  jfilterData0 = 0 ;
  unsigned int jattributes1  ;
  physx::PxFilterData*  jfilterData1 = 0 ;
  
  if (!swig_callbackpairLost) {
    physx::wrap::PxSimulationFilterCallback::pairLost(pairID,objectRemoved,attributes0,filterData0,attributes1,filterData1);
    return;
  } else {
    jpairID = pairID;
    jobjectRemoved = objectRemoved;
    jattributes0 = attributes0;
    jfilterData0 = (physx::PxFilterData *) &filterData0; 
    jattributes1 = attributes1;
    jfilterData1 = (physx::PxFilterData *) &filterData1; 
    swig_callbackpairLost(jpairID, jobjectRemoved, jattributes0, jfilterData0, jattributes1, jfilterData1);
  }
}

SwigDirector_PxSimulationFilterCallback::~SwigDirector_PxSimulationFilterCallback() {
  
}


void SwigDirector_PxSimulationFilterCallback::swig_connect_director(SWIG_Callback0_t callbackpairLost) {
  swig_callbackpairLost = callbackpairLost;
}

void SwigDirector_PxSimulationFilterCallback::swig_init_callbacks() {
  swig_callbackpairLost = 0;
}

SwigDirector_PxBroadPhaseCallback::SwigDirector_PxBroadPhaseCallback() : Swig::Director() {
  
}


SwigDirector_PxBroadPhaseCallback::~SwigDirector_PxBroadPhaseCallback() {
  
}


void SwigDirector_PxBroadPhaseCallback::onObjectOutOfBounds(physx::PxShape &shape, physx::PxActor &actor) {
  void * jshape = 0 ;
  void * jactor = 0 ;
  
  if (!swig_callbackonObjectOutOfBounds__SWIG_0) {
    Swig::DirectorPureVirtualException::raise("physx::PxBroadPhaseCallback::onObjectOutOfBounds");
    return;
  } else {
    jshape = (physx::PxShape *) &shape; 
    jactor = (physx::PxActor *) &actor; 
    swig_callbackonObjectOutOfBounds__SWIG_0(jshape, jactor);
  }
}

void SwigDirector_PxBroadPhaseCallback::onObjectOutOfBounds(physx::PxAggregate &aggregate) {
  void * jaggregate = 0 ;
  
  if (!swig_callbackonObjectOutOfBounds__SWIG_1) {
    Swig::DirectorPureVirtualException::raise("physx::PxBroadPhaseCallback::onObjectOutOfBounds");
    return;
  } else {
    jaggregate = (physx::PxAggregate *) &aggregate; 
    swig_callbackonObjectOutOfBounds__SWIG_1(jaggregate);
  }
}

void SwigDirector_PxBroadPhaseCallback::swig_connect_director(SWIG_Callback0_t callbackonObjectOutOfBounds__SWIG_0, SWIG_Callback1_t callbackonObjectOutOfBounds__SWIG_1) {
  swig_callbackonObjectOutOfBounds__SWIG_0 = callbackonObjectOutOfBounds__SWIG_0;
  swig_callbackonObjectOutOfBounds__SWIG_1 = callbackonObjectOutOfBounds__SWIG_1;
}

void SwigDirector_PxBroadPhaseCallback::swig_init_callbacks() {
  swig_callbackonObjectOutOfBounds__SWIG_0 = 0;
  swig_callbackonObjectOutOfBounds__SWIG_1 = 0;
}

SwigDirector_PxErrorCallback::SwigDirector_PxErrorCallback() : physx::PxErrorCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_PxErrorCallback::~SwigDirector_PxErrorCallback() {
  
}


void SwigDirector_PxErrorCallback::reportError(physx::PxErrorCode::Enum code, char const *message, char const *file, int line) {
  int jcode  ;
  char * jmessage = 0 ;
  char * jfile = 0 ;
  int jline  ;
  
  if (!swig_callbackreportError) {
    Swig::DirectorPureVirtualException::raise("physx::PxErrorCallback::reportError");
    return;
  } else {
    jcode = (int)code;
    jmessage = SWIG_csharp_string_callback((const char *)message); 
    jfile = SWIG_csharp_string_callback((const char *)file); 
    jline = line;
    swig_callbackreportError(jcode, jmessage, jfile, jline);
  }
}

void SwigDirector_PxErrorCallback::swig_connect_director(SWIG_Callback0_t callbackreportError) {
  swig_callbackreportError = callbackreportError;
}

void SwigDirector_PxErrorCallback::swig_init_callbacks() {
  swig_callbackreportError = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PX_PHYSICS_VERSION_MAJOR_get___() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PX_PHYSICS_VERSION_MINOR_get___() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PX_PHYSICS_VERSION_BUGFIX_get___() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PX_PHYSICS_VERSION_get___() {
  int jresult ;
  int result;
  
  result = (int)(((4 << 24) +(1 << 16) +(2 << 8) +0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec3__SWIG_0___(float jarg1) {
  physx::PxVec3*  jresult ;
  float arg1 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  {
    try {
      result = (physx::PxVec3 *)new_physx_PxVec3__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec3__SWIG_1___(float jarg1, float jarg2, float jarg3) {
  physx::PxVec3*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (physx::PxVec3 *)new_physx_PxVec3__SWIG_1(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_isFinite___( physx::PxVec3*  jarg1) {
  unsigned int jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxVec3 const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_isNormalized___( physx::PxVec3*  jarg1) {
  unsigned int jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxVec3 const *)arg1)->isNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_magnitudeSquared___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec3 const *)arg1)->magnitudeSquared();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_magnitude___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec3 const *)arg1)->magnitude();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_dot___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (float)((physx::PxVec3 const *)arg1)->dot((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_cross___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->cross((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_getNormalized___( physx::PxVec3*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->getNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_normalize___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)(arg1)->normalize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_normalizeSafe___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)(arg1)->normalizeSafe();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_normalizeFast___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)(arg1)->normalizeFast();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_multiply___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->multiply((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_minimum___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->minimum((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_minElement___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec3 const *)arg1)->minElement();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_maximum___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->maximum((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_maxElement___( physx::PxVec3*  jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec3 const *)arg1)->maxElement();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec3_abs___( physx::PxVec3*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxVec3 const *)arg1)->abs();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxVec3___( physx::PxVec3*  jarg1) {
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxVec4*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec4__SWIG_0___(float jarg1) {
  physx::PxVec4*  jresult ;
  float arg1 ;
  physx::PxVec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  {
    try {
      result = (physx::PxVec4 *)new_physx_PxVec4__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec4*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec4__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  physx::PxVec4*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  physx::PxVec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      result = (physx::PxVec4 *)new_physx_PxVec4__SWIG_1(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec4*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec4__SWIG_2___( physx::PxVec3*  jarg1, float jarg2) {
  physx::PxVec4*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  float arg2 ;
  physx::PxVec4 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (physx::PxVec4 *)new_physx_PxVec4__SWIG_2((physx::PxVec3 const &)*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec4*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxVec4__SWIG_3___( physx::PxVec4*  jarg1) {
  physx::PxVec4*  jresult ;
  physx::PxVec4 *arg1 = 0 ;
  physx::PxVec4 *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxVec4 *)new physx::PxVec4((physx::PxVec4 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_isZero___( physx::PxVec4*  jarg1) {
  unsigned int jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxVec4 const *)arg1)->isZero();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_isFinite___( physx::PxVec4*  jarg1) {
  unsigned int jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxVec4 const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_isNormalized___( physx::PxVec4*  jarg1) {
  unsigned int jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxVec4 const *)arg1)->isNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_magnitudeSquared___( physx::PxVec4*  jarg1) {
  float jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec4 const *)arg1)->magnitudeSquared();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_magnitude___( physx::PxVec4*  jarg1) {
  float jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxVec4 const *)arg1)->magnitude();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_dot___( physx::PxVec4*  jarg1,  physx::PxVec4*  jarg2) {
  float jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (float)((physx::PxVec4 const *)arg1)->dot((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_getNormalized___( physx::PxVec4*  jarg1) {
  physx::PxVec4* jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxVec4 const *)arg1)->getNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_normalize___( physx::PxVec4*  jarg1) {
  float jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)(arg1)->normalize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_multiply___( physx::PxVec4*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxVec4* jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec4 const *)arg1)->multiply((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_minimum___( physx::PxVec4*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxVec4* jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec4 const *)arg1)->minimum((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_maximum___( physx::PxVec4*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxVec4* jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxVec4 const *)arg1)->maximum((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_getXYZ___( physx::PxVec4*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxVec4 const *)arg1)->getXYZ();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxVec4_setZero___( physx::PxVec4*  jarg1) {
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->setZero();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxVec4___( physx::PxVec4*  jarg1) {
  physx::PxVec4 *arg1 = (physx::PxVec4 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxQuat*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQuat__SWIG_0___(float jarg1) {
  physx::PxQuat*  jresult ;
  float arg1 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (float)jarg1; 
  {
    try {
      result = (physx::PxQuat *)new_physx_PxQuat__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxQuat*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQuat__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  physx::PxQuat*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      result = (physx::PxQuat *)new_physx_PxQuat__SWIG_1(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxQuat*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQuat__SWIG_2___(float jarg1,  physx::PxVec3*  jarg2) {
  physx::PxQuat*  jresult ;
  float arg1 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxQuat *)new_physx_PxQuat__SWIG_2(arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxQuat*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQuat__SWIG_3___( physx::PxMat33*  jarg1) {
  physx::PxQuat*  jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxQuat *)new_physx_PxQuat__SWIG_3((physx::PxMat33 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_isIdentity___( physx::PxQuat*  jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxQuat const *)arg1)->isIdentity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_isFinite___( physx::PxQuat*  jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxQuat const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_isUnit___( physx::PxQuat*  jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxQuat const *)arg1)->isUnit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_isSane___( physx::PxQuat*  jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxQuat const *)arg1)->isSane();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getAngle__SWIG_0___( physx::PxQuat*  jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxQuat const *)arg1)->getAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getAngle__SWIG_1___( physx::PxQuat*  jarg1,  physx::PxQuat*  jarg2) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat *arg2 = 0 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (float)((physx::PxQuat const *)arg1)->getAngle((physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_magnitudeSquared___( physx::PxQuat*  jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxQuat const *)arg1)->magnitudeSquared();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_dot___( physx::PxQuat*  jarg1,  physx::PxQuat*  jarg2) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat *arg2 = 0 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (float)((physx::PxQuat const *)arg1)->dot((physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxQuat* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getNormalized___( physx::PxQuat*  jarg1) {
  physx::PxQuat* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxQuat > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxQuat out_temp;
  out_temp = *(physx::PxQuat*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_magnitude___( physx::PxQuat*  jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxQuat const *)arg1)->magnitude();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_normalize___( physx::PxQuat*  jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)(arg1)->normalize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxQuat* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getConjugate___( physx::PxQuat*  jarg1) {
  physx::PxQuat* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxQuat > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getConjugate();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxQuat out_temp;
  out_temp = *(physx::PxQuat*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getImaginaryPart___( physx::PxQuat*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getImaginaryPart();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getBasisVector0___( physx::PxQuat*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getBasisVector0();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getBasisVector1___( physx::PxQuat*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getBasisVector1();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_getBasisVector2___( physx::PxQuat*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->getBasisVector2();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_rotate___( physx::PxQuat*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->rotate((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQuat_rotateInv___( physx::PxQuat*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxQuat const *)arg1)->rotateInv((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxQuat___( physx::PxQuat*  jarg1) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxPlane*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxPlane__SWIG_0___(float jarg1, float jarg2, float jarg3, float jarg4) {
  physx::PxPlane*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  {
    try {
      result = (physx::PxPlane *)new_physx_PxPlane__SWIG_0(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxPlane*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxPlane__SWIG_1___( physx::PxVec3*  jarg1, float jarg2) {
  physx::PxPlane*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  float arg2 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = (physx::PxPlane *)new_physx_PxPlane__SWIG_1((physx::PxVec3 const &)*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxPlane*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxPlane__SWIG_2___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxPlane*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxPlane *)new_physx_PxPlane__SWIG_2((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxPlane*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxPlane__SWIG_3___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxPlane*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (physx::PxPlane *)new_physx_PxPlane__SWIG_3((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlane_distance___( physx::PxPlane*  jarg1,  physx::PxVec3*  jarg2) {
  float jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (float)((physx::PxPlane const *)arg1)->distance((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlane_contains___( physx::PxPlane*  jarg1,  physx::PxVec3*  jarg2) {
  unsigned int jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (bool)((physx::PxPlane const *)arg1)->contains((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlane_project___( physx::PxPlane*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxPlane const *)arg1)->project((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlane_pointInPlane___( physx::PxPlane*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxPlane const *)arg1)->pointInPlane();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlane_normalize___( physx::PxPlane*  jarg1) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->normalize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxPlane___( physx::PxPlane*  jarg1) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_0___( physx::PxVec3*  jarg1) {
  physx::PxTransform*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_0((physx::PxVec3 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_1___(int jarg1) {
  physx::PxTransform*  jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_1(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_2___( physx::PxQuat*  jarg1) {
  physx::PxTransform*  jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_2((physx::PxQuat const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_3___(float jarg1, float jarg2, float jarg3,  physx::PxQuat  jarg4) {
  physx::PxTransform*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  SwigValueWrapper< physx::PxQuat > arg4 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(physx::PxQuat*)&jarg4; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_3(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_4___(float jarg1, float jarg2, float jarg3) {
  physx::PxTransform*  jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_3(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_5___( physx::PxVec3*  jarg1,  physx::PxQuat*  jarg2) {
  physx::PxTransform*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_5((physx::PxVec3 const &)*arg1,(physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTransform__SWIG_6___( physx::PxMat44*  jarg1) {
  physx::PxTransform*  jresult ;
  physx::PxMat44 *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxTransform *)new_physx_PxTransform__SWIG_6((physx::PxMat44 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_getInverse___( physx::PxTransform*  jarg1) {
  physx::PxTransform* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->getInverse();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_transform__SWIG_0___( physx::PxTransform*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->transform((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_transformInv__SWIG_0___( physx::PxTransform*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->transformInv((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_rotate___( physx::PxTransform*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->rotate((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_rotateInv___( physx::PxTransform*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->rotateInv((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_transform__SWIG_1___( physx::PxTransform*  jarg1,  physx::PxTransform*  jarg2) {
  physx::PxTransform* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->transform((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_isValid___( physx::PxTransform*  jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxTransform const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_isSane___( physx::PxTransform*  jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxTransform const *)arg1)->isSane();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_isFinite___( physx::PxTransform*  jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxTransform const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_transformInv__SWIG_1___( physx::PxTransform*  jarg1,  physx::PxTransform*  jarg2) {
  physx::PxTransform* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->transformInv((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxPlane* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_transform__SWIG_2___( physx::PxTransform*  jarg1,  physx::PxPlane*  jarg2) {
  physx::PxPlane* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxPlane *arg2 = 0 ;
  SwigValueWrapper< physx::PxPlane > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->transform((physx::PxPlane const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxPlane out_temp;
  out_temp = *(physx::PxPlane*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxPlane* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_inverseTransform___( physx::PxTransform*  jarg1,  physx::PxPlane*  jarg2) {
  physx::PxPlane* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxPlane *arg2 = 0 ;
  SwigValueWrapper< physx::PxPlane > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->inverseTransform((physx::PxPlane const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxPlane out_temp;
  out_temp = *(physx::PxPlane*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransform_getNormalized___( physx::PxTransform*  jarg1) {
  physx::PxTransform* jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxTransform const *)arg1)->getNormalized();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTransform___( physx::PxTransform*  jarg1) {
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat33__SWIG_0___(int jarg1) {
  physx::PxMat33*  jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  {
    try {
      result = (physx::PxMat33 *)new_physx_PxMat33__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat33__SWIG_1___(int jarg1) {
  physx::PxMat33*  jresult ;
  physx::PxZERO arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxZERO)jarg1; 
  {
    try {
      result = (physx::PxMat33 *)new_physx_PxMat33__SWIG_1(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat33__SWIG_2___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxMat33*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (physx::PxMat33 *)new_physx_PxMat33__SWIG_2((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat33__SWIG_3___(float jarg1) {
  physx::PxMat33*  jresult ;
  float arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (float)jarg1; 
  {
    try {
      result = (physx::PxMat33 *)new_physx_PxMat33__SWIG_3(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat33__SWIG_4___( physx::PxQuat*  jarg1) {
  physx::PxMat33*  jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxMat33 *)new_physx_PxMat33__SWIG_4((physx::PxQuat const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_createDiagonal___( physx::PxVec3*  jarg1) {
  physx::PxMat33* jresult ;
  physx::PxVec3 *arg1 = 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = physx::PxMat33::createDiagonal((physx::PxVec3 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_getTranspose___( physx::PxMat33*  jarg1) {
  physx::PxMat33* jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxMat33 const *)arg1)->getTranspose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_getInverse___( physx::PxMat33*  jarg1) {
  physx::PxMat33* jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxMat33 const *)arg1)->getInverse();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_getDeterminant___( physx::PxMat33*  jarg1) {
  float jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  float result;
  
  arg1 = jarg1; 
  {
    try {
      result = (float)((physx::PxMat33 const *)arg1)->getDeterminant();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_transform___( physx::PxMat33*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat33 const *)arg1)->transform((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat33_transformTranspose___( physx::PxMat33*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat33 const *)arg1)->transformTranspose((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMat33___( physx::PxMat33*  jarg1) {
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_0___(int jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_1___(int jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxZERO arg1 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = (physx::PxZERO)jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_1(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_2___( physx::PxVec4*  jarg1,  physx::PxVec4*  jarg2,  physx::PxVec4*  jarg3,  physx::PxVec4*  jarg4) {
  physx::PxMat44*  jresult ;
  physx::PxVec4 *arg1 = 0 ;
  physx::PxVec4 *arg2 = 0 ;
  physx::PxVec4 *arg3 = 0 ;
  physx::PxVec4 *arg4 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_2((physx::PxVec4 const &)*arg1,(physx::PxVec4 const &)*arg2,(physx::PxVec4 const &)*arg3,(physx::PxVec4 const &)*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_3___(float jarg1) {
  physx::PxMat44*  jresult ;
  float arg1 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = (float)jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_3(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_4___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4) {
  physx::PxMat44*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_4((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,(physx::PxVec3 const &)*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_5___( physx::PxQuat*  jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_5((physx::PxQuat const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_6___( physx::PxVec4*  jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxVec4 *arg1 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_6((physx::PxVec4 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_7___( physx::PxMat33*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxMat44*  jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_7((physx::PxMat33 const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMat44__SWIG_8___( physx::PxTransform*  jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxMat44 *)new_physx_PxMat44__SWIG_8((physx::PxTransform const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxMat44* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_getTranspose___( physx::PxMat44*  jarg1) {
  physx::PxMat44* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  SwigValueWrapper< physx::PxMat44 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->getTranspose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat44 out_temp;
  out_temp = *(physx::PxMat44*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_transform__SWIG_0___( physx::PxMat44*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxVec4* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->transform((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_transform__SWIG_1___( physx::PxMat44*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->transform((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec4* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_rotate__SWIG_0___( physx::PxMat44*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxVec4* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec4 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->rotate((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec4 out_temp;
  out_temp = *(physx::PxVec4*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_rotate__SWIG_1___( physx::PxMat44*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->rotate((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_getBasis___( physx::PxMat44*  jarg1, int jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  int arg2 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->getBasis(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_getPosition___( physx::PxMat44*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->getPosition();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_setPosition___( physx::PxMat44*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setPosition((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_scale___( physx::PxMat44*  jarg1,  physx::PxVec4*  jarg2) {
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  physx::PxVec4 *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->scale((physx::PxVec4 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxMat44* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_inverseRT___( physx::PxMat44*  jarg1) {
  physx::PxMat44* jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  SwigValueWrapper< physx::PxMat44 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxMat44 const *)arg1)->inverseRT();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat44 out_temp;
  out_temp = *(physx::PxMat44*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMat44_isFinite___( physx::PxMat44*  jarg1) {
  unsigned int jresult ;
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxMat44 const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMat44___( physx::PxMat44*  jarg1) {
  physx::PxMat44 *arg1 = (physx::PxMat44 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxBounds3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBounds3___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBounds3*  jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxBounds3 *)new_physx_PxBounds3((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_empty___() {
  physx::PxBounds3* jresult ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  {
    try {
      result = physx::PxBounds3::empty();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_boundsOfPoints___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::boundsOfPoints((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_centerExtents___( physx::PxVec3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::centerExtents((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_basisExtent___( physx::PxVec3*  jarg1,  physx::PxMat33*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxBounds3* jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxMat33 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = physx::PxBounds3::basisExtent((physx::PxVec3 const &)*arg1,(physx::PxMat33 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_poseExtent___( physx::PxTransform*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::poseExtent((physx::PxTransform const &)*arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_transformSafe__SWIG_0___( physx::PxMat33*  jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::transformSafe((physx::PxMat33 const &)*arg1,(physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_transformFast__SWIG_0___( physx::PxMat33*  jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::transformFast((physx::PxMat33 const &)*arg1,(physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_transformSafe__SWIG_1___( physx::PxTransform*  jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::transformSafe((physx::PxTransform const &)*arg1,(physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_transformFast__SWIG_1___( physx::PxTransform*  jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxBounds3::transformFast((physx::PxTransform const &)*arg1,(physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_setMaximal___( physx::PxBounds3*  jarg1) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->setMaximal();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_include__SWIG_0___( physx::PxBounds3*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->include((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_include__SWIG_1___( physx::PxBounds3*  jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->include((physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_isEmpty___( physx::PxBounds3*  jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->isEmpty();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_intersects___( physx::PxBounds3*  jarg1,  physx::PxBounds3*  jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->intersects((physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_intersects1D___( physx::PxBounds3*  jarg1,  physx::PxBounds3*  jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  uint32_t arg3 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->intersects1D((physx::PxBounds3 const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_contains___( physx::PxBounds3*  jarg1,  physx::PxVec3*  jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->contains((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_isInside___( physx::PxBounds3*  jarg1,  physx::PxBounds3*  jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  bool result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->isInside((physx::PxBounds3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_getCenter__SWIG_0___( physx::PxBounds3*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxBounds3 const *)arg1)->getCenter();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_getCenter__SWIG_1___( physx::PxBounds3*  jarg1, unsigned int jarg2) {
  float jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  uint32_t arg2 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (float)((physx::PxBounds3 const *)arg1)->getCenter(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_getExtents__SWIG_0___( physx::PxBounds3*  jarg1, unsigned int jarg2) {
  float jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  uint32_t arg2 ;
  float result;
  
  arg1 = jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      result = (float)((physx::PxBounds3 const *)arg1)->getExtents(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_getDimensions___( physx::PxBounds3*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxBounds3 const *)arg1)->getDimensions();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_getExtents__SWIG_1___( physx::PxBounds3*  jarg1) {
  physx::PxVec3* jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  {
    try {
      result = ((physx::PxBounds3 const *)arg1)->getExtents();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_scaleSafe___( physx::PxBounds3*  jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  float arg2 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->scaleSafe(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_scaleFast___( physx::PxBounds3*  jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  float arg2 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->scaleFast(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_fattenSafe___( physx::PxBounds3*  jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  float arg2 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->fattenSafe(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_fattenFast___( physx::PxBounds3*  jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  float arg2 ;
  
  arg1 = jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      (arg1)->fattenFast(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_isFinite___( physx::PxBounds3*  jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->isFinite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBounds3_isValid___( physx::PxBounds3*  jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = jarg1; 
  {
    try {
      result = (bool)((physx::PxBounds3 const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBounds3___( physx::PxBounds3*  jarg1) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxMassProperties*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMassProperties__SWIG_0___(float jarg1,  physx::PxMat33*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxMassProperties*  jresult ;
  physx::PxReal arg1 ;
  physx::PxMat33 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxMassProperties *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (physx::PxMassProperties *)new_physx_PxMassProperties__SWIG_0(arg1,(physx::PxMat33 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMassProperties*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMassProperties__SWIG_1___(void * jarg1) {
  physx::PxMassProperties*  jresult ;
  physx::PxGeometry *arg1 = 0 ;
  physx::PxMassProperties *result = 0 ;
  
  arg1 = (physx::PxGeometry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return NULL;
  } 
  {
    try {
      result = (physx::PxMassProperties *)new_physx_PxMassProperties__SWIG_1((physx::PxGeometry const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxMassProperties* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties___multiply___( physx::PxMassProperties*  jarg1, float jarg2) {
  physx::PxMassProperties* jresult ;
  physx::PxMassProperties *arg1 = (physx::PxMassProperties *) 0 ;
  physx::PxReal arg2 ;
  SwigValueWrapper< physx::PxMassProperties > result;
  
  arg1 = jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = ((physx::PxMassProperties const *)arg1)->operator *(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMassProperties out_temp;
  out_temp = *(physx::PxMassProperties*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_translate___( physx::PxMassProperties*  jarg1,  physx::PxVec3*  jarg2) {
  physx::PxMassProperties *arg1 = (physx::PxMassProperties *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->translate((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_getMassSpaceInertia___( physx::PxMat33*  jarg1,  physx::PxQuat*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxMassProperties::getMassSpaceInertia((physx::PxMat33 const &)*arg1,*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_translateInertia___( physx::PxMat33*  jarg1, float jarg2,  physx::PxVec3*  jarg3) {
  physx::PxMat33* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxVec3 *arg3 = 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = physx::PxMassProperties::translateInertia((physx::PxMat33 const &)*arg1,arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_rotateInertia___( physx::PxMat33*  jarg1,  physx::PxQuat*  jarg2) {
  physx::PxMat33* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx::PxMassProperties::rotateInertia((physx::PxMat33 const &)*arg1,(physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_scaleInertia___( physx::PxMat33*  jarg1,  physx::PxQuat*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxMat33* jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = physx::PxMassProperties::scaleInertia((physx::PxMat33 const &)*arg1,(physx::PxQuat const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxMassProperties* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMassProperties_sum___( physx::PxMassProperties*  jarg1,  physx::PxTransform*  jarg2, unsigned int jarg3) {
  physx::PxMassProperties* jresult ;
  physx::PxMassProperties *arg1 ;
  physx::PxTransform *arg2 ;
  physx::PxU32 arg3 ;
  SwigValueWrapper< physx::PxMassProperties > result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = physx::PxMassProperties::sum((physx::PxMassProperties const (*))arg1,(physx::PxTransform const (*))arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMassProperties out_temp;
  out_temp = *(physx::PxMassProperties*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMassProperties___( physx::PxMassProperties*  jarg1) {
  physx::PxMassProperties *arg1 = (physx::PxMassProperties *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTolerancesScale_length_set___(void * jarg1, float jarg2) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTolerancesScale_length_get___(void * jarg1) {
  float jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTolerancesScale_speed_set___(void * jarg1, float jarg2) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTolerancesScale_speed_get___(void * jarg1) {
  float jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTolerancesScale___() {
  void * jresult ;
  physx::PxTolerancesScale *result = 0 ;
  
  {
    try {
      result = (physx::PxTolerancesScale *)new physx::PxTolerancesScale();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTolerancesScale_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  {
    try {
      result = (bool)((physx::PxTolerancesScale const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTolerancesScale___(void * jarg1) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbActors_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbActors = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbActors_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbActors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbStaticShapes_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbStaticShapes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbStaticShapes_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbStaticShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbDynamicShapes_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbDynamicShapes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbDynamicShapes_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbDynamicShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbAggregates_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbAggregates = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbAggregates_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbAggregates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbConstraints_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbConstraints_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbRegions_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbRegions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbRegions_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbRegions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbBroadPhaseOverlaps_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbBroadPhaseOverlaps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_maxNbBroadPhaseOverlaps_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbBroadPhaseOverlaps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_setToDefault___(void * jarg1) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneLimits_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  bool result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  {
    try {
      result = (bool)((physx::PxSceneLimits const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSceneLimits___(void * jarg1) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInfo_constraint_get___(void * jarg1) {
  void * jresult ;
  physx::PxConstraintInfo *arg1 = (physx::PxConstraintInfo *) 0 ;
  physx::PxConstraint *result = 0 ;
  
  arg1 = (physx::PxConstraintInfo *)jarg1; 
  result = (physx::PxConstraint *)(physx::PxConstraint *) ((arg1)->constraint);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInfo_type_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConstraintInfo *arg1 = (physx::PxConstraintInfo *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxConstraintInfo *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInfo_joint_get___(void * jarg1) {
  void * jresult ;
  physx::PxConstraintInfo *arg1 = (physx::PxConstraintInfo *) 0 ;
  physx::PxJoint *result = 0 ;
  
  arg1 = (physx::PxConstraintInfo *)jarg1; 
  {
    try {
      result = (physx::PxJoint *)physx_PxConstraintInfo_joint_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConstraintInfo___(void * jarg1) {
  physx::PxConstraintInfo *arg1 = (physx::PxConstraintInfo *) 0 ;
  
  arg1 = (physx::PxConstraintInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPairHeader_actor0_get___(void * jarg1) {
  void * jresult ;
  physx::PxContactPairHeader *arg1 = (physx::PxContactPairHeader *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxContactPairHeader *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxContactPairHeader_actor0_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPairHeader_actor1_get___(void * jarg1) {
  void * jresult ;
  physx::PxContactPairHeader *arg1 = (physx::PxContactPairHeader *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxContactPairHeader *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxContactPairHeader_actor1_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPairHeader_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxContactPairHeader *arg1 = (physx::PxContactPairHeader *) 0 ;
  physx::PxContactPairHeaderFlag::Enum result;
  
  arg1 = (physx::PxContactPairHeader *)jarg1; 
  {
    try {
      result = (physx::PxContactPairHeaderFlag::Enum)physx_PxContactPairHeader_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxContactPairHeader___(void * jarg1) {
  physx::PxContactPairHeader *arg1 = (physx::PxContactPairHeader *) 0 ;
  
  arg1 = (physx::PxContactPairHeader *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxContactPairPoint___( physx::PxContactPairPoint*  jarg1) {
  physx::PxContactPairPoint *arg1 = (physx::PxContactPairPoint *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_shape0_get___(void * jarg1) {
  void * jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  {
    try {
      result = (physx::PxShape *)physx_PxContactPair_shape0_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_shape1_get___(void * jarg1) {
  void * jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  {
    try {
      result = (physx::PxShape *)physx_PxContactPair_shape1_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_contactCount_get___(void * jarg1) {
  unsigned char jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxU8 result;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  result = (physx::PxU8)(physx::PxU8) ((arg1)->contactCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxContactPairFlag::Enum result;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  {
    try {
      result = (physx::PxContactPairFlag::Enum)physx_PxContactPair_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_events_get___(void * jarg1) {
  int jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxPairFlag::Enum result;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  {
    try {
      result = (physx::PxPairFlag::Enum)physx_PxContactPair_events_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPair_extractContacts___(void * jarg1, physx::PxContactPairPoint* jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  physx::PxContactPairPoint *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxU32)((physx::PxContactPair const *)arg1)->extractContacts(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxContactPair___(void * jarg1) {
  physx::PxContactPair *arg1 = (physx::PxContactPair *) 0 ;
  
  arg1 = (physx::PxContactPair *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPair_triggerShape_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  result = (physx::PxShape *)(physx::PxShape *) ((arg1)->triggerShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPair_triggerActor_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  result = (physx::PxRigidActor *)(physx::PxRigidActor *) ((arg1)->triggerActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPair_otherShape_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  result = (physx::PxShape *)(physx::PxShape *) ((arg1)->otherShape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPair_otherActor_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  result = (physx::PxRigidActor *)(physx::PxRigidActor *) ((arg1)->otherActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPair_status_get___(void * jarg1) {
  int jresult ;
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  physx::PxPairFlag::Enum result;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  result = (physx::PxPairFlag::Enum)(physx::PxPairFlag::Enum) ((arg1)->status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTriggerPair___(void * jarg1) {
  physx::PxTriggerPair *arg1 = (physx::PxTriggerPair *) 0 ;
  
  arg1 = (physx::PxTriggerPair *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSimulationFilterShader___( physx::PxSimulationFilterShader*  jarg1) {
  physx::PxSimulationFilterShader *arg1 = (physx::PxSimulationFilterShader *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxGroupsMask___( physx::PxGroupsMask*  jarg1) {
  physx::PxGroupsMask *arg1 = (physx::PxGroupsMask *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxSimulationFilterShader*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_function_get___() {
  physx::PxSimulationFilterShader*  jresult ;
  physx::PxSimulationFilterShader *result = 0 ;
  
  {
    try {
      result = (physx::PxSimulationFilterShader *)physx_PxDefaultSimulationFilterShader_function_get();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getGroupCollisionFlag___(unsigned short jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  physx::PxU16 arg1 ;
  physx::PxU16 arg2 ;
  bool result;
  
  arg1 = (physx::PxU16)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  {
    try {
      result = (bool)physx_PxDefaultSimulationFilterShader_getGroupCollisionFlag(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setGroupCollisionFlag___(unsigned short jarg1, unsigned short jarg2, unsigned int jarg3) {
  physx::PxU16 arg1 ;
  physx::PxU16 arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxU16)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setGroupCollisionFlag(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getGroup___(void * jarg1) {
  unsigned short jresult ;
  physx::PxActor *arg1 = 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxU16)physx_PxDefaultSimulationFilterShader_getGroup((physx::PxActor const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setGroup___(void * jarg1, unsigned short jarg2) {
  physx::PxActor *arg1 = 0 ;
  physx::PxU16 arg2 ;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg2 = (physx::PxU16)jarg2; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setGroup(*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getFilterOps___(int * jarg1, int * jarg2, int * jarg3) {
  physx::PxFilterOp::Enum *arg1 = 0 ;
  physx::PxFilterOp::Enum *arg2 = 0 ;
  physx::PxFilterOp::Enum *arg3 = 0 ;
  
  arg1 = (physx::PxFilterOp::Enum *)jarg1; 
  arg2 = (physx::PxFilterOp::Enum *)jarg2; 
  arg3 = (physx::PxFilterOp::Enum *)jarg3; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_getFilterOps(*arg1,*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setFilterOps___(int jarg1, int jarg2, int jarg3) {
  physx::PxFilterOp::Enum arg1 ;
  physx::PxFilterOp::Enum arg2 ;
  physx::PxFilterOp::Enum arg3 ;
  
  arg1 = (physx::PxFilterOp::Enum)jarg1; 
  arg2 = (physx::PxFilterOp::Enum)jarg2; 
  arg3 = (physx::PxFilterOp::Enum)jarg3; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setFilterOps(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getFilterBool___() {
  unsigned int jresult ;
  bool result;
  
  {
    try {
      result = (bool)physx_PxDefaultSimulationFilterShader_getFilterBool();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setFilterBool___(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setFilterBool(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getFilterConstants___( physx::PxGroupsMask*  jarg1,  physx::PxGroupsMask*  jarg2) {
  physx::PxGroupsMask *arg1 = 0 ;
  physx::PxGroupsMask *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_getFilterConstants(*arg1,*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setFilterConstants___( physx::PxGroupsMask*  jarg1,  physx::PxGroupsMask*  jarg2) {
  physx::PxGroupsMask *arg1 = 0 ;
  physx::PxGroupsMask *arg2 = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setFilterConstants((physx::PxGroupsMask const &)*arg1,(physx::PxGroupsMask const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxGroupsMask* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getGroupsMask___(void * jarg1) {
  physx::PxGroupsMask* jresult ;
  physx::PxActor *arg1 = 0 ;
  physx::PxGroupsMask result;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor const & type is null", 0);
    return NULL;
  } 
  {
    try {
      result = physx_PxDefaultSimulationFilterShader_getGroupsMask((physx::PxActor const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxGroupsMask out_temp;
  out_temp = *(physx::PxGroupsMask*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setGroupsMask___(void * jarg1,  physx::PxGroupsMask*  jarg2) {
  physx::PxActor *arg1 = 0 ;
  physx::PxGroupsMask *arg2 = 0 ;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg2 = jarg2; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setGroupsMask(*arg1,(physx::PxGroupsMask const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_setCallbacksEnabled___(void * jarg1, unsigned int jarg2) {
  physx::PxActor *arg1 = 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg2 = jarg2 ? true : false; 
  {
    try {
      physx_PxDefaultSimulationFilterShader_setCallbacksEnabled(*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultSimulationFilterShader_getCallbacksEnabled___(void * jarg1) {
  unsigned int jresult ;
  physx::PxActor *arg1 = 0 ;
  bool result;
  
  arg1 = (physx::PxActor *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxDefaultSimulationFilterShader_getCallbacksEnabled(*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInfoList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxConstraintInfo > *arg1 = (physx::PxList< physx::PxConstraintInfo > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxConstraintInfo > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInfoList_get___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxList< physx::PxConstraintInfo > *arg1 = (physx::PxList< physx::PxConstraintInfo > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxConstraintInfo *result = 0 ;
  
  arg1 = (physx::PxList< physx::PxConstraintInfo > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxConstraintInfo *) &((physx::PxList< physx::PxConstraintInfo > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConstraintInfoList___(void * jarg1) {
  physx::PxList< physx::PxConstraintInfo > *arg1 = (physx::PxList< physx::PxConstraintInfo > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxConstraintInfo > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxActor * > *arg1 = (physx::PxList< physx::PxActor * > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxActor * > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorList_get___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxList< physx::PxActor * > *arg1 = (physx::PxList< physx::PxActor * > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxActor **result = 0 ;
  
  arg1 = (physx::PxList< physx::PxActor * > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxActor **) &((physx::PxList< physx::PxActor * > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxActorList___(void * jarg1) {
  physx::PxList< physx::PxActor * > *arg1 = (physx::PxList< physx::PxActor * > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxActor * > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPairList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxContactPair > *arg1 = (physx::PxList< physx::PxContactPair > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxContactPair > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxContactPairList_get___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxList< physx::PxContactPair > *arg1 = (physx::PxList< physx::PxContactPair > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxContactPair *result = 0 ;
  
  arg1 = (physx::PxList< physx::PxContactPair > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxContactPair *) &((physx::PxList< physx::PxContactPair > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxContactPairList___(void * jarg1) {
  physx::PxList< physx::PxContactPair > *arg1 = (physx::PxList< physx::PxContactPair > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxContactPair > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPairList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxTriggerPair > *arg1 = (physx::PxList< physx::PxTriggerPair > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxTriggerPair > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriggerPairList_get___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxList< physx::PxTriggerPair > *arg1 = (physx::PxList< physx::PxTriggerPair > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxTriggerPair *result = 0 ;
  
  arg1 = (physx::PxList< physx::PxTriggerPair > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxTriggerPair *) &((physx::PxList< physx::PxTriggerPair > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTriggerPairList___(void * jarg1) {
  physx::PxList< physx::PxTriggerPair > *arg1 = (physx::PxList< physx::PxTriggerPair > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxTriggerPair > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBodyList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxRigidBody const * > *arg1 = (physx::PxList< physx::PxRigidBody const * > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxRigidBody const * > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBodyList_get___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxList< physx::PxRigidBody const * > *arg1 = (physx::PxList< physx::PxRigidBody const * > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxRigidBody **result = 0 ;
  
  arg1 = (physx::PxList< physx::PxRigidBody const * > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxRigidBody **) &((physx::PxList< physx::PxRigidBody const * > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRigidBodyList___(void * jarg1) {
  physx::PxList< physx::PxRigidBody const * > *arg1 = (physx::PxList< physx::PxRigidBody const * > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxRigidBody const * > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransformList_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxList< physx::PxTransform > *arg1 = (physx::PxList< physx::PxTransform > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxList< physx::PxTransform > *)jarg1; 
  result = (physx::PxU32)(physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxTransform*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTransformList_get___(void * jarg1, unsigned int jarg2) {
  physx::PxTransform*  jresult ;
  physx::PxList< physx::PxTransform > *arg1 = (physx::PxList< physx::PxTransform > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxList< physx::PxTransform > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxTransform *) &((physx::PxList< physx::PxTransform > const *)arg1)->get(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTransformList___(void * jarg1) {
  physx::PxList< physx::PxTransform > *arg1 = (physx::PxList< physx::PxTransform > *) 0 ;
  
  arg1 = (physx::PxList< physx::PxTransform > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxFilterData*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxFilterData__SWIG_0___(int jarg1) {
  physx::PxFilterData*  jresult ;
  physx::PxEMPTY arg1 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = (physx::PxEMPTY)jarg1; 
  {
    try {
      result = (physx::PxFilterData *)new physx::PxFilterData(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxFilterData*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxFilterData__SWIG_1___( physx::PxFilterData*  jarg1) {
  physx::PxFilterData*  jresult ;
  physx::PxFilterData *arg1 = 0 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxFilterData *)new physx::PxFilterData((physx::PxFilterData const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxFilterData*  SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxFilterData__SWIG_2___(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxFilterData*  jresult ;
  physx::PxU32 arg1 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = (physx::PxU32)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  {
    try {
      result = (physx::PxFilterData *)new physx::PxFilterData(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFilterData_setToDefault___( physx::PxFilterData*  jarg1) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxFilterData___( physx::PxFilterData*  jarg1) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSimulationEventCallback___() {
  void * jresult ;
  physx::wrap::PxSimulationEventCallback *result = 0 ;
  
  {
    try {
      result = (physx::wrap::PxSimulationEventCallback *)new SwigDirector_PxSimulationEventCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onConstraintBreak___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxConstraintInfoList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxConstraintInfoList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConstraintInfoList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onConstraintBreak((physx::PxConstraintInfoList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onConstraintBreakSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxConstraintInfoList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxConstraintInfoList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConstraintInfoList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onConstraintBreak((physx::PxConstraintInfoList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onWake___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxActorList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxActorList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActorList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onWake((physx::PxActorList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onWakeSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxActorList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxActorList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActorList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onWake((physx::PxActorList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onSleep___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxActorList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxActorList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActorList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onSleep((physx::PxActorList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onSleepSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxActorList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxActorList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActorList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onSleep((physx::PxActorList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onContact___(void * jarg1, void * jarg2, void * jarg3) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxContactPairHeader *arg2 = 0 ;
  physx::PxContactPairList *arg3 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxContactPairHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxContactPairHeader const & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxContactPairList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxContactPairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onContact((physx::PxContactPairHeader const &)*arg2,(physx::PxContactPairList const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onContactSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2, void * jarg3) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxContactPairHeader *arg2 = 0 ;
  physx::PxContactPairList *arg3 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxContactPairHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxContactPairHeader const & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxContactPairList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxContactPairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onContact((physx::PxContactPairHeader const &)*arg2,(physx::PxContactPairList const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onTrigger___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxTriggerPairList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxTriggerPairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriggerPairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onTrigger((physx::PxTriggerPairList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onTriggerSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxTriggerPairList *arg2 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxTriggerPairList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriggerPairList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onTrigger((physx::PxTriggerPairList const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onAdvance___(void * jarg1, void * jarg2, void * jarg3) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxRigidBodyList *arg2 = 0 ;
  physx::PxTransformList *arg3 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxRigidBodyList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRigidBodyList const & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxTransformList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransformList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onAdvance((physx::PxRigidBodyList const &)*arg2,(physx::PxTransformList const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_onAdvanceSwigExplicitPxSimulationEventCallback___(void * jarg1, void * jarg2, void * jarg3) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  physx::PxRigidBodyList *arg2 = 0 ;
  physx::PxTransformList *arg3 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  arg2 = (physx::PxRigidBodyList *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRigidBodyList const & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxTransformList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransformList const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->physx::wrap::PxSimulationEventCallback::onAdvance((physx::PxRigidBodyList const &)*arg2,(physx::PxTransformList const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSimulationEventCallback___(void * jarg1) {
  physx::wrap::PxSimulationEventCallback *arg1 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  
  arg1 = (physx::wrap::PxSimulationEventCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationEventCallback_director_connect___(void *objarg, SwigDirector_PxSimulationEventCallback::SWIG_Callback0_t callback0, SwigDirector_PxSimulationEventCallback::SWIG_Callback1_t callback1, SwigDirector_PxSimulationEventCallback::SWIG_Callback2_t callback2, SwigDirector_PxSimulationEventCallback::SWIG_Callback3_t callback3, SwigDirector_PxSimulationEventCallback::SWIG_Callback4_t callback4, SwigDirector_PxSimulationEventCallback::SWIG_Callback5_t callback5) {
  physx::wrap::PxSimulationEventCallback *obj = (physx::wrap::PxSimulationEventCallback *)objarg;
  SwigDirector_PxSimulationEventCallback *director = static_cast<SwigDirector_PxSimulationEventCallback *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSimulationFilterCallback___() {
  void * jresult ;
  physx::wrap::PxSimulationFilterCallback *result = 0 ;
  
  {
    try {
      result = (physx::wrap::PxSimulationFilterCallback *)new SwigDirector_PxSimulationFilterCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationFilterCallback_pairLost___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4,  physx::PxFilterData*  jarg5, unsigned int jarg6,  physx::PxFilterData*  jarg7) {
  physx::wrap::PxSimulationFilterCallback *arg1 = (physx::wrap::PxSimulationFilterCallback *) 0 ;
  physx::PxU32 arg2 ;
  bool arg3 ;
  physx::PxFilterObjectAttributes arg4 ;
  physx::PxFilterData *arg5 = 0 ;
  physx::PxFilterObjectAttributes arg6 ;
  physx::PxFilterData *arg7 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationFilterCallback *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (physx::PxFilterObjectAttributes)jarg4; 
  arg5 = jarg5; 
  arg6 = (physx::PxFilterObjectAttributes)jarg6; 
  arg7 = jarg7; 
  {
    try {
      (arg1)->pairLost(arg2,arg3,arg4,(physx::PxFilterData const &)*arg5,arg6,(physx::PxFilterData const &)*arg7);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationFilterCallback_pairLostSwigExplicitPxSimulationFilterCallback___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4,  physx::PxFilterData*  jarg5, unsigned int jarg6,  physx::PxFilterData*  jarg7) {
  physx::wrap::PxSimulationFilterCallback *arg1 = (physx::wrap::PxSimulationFilterCallback *) 0 ;
  physx::PxU32 arg2 ;
  bool arg3 ;
  physx::PxFilterObjectAttributes arg4 ;
  physx::PxFilterData *arg5 = 0 ;
  physx::PxFilterObjectAttributes arg6 ;
  physx::PxFilterData *arg7 = 0 ;
  
  arg1 = (physx::wrap::PxSimulationFilterCallback *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (physx::PxFilterObjectAttributes)jarg4; 
  arg5 = jarg5; 
  arg6 = (physx::PxFilterObjectAttributes)jarg6; 
  arg7 = jarg7; 
  {
    try {
      (arg1)->physx::wrap::PxSimulationFilterCallback::pairLost(arg2,arg3,arg4,(physx::PxFilterData const &)*arg5,arg6,(physx::PxFilterData const &)*arg7);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSimulationFilterCallback___(void * jarg1) {
  physx::wrap::PxSimulationFilterCallback *arg1 = (physx::wrap::PxSimulationFilterCallback *) 0 ;
  
  arg1 = (physx::wrap::PxSimulationFilterCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationFilterCallback_director_connect___(void *objarg, SwigDirector_PxSimulationFilterCallback::SWIG_Callback0_t callback0) {
  physx::wrap::PxSimulationFilterCallback *obj = (physx::wrap::PxSimulationFilterCallback *)objarg;
  SwigDirector_PxSimulationFilterCallback *director = static_cast<SwigDirector_PxSimulationFilterCallback *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBroadPhaseCallback___(void * jarg1) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCallback_onObjectOutOfBounds__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  physx::PxShape *arg2 = 0 ;
  physx::PxActor *arg3 = 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  arg2 = (physx::PxShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxShape & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxActor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onObjectOutOfBounds(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCallback_onObjectOutOfBounds__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->onObjectOutOfBounds(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCallback_director_connect___(void *objarg, SwigDirector_PxBroadPhaseCallback::SWIG_Callback0_t callback0, SwigDirector_PxBroadPhaseCallback::SWIG_Callback1_t callback1) {
  physx::PxBroadPhaseCallback *obj = (physx::PxBroadPhaseCallback *)objarg;
  SwigDirector_PxBroadPhaseCallback *director = static_cast<SwigDirector_PxBroadPhaseCallback *>(obj);
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gravity_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->gravity = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gravity_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->gravity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_simulationEventCallback_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::wrap::PxSimulationEventCallback *arg2 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::wrap::PxSimulationEventCallback *)jarg2; 
  if (arg1) (arg1)->simulationEventCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_simulationEventCallback_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::wrap::PxSimulationEventCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::wrap::PxSimulationEventCallback *) ((arg1)->simulationEventCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShaderData_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->filterShaderData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShaderData_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (void *) ((arg1)->filterShaderData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShaderDataSize_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->filterShaderDataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShaderDataSize_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->filterShaderDataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShader_set___(void * jarg1,  physx::PxSimulationFilterShader*  jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterShader *arg2 = (physx::PxSimulationFilterShader *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->filterShader = *arg2;
}


SWIGEXPORT  physx::PxSimulationFilterShader*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterShader_get___(void * jarg1) {
  physx::PxSimulationFilterShader*  jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterShader *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSimulationFilterShader *)& ((arg1)->filterShader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterCallback_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::wrap::PxSimulationFilterCallback *arg2 = (physx::wrap::PxSimulationFilterCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::wrap::PxSimulationFilterCallback *)jarg2; 
  if (arg1) (arg1)->filterCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_filterCallback_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::wrap::PxSimulationFilterCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::wrap::PxSimulationFilterCallback *) ((arg1)->filterCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_kineKineFilteringMode_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPairFilteringMode::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPairFilteringMode::Enum)jarg2; 
  if (arg1) (arg1)->kineKineFilteringMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_kineKineFilteringMode_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPairFilteringMode::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPairFilteringMode::Enum) ((arg1)->kineKineFilteringMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_staticKineFilteringMode_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPairFilteringMode::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPairFilteringMode::Enum)jarg2; 
  if (arg1) (arg1)->staticKineFilteringMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_staticKineFilteringMode_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPairFilteringMode::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPairFilteringMode::Enum) ((arg1)->staticKineFilteringMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_broadPhaseType_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxBroadPhaseType::Enum)jarg2; 
  if (arg1) (arg1)->broadPhaseType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_broadPhaseType_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBroadPhaseType::Enum) ((arg1)->broadPhaseType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_broadPhaseCallback_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseCallback *arg2 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxBroadPhaseCallback *)jarg2; 
  if (arg1) (arg1)->broadPhaseCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_broadPhaseCallback_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBroadPhaseCallback *) ((arg1)->broadPhaseCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_limits_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneLimits *arg2 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSceneLimits *)jarg2; 
  if (arg1) (arg1)->limits = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_limits_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneLimits *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSceneLimits *)& ((arg1)->limits);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_frictionType_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxFrictionType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxFrictionType::Enum)jarg2; 
  if (arg1) (arg1)->frictionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_frictionType_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxFrictionType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxFrictionType::Enum) ((arg1)->frictionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverType_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSolverType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSolverType::Enum)jarg2; 
  if (arg1) (arg1)->solverType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverType_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSolverType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSolverType::Enum) ((arg1)->solverType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_bounceThresholdVelocity_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->bounceThresholdVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_bounceThresholdVelocity_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->bounceThresholdVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_frictionOffsetThreshold_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->frictionOffsetThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_frictionOffsetThreshold_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->frictionOffsetThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdMaxSeparation_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->ccdMaxSeparation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdMaxSeparation_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->ccdMaxSeparation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverOffsetSlop_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->solverOffsetSlop = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverOffsetSlop_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->solverOffsetSlop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_flags_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneFlag::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSceneFlag::Enum)jarg2; 
  {
    try {
      physx_PxSceneDesc_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneFlag::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  {
    try {
      result = (physx::PxSceneFlag::Enum)physx_PxSceneDesc_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_cpuDispatcher_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCpuDispatcher *arg2 = (physx::PxCpuDispatcher *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxCpuDispatcher *)jarg2; 
  if (arg1) (arg1)->cpuDispatcher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_cpuDispatcher_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxCpuDispatcher *) ((arg1)->cpuDispatcher);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_cudaContextManager_set___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCudaContextManager *arg2 = (physx::PxCudaContextManager *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxCudaContextManager *)jarg2; 
  if (arg1) (arg1)->cudaContextManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_cudaContextManager_get___(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCudaContextManager *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxCudaContextManager *) ((arg1)->cudaContextManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_staticStructure_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructureType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPruningStructureType::Enum)jarg2; 
  if (arg1) (arg1)->staticStructure = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_staticStructure_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructureType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPruningStructureType::Enum) ((arg1)->staticStructure);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_dynamicStructure_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructureType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPruningStructureType::Enum)jarg2; 
  if (arg1) (arg1)->dynamicStructure = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_dynamicStructure_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructureType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPruningStructureType::Enum) ((arg1)->dynamicStructure);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_dynamicTreeRebuildRateHint_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->dynamicTreeRebuildRateHint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_dynamicTreeRebuildRateHint_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->dynamicTreeRebuildRateHint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_sceneQueryUpdateMode_set___(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneQueryUpdateMode::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSceneQueryUpdateMode::Enum)jarg2; 
  if (arg1) (arg1)->sceneQueryUpdateMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_sceneQueryUpdateMode_get___(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneQueryUpdateMode::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSceneQueryUpdateMode::Enum) ((arg1)->sceneQueryUpdateMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverBatchSize_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->solverBatchSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverBatchSize_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->solverBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverArticulationBatchSize_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->solverArticulationBatchSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_solverArticulationBatchSize_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->solverArticulationBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_nbContactDataBlocks_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbContactDataBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_nbContactDataBlocks_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbContactDataBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_maxNbContactDataBlocks_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbContactDataBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_maxNbContactDataBlocks_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbContactDataBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_maxBiasCoefficient_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->maxBiasCoefficient = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_maxBiasCoefficient_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->maxBiasCoefficient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_contactReportStreamBufferSize_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->contactReportStreamBufferSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_contactReportStreamBufferSize_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->contactReportStreamBufferSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdMaxPasses_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->ccdMaxPasses = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdMaxPasses_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->ccdMaxPasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdThreshold_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->ccdThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_ccdThreshold_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->ccdThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_wakeCounterResetValue_set___(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->wakeCounterResetValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_wakeCounterResetValue_get___(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->wakeCounterResetValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_sanityBounds_set___(void * jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBounds3 *arg2 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->sanityBounds = *arg2;
}


SWIGEXPORT  physx::PxBounds3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_sanityBounds_get___(void * jarg1) {
  physx::PxBounds3*  jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBounds3 *)& ((arg1)->sanityBounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gpuMaxNumPartitions_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->gpuMaxNumPartitions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gpuMaxNumPartitions_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->gpuMaxNumPartitions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gpuComputeVersion_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->gpuComputeVersion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_gpuComputeVersion_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->gpuComputeVersion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSceneDesc___(void * jarg1) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxSceneDesc *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxSceneDesc *)new physx::PxSceneDesc((physx::PxTolerancesScale const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_setToDefault___(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxTolerancesScale *arg2 = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxTolerancesScale *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setToDefault((physx::PxTolerancesScale const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxSceneDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSceneDesc___(void * jarg1) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxInputStream_read___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxInputStream *arg1 = (physx::PxInputStream *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  
  arg1 = (physx::PxInputStream *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (uint32_t)(arg1)->read(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxInputStream___(void * jarg1) {
  physx::PxInputStream *arg1 = (physx::PxInputStream *) 0 ;
  
  arg1 = (physx::PxInputStream *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxInputData_getLength___(void * jarg1) {
  unsigned int jresult ;
  physx::PxInputData *arg1 = (physx::PxInputData *) 0 ;
  uint32_t result;
  
  arg1 = (physx::PxInputData *)jarg1; 
  {
    try {
      result = (uint32_t)((physx::PxInputData const *)arg1)->getLength();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxInputData_seek___(void * jarg1, unsigned int jarg2) {
  physx::PxInputData *arg1 = (physx::PxInputData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (physx::PxInputData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  {
    try {
      (arg1)->seek(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxInputData_tell___(void * jarg1) {
  unsigned int jresult ;
  physx::PxInputData *arg1 = (physx::PxInputData *) 0 ;
  uint32_t result;
  
  arg1 = (physx::PxInputData *)jarg1; 
  {
    try {
      result = (uint32_t)((physx::PxInputData const *)arg1)->tell();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxInputData___(void * jarg1) {
  physx::PxInputData *arg1 = (physx::PxInputData *) 0 ;
  
  arg1 = (physx::PxInputData *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxDefaultMemoryInputData___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxDefaultMemoryInputData *result = 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxDefaultMemoryInputData *)new_physx_PxDefaultMemoryInputData(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDefaultMemoryInputData___(void * jarg1) {
  physx::PxDefaultMemoryInputData *arg1 = (physx::PxDefaultMemoryInputData *) 0 ;
  
  arg1 = (physx::PxDefaultMemoryInputData *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryInputData_read___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxDefaultMemoryInputData *arg1 = (physx::PxDefaultMemoryInputData *) 0 ;
  void *arg2 = (void *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxDefaultMemoryInputData *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxU32)(arg1)->read(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryInputData_getLength___(void * jarg1) {
  unsigned int jresult ;
  physx::PxDefaultMemoryInputData *arg1 = (physx::PxDefaultMemoryInputData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxDefaultMemoryInputData *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxDefaultMemoryInputData const *)arg1)->getLength();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryInputData_seek___(void * jarg1, unsigned int jarg2) {
  physx::PxDefaultMemoryInputData *arg1 = (physx::PxDefaultMemoryInputData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxDefaultMemoryInputData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->seek(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryInputData_tell___(void * jarg1) {
  unsigned int jresult ;
  physx::PxDefaultMemoryInputData *arg1 = (physx::PxDefaultMemoryInputData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxDefaultMemoryInputData *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxDefaultMemoryInputData const *)arg1)->tell();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMeshScale__SWIG_0___() {
  void * jresult ;
  physx::PxMeshScale *result = 0 ;
  
  {
    try {
      result = (physx::PxMeshScale *)new physx::PxMeshScale();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMeshScale__SWIG_1___(float jarg1) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxMeshScale *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  {
    try {
      result = (physx::PxMeshScale *)new physx::PxMeshScale(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMeshScale__SWIG_2___( physx::PxVec3*  jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxMeshScale *result = 0 ;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxMeshScale *)new physx::PxMeshScale((physx::PxVec3 const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMeshScale__SWIG_3___( physx::PxVec3*  jarg1,  physx::PxQuat*  jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxMeshScale *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxMeshScale *)new physx::PxMeshScale((physx::PxVec3 const &)*arg1,(physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_isIdentity___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = (bool)((physx::PxMeshScale const *)arg1)->isIdentity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_getInverse___(void * jarg1) {
  void * jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxMeshScale result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = ((physx::PxMeshScale const *)arg1)->getInverse();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxMeshScale((const physx::PxMeshScale &)result); 
  return jresult;
}


SWIGEXPORT physx::PxMat33* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_toMat33___(void * jarg1) {
  physx::PxMat33* jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  SwigValueWrapper< physx::PxMat33 > result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = ((physx::PxMeshScale const *)arg1)->toMat33();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMat33 out_temp;
  out_temp = *(physx::PxMat33*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_hasNegativeDeterminant___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = (bool)((physx::PxMeshScale const *)arg1)->hasNegativeDeterminant();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_transform___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = ((physx::PxMeshScale const *)arg1)->transform((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_isValidForTriangleMesh___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = (bool)((physx::PxMeshScale const *)arg1)->isValidForTriangleMesh();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_isValidForConvexMesh___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      result = (bool)((physx::PxMeshScale const *)arg1)->isValidForConvexMesh();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_scale_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_scale_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_rotation_set___(void * jarg1,  physx::PxQuat*  jarg2) {
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxQuat *arg2 = (physx::PxQuat *) 0 ;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->rotation = *arg2;
}


SWIGEXPORT  physx::PxQuat*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMeshScale_rotation_get___(void * jarg1) {
  physx::PxQuat*  jresult ;
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  result = (physx::PxQuat *)& ((arg1)->rotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMeshScale___(void * jarg1) {
  physx::PxMeshScale *arg1 = (physx::PxMeshScale *) 0 ;
  
  arg1 = (physx::PxMeshScale *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxStridedData_stride_set___(void * jarg1, unsigned int jarg2) {
  physx::PxStridedData *arg1 = (physx::PxStridedData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxStridedData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxStridedData_stride_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxStridedData *arg1 = (physx::PxStridedData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxStridedData *)jarg1; 
  result = (physx::PxU32) ((arg1)->stride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxStridedData_data_set___(void * jarg1, void * jarg2) {
  physx::PxStridedData *arg1 = (physx::PxStridedData *) 0 ;
  physx::PxU8 *arg2 = (physx::PxU8 *) 0 ;
  
  arg1 = (physx::PxStridedData *)jarg1; 
  arg2 = (physx::PxU8 *)jarg2; 
  if (arg1) (arg1)->data = (physx::PxU8 const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxStridedData_data_get___(void * jarg1) {
  void * jresult ;
  physx::PxStridedData *arg1 = (physx::PxStridedData *) 0 ;
  physx::PxU8 *result = 0 ;
  
  arg1 = (physx::PxStridedData *)jarg1; 
  result = (physx::PxU8 *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxStridedData___() {
  void * jresult ;
  physx::PxStridedData *result = 0 ;
  
  {
    try {
      result = (physx::PxStridedData *)new physx::PxStridedData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxStridedData___(void * jarg1) {
  physx::PxStridedData *arg1 = (physx::PxStridedData *) 0 ;
  
  arg1 = (physx::PxStridedData *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_nbRows_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbRows = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_nbRows_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbRows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_nbColumns_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbColumns = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_nbColumns_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbColumns);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_format_set___(void * jarg1, int jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxHeightFieldFormat::Enum arg2 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxHeightFieldFormat::Enum)jarg2; 
  if (arg1) (arg1)->format = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_format_get___(void * jarg1) {
  int jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxHeightFieldFormat::Enum result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  result = (physx::PxHeightFieldFormat::Enum) ((arg1)->format);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_samples_set___(void * jarg1, void * jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxStridedData *arg2 = (physx::PxStridedData *) 0 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxStridedData *)jarg2; 
  if (arg1) (arg1)->samples = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_samples_get___(void * jarg1) {
  void * jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxStridedData *result = 0 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  result = (physx::PxStridedData *)& ((arg1)->samples);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_convexEdgeThreshold_set___(void * jarg1, float jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->convexEdgeThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_convexEdgeThreshold_get___(void * jarg1) {
  float jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->convexEdgeThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_flags_set___(void * jarg1, int jarg2) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxHeightFieldFlag::Enum arg2 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  arg2 = (physx::PxHeightFieldFlag::Enum)jarg2; 
  {
    try {
      physx_PxHeightFieldDesc_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  physx::PxHeightFieldFlag::Enum result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  {
    try {
      result = (physx::PxHeightFieldFlag::Enum)physx_PxHeightFieldDesc_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxHeightFieldDesc___() {
  void * jresult ;
  physx::PxHeightFieldDesc *result = 0 ;
  
  {
    try {
      result = (physx::PxHeightFieldDesc *)new physx::PxHeightFieldDesc();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_setToDefault___(void * jarg1) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxHeightFieldDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxHeightFieldDesc___(void * jarg1) {
  physx::PxHeightFieldDesc *arg1 = (physx::PxHeightFieldDesc *) 0 ;
  
  arg1 = (physx::PxHeightFieldDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldSample_tessFlag___( physx::PxHeightFieldSample*  jarg1) {
  unsigned char jresult ;
  physx::PxHeightFieldSample *arg1 = (physx::PxHeightFieldSample *) 0 ;
  physx::PxU8 result;
  
  arg1 = jarg1; 
  {
    try {
      result = (physx::PxU8)((physx::PxHeightFieldSample const *)arg1)->tessFlag();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldSample_setTessFlag___( physx::PxHeightFieldSample*  jarg1) {
  physx::PxHeightFieldSample *arg1 = (physx::PxHeightFieldSample *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->setTessFlag();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldSample_clearTessFlag___( physx::PxHeightFieldSample*  jarg1) {
  physx::PxHeightFieldSample *arg1 = (physx::PxHeightFieldSample *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      (arg1)->clearTessFlag();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxHeightFieldSample___( physx::PxHeightFieldSample*  jarg1) {
  physx::PxHeightFieldSample *arg1 = (physx::PxHeightFieldSample *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxHullPolygon___( physx::PxHullPolygon*  jarg1) {
  physx::PxHullPolygon *arg1 = (physx::PxHullPolygon *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometry_getType___(void * jarg1) {
  int jresult ;
  physx::PxGeometry *arg1 = (physx::PxGeometry *) 0 ;
  physx::PxGeometryType::Enum result;
  
  arg1 = (physx::PxGeometry *)jarg1; 
  {
    try {
      result = (physx::PxGeometryType::Enum)((physx::PxGeometry const *)arg1)->getType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxGeometry___(void * jarg1) {
  physx::PxGeometry *arg1 = (physx::PxGeometry *) 0 ;
  
  arg1 = (physx::PxGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBoxGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxBoxGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxBoxGeometry *)new physx::PxBoxGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBoxGeometry__SWIG_1___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxBoxGeometry *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxBoxGeometry *)new physx::PxBoxGeometry(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBoxGeometry__SWIG_2___( physx::PxVec3  jarg1) {
  void * jresult ;
  SwigValueWrapper< physx::PxVec3 > arg1 ;
  physx::PxBoxGeometry *result = 0 ;
  
  arg1 = *(physx::PxVec3*)&jarg1; 
  {
    try {
      result = (physx::PxBoxGeometry *)new physx::PxBoxGeometry(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoxGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBoxGeometry *arg1 = (physx::PxBoxGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxBoxGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxBoxGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoxGeometry_halfExtents_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxBoxGeometry *arg1 = (physx::PxBoxGeometry *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxBoxGeometry *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->halfExtents = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoxGeometry_halfExtents_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxBoxGeometry *arg1 = (physx::PxBoxGeometry *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxBoxGeometry *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->halfExtents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBoxGeometry___(void * jarg1) {
  physx::PxBoxGeometry *arg1 = (physx::PxBoxGeometry *) 0 ;
  
  arg1 = (physx::PxBoxGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSphereGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxSphereGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxSphereGeometry *)new physx::PxSphereGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSphereGeometry__SWIG_1___(float jarg1) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxSphereGeometry *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  {
    try {
      result = (physx::PxSphereGeometry *)new physx::PxSphereGeometry(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphereGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSphereGeometry *arg1 = (physx::PxSphereGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxSphereGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxSphereGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphereGeometry_radius_set___(void * jarg1, float jarg2) {
  physx::PxSphereGeometry *arg1 = (physx::PxSphereGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSphereGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphereGeometry_radius_get___(void * jarg1) {
  float jresult ;
  physx::PxSphereGeometry *arg1 = (physx::PxSphereGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSphereGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSphereGeometry___(void * jarg1) {
  physx::PxSphereGeometry *arg1 = (physx::PxSphereGeometry *) 0 ;
  
  arg1 = (physx::PxSphereGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxCapsuleGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxCapsuleGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxCapsuleGeometry *)new physx::PxCapsuleGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxCapsuleGeometry__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxCapsuleGeometry *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxCapsuleGeometry *)new physx::PxCapsuleGeometry(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxCapsuleGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_radius_set___(void * jarg1, float jarg2) {
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_radius_get___(void * jarg1) {
  float jresult ;
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_halfHeight_set___(void * jarg1, float jarg2) {
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->halfHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_halfHeight_get___(void * jarg1) {
  float jresult ;
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->halfHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxCapsuleGeometry___(void * jarg1) {
  physx::PxCapsuleGeometry *arg1 = (physx::PxCapsuleGeometry *) 0 ;
  
  arg1 = (physx::PxCapsuleGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxPlaneGeometry___() {
  void * jresult ;
  physx::PxPlaneGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxPlaneGeometry *)new physx::PxPlaneGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlaneGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPlaneGeometry *arg1 = (physx::PxPlaneGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxPlaneGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxPlaneGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxPlaneGeometry___(void * jarg1) {
  physx::PxPlaneGeometry *arg1 = (physx::PxPlaneGeometry *) 0 ;
  
  arg1 = (physx::PxPlaneGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConvexMeshGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxConvexMeshGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxConvexMeshGeometry *)new physx::PxConvexMeshGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConvexMeshGeometry__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxMeshScale *arg2 = 0 ;
  physx::PxConvexMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  arg2 = (physx::PxMeshScale *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMeshScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxConvexMeshGeometry *)new physx::PxConvexMeshGeometry(arg1,(physx::PxMeshScale const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConvexMeshGeometry__SWIG_2___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxConvexMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxConvexMeshGeometry *)new physx::PxConvexMeshGeometry(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxConvexMeshGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_scale_set___(void * jarg1, void * jarg2) {
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxMeshScale *arg2 = (physx::PxMeshScale *) 0 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  arg2 = (physx::PxMeshScale *)jarg2; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_scale_get___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxMeshScale *result = 0 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  result = (physx::PxMeshScale *)& ((arg1)->scale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_convexMesh_set___(void * jarg1, void * jarg2) {
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxConvexMesh *arg2 = (physx::PxConvexMesh *) 0 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  arg2 = (physx::PxConvexMesh *)jarg2; 
  if (arg1) (arg1)->convexMesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_convexMesh_get___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  result = (physx::PxConvexMesh *) ((arg1)->convexMesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_meshFlags_set___(void * jarg1, int jarg2) {
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxConvexMeshGeometryFlag::Enum arg2 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  arg2 = (physx::PxConvexMeshGeometryFlag::Enum)jarg2; 
  {
    try {
      physx_PxConvexMeshGeometry_meshFlags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_meshFlags_get___(void * jarg1) {
  int jresult ;
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  physx::PxConvexMeshGeometryFlag::Enum result;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  {
    try {
      result = (physx::PxConvexMeshGeometryFlag::Enum)physx_PxConvexMeshGeometry_meshFlags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConvexMeshGeometry___(void * jarg1) {
  physx::PxConvexMeshGeometry *arg1 = (physx::PxConvexMeshGeometry *) 0 ;
  
  arg1 = (physx::PxConvexMeshGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTriangleMeshGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxTriangleMeshGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxTriangleMeshGeometry *)new physx::PxTriangleMeshGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTriangleMeshGeometry__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxMeshScale *arg2 = 0 ;
  physx::PxTriangleMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  arg2 = (physx::PxMeshScale *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMeshScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxTriangleMeshGeometry *)new physx::PxTriangleMeshGeometry(arg1,(physx::PxMeshScale const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTriangleMeshGeometry__SWIG_2___(void * jarg1) {
  void * jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxTriangleMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxTriangleMeshGeometry *)new physx::PxTriangleMeshGeometry(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxTriangleMeshGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_scale_set___(void * jarg1, void * jarg2) {
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxMeshScale *arg2 = (physx::PxMeshScale *) 0 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  arg2 = (physx::PxMeshScale *)jarg2; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_scale_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxMeshScale *result = 0 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  result = (physx::PxMeshScale *)& ((arg1)->scale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_meshFlags_set___(void * jarg1, int jarg2) {
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxMeshGeometryFlag::Enum arg2 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  arg2 = (physx::PxMeshGeometryFlag::Enum)jarg2; 
  {
    try {
      physx_PxTriangleMeshGeometry_meshFlags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_meshFlags_get___(void * jarg1) {
  int jresult ;
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxMeshGeometryFlag::Enum result;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  {
    try {
      result = (physx::PxMeshGeometryFlag::Enum)physx_PxTriangleMeshGeometry_meshFlags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_triangleMesh_set___(void * jarg1, void * jarg2) {
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxTriangleMesh *arg2 = (physx::PxTriangleMesh *) 0 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  arg2 = (physx::PxTriangleMesh *)jarg2; 
  if (arg1) (arg1)->triangleMesh = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_triangleMesh_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  result = (physx::PxTriangleMesh *) ((arg1)->triangleMesh);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTriangleMeshGeometry___(void * jarg1) {
  physx::PxTriangleMeshGeometry *arg1 = (physx::PxTriangleMeshGeometry *) 0 ;
  
  arg1 = (physx::PxTriangleMeshGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxHeightFieldGeometry__SWIG_0___() {
  void * jresult ;
  physx::PxHeightFieldGeometry *result = 0 ;
  
  {
    try {
      result = (physx::PxHeightFieldGeometry *)new physx::PxHeightFieldGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxHeightFieldGeometry__SWIG_1___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxHeightFieldGeometry *result = 0 ;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      result = (physx::PxHeightFieldGeometry *)new_physx_PxHeightFieldGeometry__SWIG_1(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxHeightFieldGeometry__SWIG_2___(void * jarg1, float jarg2, float jarg3, float jarg4, int jarg5) {
  void * jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxMeshGeometryFlag::Enum arg5 ;
  physx::PxHeightFieldGeometry *result = 0 ;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxMeshGeometryFlag::Enum)jarg5; 
  {
    try {
      result = (physx::PxHeightFieldGeometry *)new_physx_PxHeightFieldGeometry__SWIG_2(arg1,arg2,arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  bool result;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  {
    try {
      result = (bool)((physx::PxHeightFieldGeometry const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightField_set___(void * jarg1, void * jarg2) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxHeightField *arg2 = (physx::PxHeightField *) 0 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  arg2 = (physx::PxHeightField *)jarg2; 
  if (arg1) (arg1)->heightField = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightField_get___(void * jarg1) {
  void * jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxHeightField *result = 0 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  result = (physx::PxHeightField *) ((arg1)->heightField);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightScale_set___(void * jarg1, float jarg2) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->heightScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightScale_get___(void * jarg1) {
  float jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->heightScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_rowScale_set___(void * jarg1, float jarg2) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->rowScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_rowScale_get___(void * jarg1) {
  float jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->rowScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_columnScale_set___(void * jarg1, float jarg2) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->columnScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_columnScale_get___(void * jarg1) {
  float jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  result = (physx::PxReal) ((arg1)->columnScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightFieldFlags_set___(void * jarg1, int jarg2) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxMeshGeometryFlag::Enum arg2 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  arg2 = (physx::PxMeshGeometryFlag::Enum)jarg2; 
  {
    try {
      physx_PxHeightFieldGeometry_heightFieldFlags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_heightFieldFlags_get___(void * jarg1) {
  int jresult ;
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  physx::PxMeshGeometryFlag::Enum result;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  {
    try {
      result = (physx::PxMeshGeometryFlag::Enum)physx_PxHeightFieldGeometry_heightFieldFlags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxHeightFieldGeometry___(void * jarg1) {
  physx::PxHeightFieldGeometry *arg1 = (physx::PxHeightFieldGeometry *) 0 ;
  
  arg1 = (physx::PxHeightFieldGeometry *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_getType___(void * jarg1) {
  int jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxGeometryType::Enum result;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxGeometryType::Enum)((physx::PxGeometryHolder const *)arg1)->getType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_any___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxGeometry *) &(arg1)->any();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_sphere___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxSphereGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxSphereGeometry *) &(arg1)->sphere();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_plane___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxPlaneGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxPlaneGeometry *) &(arg1)->plane();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_capsule___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxCapsuleGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxCapsuleGeometry *) &(arg1)->capsule();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_box___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxBoxGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxBoxGeometry *) &(arg1)->box();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_convexMesh___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxConvexMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxConvexMeshGeometry *) &(arg1)->convexMesh();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_triangleMesh___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxTriangleMeshGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxTriangleMeshGeometry *) &(arg1)->triangleMesh();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_heightField___(void * jarg1) {
  void * jresult ;
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxHeightFieldGeometry *result = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      result = (physx::PxHeightFieldGeometry *) &(arg1)->heightField();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxGeometryHolder_storeAny___(void * jarg1, void * jarg2) {
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->storeAny((physx::PxGeometry const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxGeometryHolder__SWIG_0___() {
  void * jresult ;
  physx::PxGeometryHolder *result = 0 ;
  
  {
    try {
      result = (physx::PxGeometryHolder *)new physx::PxGeometryHolder();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxGeometryHolder__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxGeometry *arg1 = 0 ;
  physx::PxGeometryHolder *result = 0 ;
  
  arg1 = (physx::PxGeometry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxGeometryHolder *)new physx::PxGeometryHolder((physx::PxGeometry const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxGeometryHolder___(void * jarg1) {
  physx::PxGeometryHolder *arg1 = (physx::PxGeometryHolder *) 0 ;
  
  arg1 = (physx::PxGeometryHolder *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintConnector_onConstraintRelease___(void * jarg1) {
  physx::PxConstraintConnector *arg1 = (physx::PxConstraintConnector *) 0 ;
  
  arg1 = (physx::PxConstraintConnector *)jarg1; 
  {
    try {
      (arg1)->onConstraintRelease();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintConnector_onComShift___(void * jarg1, unsigned int jarg2) {
  physx::PxConstraintConnector *arg1 = (physx::PxConstraintConnector *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxConstraintConnector *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->onComShift(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintConnector_onOriginShift___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxConstraintConnector *arg1 = (physx::PxConstraintConnector *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxConstraintConnector *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->onOriginShift((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintConnector_getSerializable___(void * jarg1) {
  void * jresult ;
  physx::PxConstraintConnector *arg1 = (physx::PxConstraintConnector *) 0 ;
  physx::PxBase *result = 0 ;
  
  arg1 = (physx::PxConstraintConnector *)jarg1; 
  {
    try {
      result = (physx::PxBase *)(arg1)->getSerializable();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConstraintConnector___(void * jarg1) {
  physx::PxConstraintConnector *arg1 = (physx::PxConstraintConnector *) 0 ;
  
  arg1 = (physx::PxConstraintConnector *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_linear0_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->linear0 = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_linear0_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->linear0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_geometricError_set___(void * jarg1, float jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->geometricError = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_geometricError_get___(void * jarg1) {
  float jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxReal) ((arg1)->geometricError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_angular0_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->angular0 = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_angular0_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->angular0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_velocityTarget_set___(void * jarg1, float jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->velocityTarget = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_velocityTarget_get___(void * jarg1) {
  float jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxReal) ((arg1)->velocityTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_linear1_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->linear1 = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_linear1_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->linear1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_minImpulse_set___(void * jarg1, float jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->minImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_minImpulse_get___(void * jarg1) {
  float jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxReal) ((arg1)->minImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_angular1_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->angular1 = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_angular1_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->angular1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_maxImpulse_set___(void * jarg1, float jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->maxImpulse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_maxImpulse_get___(void * jarg1) {
  float jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxReal) ((arg1)->maxImpulse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_forInternalUse_set___(void * jarg1, float jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->forInternalUse = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_forInternalUse_get___(void * jarg1) {
  float jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxReal) ((arg1)->forInternalUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_flags_set___(void * jarg1, unsigned short jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxU16 arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_flags_get___(void * jarg1) {
  unsigned short jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxU16) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_solveHint_set___(void * jarg1, unsigned short jarg2) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxU16 arg2 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  if (arg1) (arg1)->solveHint = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_Px1DConstraint_solveHint_get___(void * jarg1) {
  unsigned short jresult ;
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  result = (physx::PxU16) ((arg1)->solveHint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_Px1DConstraint___(void * jarg1) {
  physx::Px1DConstraint *arg1 = (physx::Px1DConstraint *) 0 ;
  
  arg1 = (physx::Px1DConstraint *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_linear0_set___(void * jarg1, float jarg2) {
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->linear0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_linear0_get___(void * jarg1) {
  float jresult ;
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->linear0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_angular0_set___(void * jarg1, float jarg2) {
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->angular0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_angular0_get___(void * jarg1) {
  float jresult ;
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->angular0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_linear1_set___(void * jarg1, float jarg2) {
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->linear1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_linear1_get___(void * jarg1) {
  float jresult ;
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->linear1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_angular1_set___(void * jarg1, float jarg2) {
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->angular1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintInvMassScale_angular1_get___(void * jarg1) {
  float jresult ;
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->angular1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConstraintInvMassScale__SWIG_0___() {
  void * jresult ;
  physx::PxConstraintInvMassScale *result = 0 ;
  
  {
    try {
      result = (physx::PxConstraintInvMassScale *)new physx::PxConstraintInvMassScale();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConstraintInvMassScale__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxConstraintInvMassScale *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      result = (physx::PxConstraintInvMassScale *)new physx::PxConstraintInvMassScale(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConstraintInvMassScale___(void * jarg1) {
  physx::PxConstraintInvMassScale *arg1 = (physx::PxConstraintInvMassScale *) 0 ;
  
  arg1 = (physx::PxConstraintInvMassScale *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintShaderTable_MAX_SOLVERPRPEP_DATASIZE_get___() {
  int jresult ;
  int result;
  
  result = (int)physx::PxConstraintShaderTable::eMAX_SOLVERPRPEP_DATASIZE;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintShaderTable_flag_set___(void * jarg1, int jarg2) {
  physx::PxConstraintShaderTable *arg1 = (physx::PxConstraintShaderTable *) 0 ;
  physx::PxConstraintFlag::Enum arg2 ;
  
  arg1 = (physx::PxConstraintShaderTable *)jarg1; 
  arg2 = (physx::PxConstraintFlag::Enum)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraintShaderTable_flag_get___(void * jarg1) {
  int jresult ;
  physx::PxConstraintShaderTable *arg1 = (physx::PxConstraintShaderTable *) 0 ;
  physx::PxConstraintFlag::Enum result;
  
  arg1 = (physx::PxConstraintShaderTable *)jarg1; 
  result = (physx::PxConstraintFlag::Enum) ((arg1)->flag);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConstraintShaderTable___(void * jarg1) {
  physx::PxConstraintShaderTable *arg1 = (physx::PxConstraintShaderTable *) 0 ;
  
  arg1 = (physx::PxConstraintShaderTable *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSpatialForce___( physx::PxSpatialForce*  jarg1) {
  physx::PxSpatialForce *arg1 = (physx::PxSpatialForce *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxArticulationRootLinkData___( physx::PxArticulationRootLinkData*  jarg1) {
  physx::PxArticulationRootLinkData *arg1 = (physx::PxArticulationRootLinkData *) 0 ;
  
  arg1 = jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_readJointVelocities___(void * jarg1, float* jarg2, int jarg3, int jarg4) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxReal *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      physx_PxArticulationCache_readJointVelocities(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_writeJointVelocities___(void * jarg1, float* jarg2, int jarg3, int jarg4) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxReal *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      physx_PxArticulationCache_writeJointVelocities(arg1,(float const (*))arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_readJointPositions___(void * jarg1, float* jarg2, int jarg3, int jarg4) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxReal *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      physx_PxArticulationCache_readJointPositions(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_writeJointPositions___(void * jarg1, float* jarg2, int jarg3, int jarg4) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxReal *arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = jarg2;
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      physx_PxArticulationCache_writeJointPositions(arg1,(float const (*))arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_rootLinkData_set___(void * jarg1,  physx::PxArticulationRootLinkData*  jarg2) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxArticulationRootLinkData *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      physx_PxArticulationCache_rootLinkData_set(arg1,*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT  physx::PxArticulationRootLinkData*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_rootLinkData_get___(void * jarg1) {
  physx::PxArticulationRootLinkData*  jresult ;
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxArticulationRootLinkData *result = 0 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  {
    try {
      result = (physx::PxArticulationRootLinkData *) &physx_PxArticulationCache_rootLinkData_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_version_set___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationCache_version_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  result = (physx::PxU32) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxArticulationCache___(void * jarg1) {
  physx::PxArticulationCache *arg1 = (physx::PxArticulationCache *) 0 ;
  
  arg1 = (physx::PxArticulationCache *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSpring_stiffness_set___(void * jarg1, float jarg2) {
  physx::PxSpring *arg1 = (physx::PxSpring *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSpring *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->stiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSpring_stiffness_get___(void * jarg1) {
  float jresult ;
  physx::PxSpring *arg1 = (physx::PxSpring *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSpring *)jarg1; 
  result = (physx::PxReal) ((arg1)->stiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSpring_damping_set___(void * jarg1, float jarg2) {
  physx::PxSpring *arg1 = (physx::PxSpring *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSpring *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSpring_damping_get___(void * jarg1) {
  float jresult ;
  physx::PxSpring *arg1 = (physx::PxSpring *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSpring *)jarg1; 
  result = (physx::PxReal) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSpring___(float jarg1, float jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxSpring *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxSpring *)new physx::PxSpring(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSpring___(void * jarg1) {
  physx::PxSpring *arg1 = (physx::PxSpring *) 0 ;
  
  arg1 = (physx::PxSpring *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_forceLimit_set___(void * jarg1, float jarg2) {
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->forceLimit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_forceLimit_get___(void * jarg1) {
  float jresult ;
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  result = (physx::PxReal) ((arg1)->forceLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_flags_set___(void * jarg1, int jarg2) {
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  physx::PxD6JointDriveFlag::Enum arg2 ;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  arg2 = (physx::PxD6JointDriveFlag::Enum)jarg2; 
  {
    try {
      physx_PxD6JointDrive_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  physx::PxD6JointDriveFlag::Enum result;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  {
    try {
      result = (physx::PxD6JointDriveFlag::Enum)physx_PxD6JointDrive_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxD6JointDrive__SWIG_0___() {
  void * jresult ;
  physx::PxD6JointDrive *result = 0 ;
  
  {
    try {
      result = (physx::PxD6JointDrive *)new physx::PxD6JointDrive();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxD6JointDrive__SWIG_1___(float jarg1, float jarg2, float jarg3, unsigned int jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  bool arg4 ;
  physx::PxD6JointDrive *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (physx::PxD6JointDrive *)new physx::PxD6JointDrive(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxD6JointDrive__SWIG_2___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxD6JointDrive *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxD6JointDrive *)new physx::PxD6JointDrive(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  bool result;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxD6JointDrive___(void * jarg1) {
  physx::PxD6JointDrive *arg1 = (physx::PxD6JointDrive *) 0 ;
  
  arg1 = (physx::PxD6JointDrive *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_restitution_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->restitution = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_restitution_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  result = (physx::PxReal) ((arg1)->restitution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_bounceThreshold_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->bounceThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_bounceThreshold_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  result = (physx::PxReal) ((arg1)->bounceThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_stiffness_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->stiffness = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_stiffness_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  result = (physx::PxReal) ((arg1)->stiffness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_damping_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->damping = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_damping_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  result = (physx::PxReal) ((arg1)->damping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_contactDistance_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->contactDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_contactDistance_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  result = (physx::PxReal) ((arg1)->contactDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitParameters__SWIG_0___() {
  void * jresult ;
  physx::PxJointLimitParameters *result = 0 ;
  
  {
    try {
      result = (physx::PxJointLimitParameters *)new physx::PxJointLimitParameters();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitParameters__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxJointLimitParameters *arg1 = 0 ;
  physx::PxJointLimitParameters *result = 0 ;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLimitParameters const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLimitParameters *)new physx::PxJointLimitParameters((physx::PxJointLimitParameters const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointLimitParameters const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitParameters_isSoft___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLimitParameters *arg1 = (physx::PxJointLimitParameters *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLimitParameters *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isSoft();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimit_value_set___(void * jarg1, float jarg2) {
  physx::PxJointLinearLimit *arg1 = (physx::PxJointLinearLimit *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLinearLimit *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimit_value_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLinearLimit *arg1 = (physx::PxJointLinearLimit *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLinearLimit *)jarg1; 
  result = (physx::PxReal) ((arg1)->value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimit__SWIG_0___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxJointLinearLimit *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxJointLinearLimit *)new physx::PxJointLinearLimit((physx::PxTolerancesScale const &)*arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimit__SWIG_1___(void * jarg1, float jarg2) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxJointLinearLimit *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxJointLinearLimit *)new physx::PxJointLinearLimit((physx::PxTolerancesScale const &)*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimit__SWIG_2___(float jarg1, void * jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxSpring *arg2 = 0 ;
  physx::PxJointLinearLimit *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxSpring *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSpring const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLinearLimit *)new physx::PxJointLinearLimit(arg1,(physx::PxSpring const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimit_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLinearLimit *arg1 = (physx::PxJointLinearLimit *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLinearLimit *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointLinearLimit const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxJointLinearLimit___(void * jarg1) {
  physx::PxJointLinearLimit *arg1 = (physx::PxJointLinearLimit *) 0 ;
  
  arg1 = (physx::PxJointLinearLimit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_upper_set___(void * jarg1, float jarg2) {
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->upper = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_upper_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->upper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_lower_set___(void * jarg1, float jarg2) {
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->lower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_lower_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->lower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimitPair__SWIG_0___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxJointLinearLimitPair *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      result = (physx::PxJointLinearLimitPair *)new physx::PxJointLinearLimitPair((physx::PxTolerancesScale const &)*arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimitPair__SWIG_1___(void * jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxJointLinearLimitPair *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxJointLinearLimitPair *)new physx::PxJointLinearLimitPair((physx::PxTolerancesScale const &)*arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimitPair__SWIG_2___(void * jarg1, float jarg2) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxJointLinearLimitPair *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxJointLinearLimitPair *)new physx::PxJointLinearLimitPair((physx::PxTolerancesScale const &)*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimitPair__SWIG_3___(void * jarg1) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxJointLinearLimitPair *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLinearLimitPair *)new physx::PxJointLinearLimitPair((physx::PxTolerancesScale const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLinearLimitPair__SWIG_4___(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxSpring *arg3 = 0 ;
  physx::PxJointLinearLimitPair *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxSpring *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSpring const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLinearLimitPair *)new physx::PxJointLinearLimitPair(arg1,arg2,(physx::PxSpring const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointLinearLimitPair const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxJointLinearLimitPair___(void * jarg1) {
  physx::PxJointLinearLimitPair *arg1 = (physx::PxJointLinearLimitPair *) 0 ;
  
  arg1 = (physx::PxJointLinearLimitPair *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_upper_set___(void * jarg1, float jarg2) {
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->upper = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_upper_get___(void * jarg1) {
  float jresult ;
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->upper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_lower_set___(void * jarg1, float jarg2) {
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->lower = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_lower_get___(void * jarg1) {
  float jresult ;
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->lower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointAngularLimitPair__SWIG_0___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxJointAngularLimitPair *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxJointAngularLimitPair *)new physx::PxJointAngularLimitPair(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointAngularLimitPair__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxJointAngularLimitPair *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxJointAngularLimitPair *)new physx::PxJointAngularLimitPair(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointAngularLimitPair__SWIG_2___(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxSpring *arg3 = 0 ;
  physx::PxJointAngularLimitPair *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxSpring *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSpring const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointAngularLimitPair *)new physx::PxJointAngularLimitPair(arg1,arg2,(physx::PxSpring const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointAngularLimitPair const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxJointAngularLimitPair___(void * jarg1) {
  physx::PxJointAngularLimitPair *arg1 = (physx::PxJointAngularLimitPair *) 0 ;
  
  arg1 = (physx::PxJointAngularLimitPair *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_yAngle_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->yAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_yAngle_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  result = (physx::PxReal) ((arg1)->yAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_zAngle_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->zAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_zAngle_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  result = (physx::PxReal) ((arg1)->zAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitCone__SWIG_0___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxJointLimitCone *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxJointLimitCone *)new physx::PxJointLimitCone(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitCone__SWIG_1___(float jarg1, float jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxJointLimitCone *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (physx::PxJointLimitCone *)new physx::PxJointLimitCone(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitCone__SWIG_2___(float jarg1, float jarg2, void * jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxSpring *arg3 = 0 ;
  physx::PxJointLimitCone *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxSpring *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSpring const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLimitCone *)new physx::PxJointLimitCone(arg1,arg2,(physx::PxSpring const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointLimitCone const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxJointLimitCone___(void * jarg1) {
  physx::PxJointLimitCone *arg1 = (physx::PxJointLimitCone *) 0 ;
  
  arg1 = (physx::PxJointLimitCone *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_yAngleMin_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->yAngleMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_yAngleMin_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  result = (physx::PxReal) ((arg1)->yAngleMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_yAngleMax_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->yAngleMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_yAngleMax_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  result = (physx::PxReal) ((arg1)->yAngleMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_zAngleMin_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->zAngleMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_zAngleMin_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  result = (physx::PxReal) ((arg1)->zAngleMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_zAngleMax_set___(void * jarg1, float jarg2) {
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->zAngleMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_zAngleMax_get___(void * jarg1) {
  float jresult ;
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  result = (physx::PxReal) ((arg1)->zAngleMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitPyramid__SWIG_0___(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxReal arg5 ;
  physx::PxJointLimitPyramid *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  {
    try {
      result = (physx::PxJointLimitPyramid *)new physx::PxJointLimitPyramid(arg1,arg2,arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitPyramid__SWIG_1___(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxJointLimitPyramid *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      result = (physx::PxJointLimitPyramid *)new physx::PxJointLimitPyramid(arg1,arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxJointLimitPyramid__SWIG_2___(float jarg1, float jarg2, float jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxSpring *arg5 = 0 ;
  physx::PxJointLimitPyramid *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxSpring *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSpring const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxJointLimitPyramid *)new physx::PxJointLimitPyramid(arg1,arg2,arg3,arg4,(physx::PxSpring const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  bool result;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  {
    try {
      result = (bool)((physx::PxJointLimitPyramid const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxJointLimitPyramid___(void * jarg1) {
  physx::PxJointLimitPyramid *arg1 = (physx::PxJointLimitPyramid *) 0 ;
  
  arg1 = (physx::PxJointLimitPyramid *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxArticulationDriveCache___(void * jarg1) {
  physx::PxArticulationDriveCache *arg1 = (physx::PxArticulationDriveCache *) 0 ;
  
  arg1 = (physx::PxArticulationDriveCache *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxDominanceGroupPair___(unsigned char jarg1, unsigned char jarg2) {
  void * jresult ;
  physx::PxU8 arg1 ;
  physx::PxU8 arg2 ;
  physx::PxDominanceGroupPair *result = 0 ;
  
  arg1 = (physx::PxU8)jarg1; 
  arg2 = (physx::PxU8)jarg2; 
  {
    try {
      result = (physx::PxDominanceGroupPair *)new physx::PxDominanceGroupPair(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDominanceGroupPair_dominance0_set___(void * jarg1, unsigned char jarg2) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxU8 arg2 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  arg2 = (physx::PxU8)jarg2; 
  if (arg1) (arg1)->dominance0 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDominanceGroupPair_dominance0_get___(void * jarg1) {
  unsigned char jresult ;
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxU8 result;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  result = (physx::PxU8) ((arg1)->dominance0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDominanceGroupPair_dominance1_set___(void * jarg1, unsigned char jarg2) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxU8 arg2 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  arg2 = (physx::PxU8)jarg2; 
  if (arg1) (arg1)->dominance1 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDominanceGroupPair_dominance1_get___(void * jarg1) {
  unsigned char jresult ;
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxU8 result;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  result = (physx::PxU8) ((arg1)->dominance1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDominanceGroupPair___(void * jarg1) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveConstraints_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveConstraints_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveDynamicBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveDynamicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveDynamicBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveDynamicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveKinematicBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveKinematicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbActiveKinematicBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveKinematicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbStaticBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbStaticBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbStaticBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbStaticBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDynamicBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDynamicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDynamicBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDynamicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbKinematicBodies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbKinematicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbKinematicBodies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbKinematicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbAggregates_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbAggregates = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbAggregates_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbAggregates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbArticulations_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbArticulations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbArticulations_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbArticulations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbAxisSolverConstraints_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbAxisSolverConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbAxisSolverConstraints_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbAxisSolverConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_compressedContactSize_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->compressedContactSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_compressedContactSize_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->compressedContactSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_requiredContactConstraintMemory_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->requiredContactConstraintMemory = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_requiredContactConstraintMemory_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->requiredContactConstraintMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_peakConstraintMemory_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->peakConstraintMemory = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_peakConstraintMemory_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->peakConstraintMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_getNbBroadPhaseAdds___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getNbBroadPhaseAdds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_getNbBroadPhaseRemoves___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getNbBroadPhaseRemoves();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_getRbPairStats___(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxSimulationStatistics::RbPairStatsType arg2 ;
  physx::PxGeometryType::Enum arg3 ;
  physx::PxGeometryType::Enum arg4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxSimulationStatistics::RbPairStatsType)jarg2; 
  arg3 = (physx::PxGeometryType::Enum)jarg3; 
  arg4 = (physx::PxGeometryType::Enum)jarg4; 
  {
    try {
      result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getRbPairStats(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsTotal_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDiscreteContactPairsTotal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsTotal_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDiscreteContactPairsTotal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsWithCacheHits_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDiscreteContactPairsWithCacheHits = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsWithCacheHits_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDiscreteContactPairsWithCacheHits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsWithContacts_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDiscreteContactPairsWithContacts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbDiscreteContactPairsWithContacts_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDiscreteContactPairsWithContacts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbNewPairs_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbNewPairs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbNewPairs_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbNewPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbLostPairs_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbLostPairs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbLostPairs_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbLostPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbNewTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbNewTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbNewTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbNewTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbLostTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbLostTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbLostTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbLostTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbPartitions_set___(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbPartitions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimulationStatistics_nbPartitions_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbPartitions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSimulationStatistics___() {
  void * jresult ;
  physx::PxSimulationStatistics *result = 0 ;
  
  {
    try {
      result = (physx::PxSimulationStatistics *)new physx::PxSimulationStatistics();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSimulationStatistics___(void * jarg1) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegion_bounds_set___(void * jarg1,  physx::PxBounds3*  jarg2) {
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  physx::PxBounds3 *arg2 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT  physx::PxBounds3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegion_bounds_get___(void * jarg1) {
  physx::PxBounds3*  jresult ;
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  result = (physx::PxBounds3 *)& ((arg1)->bounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBroadPhaseRegion___(void * jarg1) {
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_region_set___(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = (physx::PxBroadPhaseRegion *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2; 
  if (arg1) (arg1)->region = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_region_get___(void * jarg1) {
  void * jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxBroadPhaseRegion *result = 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxBroadPhaseRegion *)& ((arg1)->region);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_nbStaticObjects_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbStaticObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_nbStaticObjects_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbStaticObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_nbDynamicObjects_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDynamicObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_nbDynamicObjects_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDynamicObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_active_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_active_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (bool) ((arg1)->active);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_overlap_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overlap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseRegionInfo_overlap_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (bool) ((arg1)->overlap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBroadPhaseRegionInfo___(void * jarg1) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_maxNbRegions_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbRegions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_maxNbRegions_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbRegions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_maxNbObjects_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_maxNbObjects_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_needsPredefinedBounds_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->needsPredefinedBounds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBroadPhaseCaps_needsPredefinedBounds_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (bool) ((arg1)->needsPredefinedBounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBroadPhaseCaps___(void * jarg1) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxErrorCallback___() {
  void * jresult ;
  physx::PxErrorCallback *result = 0 ;
  
  {
    try {
      result = (physx::PxErrorCallback *)new SwigDirector_PxErrorCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxErrorCallback___(void * jarg1) {
  physx::PxErrorCallback *arg1 = (physx::PxErrorCallback *) 0 ;
  
  arg1 = (physx::PxErrorCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxErrorCallback_reportError___(void * jarg1, int jarg2, char * jarg3, char * jarg4, int jarg5) {
  physx::PxErrorCallback *arg1 = (physx::PxErrorCallback *) 0 ;
  physx::PxErrorCode::Enum arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  
  arg1 = (physx::PxErrorCallback *)jarg1; 
  arg2 = (physx::PxErrorCode::Enum)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->reportError(arg2,(char const *)arg3,(char const *)arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxErrorCallback_director_connect___(void *objarg, SwigDirector_PxErrorCallback::SWIG_Callback0_t callback0) {
  physx::PxErrorCallback *obj = (physx::PxErrorCallback *)objarg;
  SwigDirector_PxErrorCallback *director = static_cast<SwigDirector_PxErrorCallback *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxDefaultErrorCallback___() {
  void * jresult ;
  physx::PxDefaultErrorCallback *result = 0 ;
  
  {
    try {
      result = (physx::PxDefaultErrorCallback *)new physx::PxDefaultErrorCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDefaultErrorCallback___(void * jarg1) {
  physx::PxDefaultErrorCallback *arg1 = (physx::PxDefaultErrorCallback *) 0 ;
  
  arg1 = (physx::PxDefaultErrorCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultErrorCallback_reportError___(void * jarg1, int jarg2, char * jarg3, char * jarg4, int jarg5) {
  physx::PxDefaultErrorCallback *arg1 = (physx::PxDefaultErrorCallback *) 0 ;
  physx::PxErrorCode::Enum arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  
  arg1 = (physx::PxDefaultErrorCallback *)jarg1; 
  arg2 = (physx::PxErrorCode::Enum)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      (arg1)->reportError(arg2,(char const *)arg3,(char const *)arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxAllocatorCallback___(void * jarg1) {
  physx::PxAllocatorCallback *arg1 = (physx::PxAllocatorCallback *) 0 ;
  
  arg1 = (physx::PxAllocatorCallback *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxDefaultAllocator___() {
  void * jresult ;
  physx::PxDefaultAllocator *result = 0 ;
  
  {
    try {
      result = (physx::PxDefaultAllocator *)new physx::PxDefaultAllocator();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDefaultAllocator___(void * jarg1) {
  physx::PxDefaultAllocator *arg1 = (physx::PxDefaultAllocator *) 0 ;
  
  arg1 = (physx::PxDefaultAllocator *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxActorShape__SWIG_0___() {
  void * jresult ;
  physx::PxActorShape *result = 0 ;
  
  {
    try {
      result = (physx::PxActorShape *)new physx::PxActorShape();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxActorShape__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  physx::PxActorShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  {
    try {
      result = (physx::PxActorShape *)new physx::PxActorShape(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorShape_actor_set___(void * jarg1, void * jarg2) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  if (arg1) (arg1)->actor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorShape_actor_get___(void * jarg1) {
  void * jresult ;
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  result = (physx::PxRigidActor *) ((arg1)->actor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorShape_shape_set___(void * jarg1, void * jarg2) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  if (arg1) (arg1)->shape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorShape_shape_get___(void * jarg1) {
  void * jresult ;
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  result = (physx::PxShape *) ((arg1)->shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxActorShape___(void * jarg1) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQueryHit___() {
  void * jresult ;
  physx::PxQueryHit *result = 0 ;
  
  {
    try {
      result = (physx::PxQueryHit *)new physx::PxQueryHit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryHit_faceIndex_set___(void * jarg1, unsigned int jarg2) {
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->faceIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryHit_faceIndex_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  result = (physx::PxU32) ((arg1)->faceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxQueryHit___(void * jarg1) {
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxLocationHit___() {
  void * jresult ;
  physx::PxLocationHit *result = 0 ;
  
  {
    try {
      result = (physx::PxLocationHit *)new physx::PxLocationHit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_hadInitialOverlap___(void * jarg1) {
  unsigned int jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  bool result;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hadInitialOverlap();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_flags_set___(void * jarg1, int jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxHitFlag::Enum arg2 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxHitFlag::Enum)jarg2; 
  {
    try {
      physx_PxLocationHit_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxHitFlag::Enum result;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  {
    try {
      result = (physx::PxHitFlag::Enum)physx_PxLocationHit_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_position_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_position_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->position);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_normal_set___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_normal_get___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->normal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_distance_set___(void * jarg1, float jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_distance_get___(void * jarg1) {
  float jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxF32) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxLocationHit___(void * jarg1) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastHit___() {
  void * jresult ;
  physx::PxRaycastHit *result = 0 ;
  
  {
    try {
      result = (physx::PxRaycastHit *)new physx::PxRaycastHit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastHit_u_set___(void * jarg1, float jarg2) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastHit_u_get___(void * jarg1) {
  float jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  result = (physx::PxReal) ((arg1)->u);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastHit_v_set___(void * jarg1, float jarg2) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastHit_v_get___(void * jarg1) {
  float jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  result = (physx::PxReal) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastHit___(void * jarg1) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapHit___(void * jarg1) {
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepHit___() {
  void * jresult ;
  physx::PxSweepHit *result = 0 ;
  
  {
    try {
      result = (physx::PxSweepHit *)new physx::PxSweepHit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepHit___(void * jarg1) {
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_block_set___(void * jarg1, void * jarg2) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxRaycastHit *arg2 = (physx::PxRaycastHit *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxRaycastHit *)jarg2; 
  if (arg1) (arg1)->block = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_block_get___(void * jarg1) {
  void * jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxRaycastHit *result = 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  result = (physx::PxRaycastHit *)& ((arg1)->block);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_hasBlock_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBlock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_hasBlock_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  result = (bool) ((arg1)->hasBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_maxNbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_maxNbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_nbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_nbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_processTouches___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  physx::PxRaycastHit *arg2 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxAgain result;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxRaycastHit *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxAgain)(arg1)->processTouches((physx::PxRaycastHit const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_finalizeQuery___(void * jarg1) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      (arg1)->finalizeQuery();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastCallback___(void * jarg1) {
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastCallback_hasAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxRaycastHit > *arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_block_set___(void * jarg1, void * jarg2) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxOverlapHit *arg2 = (physx::PxOverlapHit *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxOverlapHit *)jarg2; 
  if (arg1) (arg1)->block = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_block_get___(void * jarg1) {
  void * jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxOverlapHit *result = 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  result = (physx::PxOverlapHit *)& ((arg1)->block);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_hasBlock_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBlock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_hasBlock_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  result = (bool) ((arg1)->hasBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_maxNbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_maxNbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_nbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_nbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_processTouches___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  physx::PxOverlapHit *arg2 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxAgain result;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxOverlapHit *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxAgain)(arg1)->processTouches((physx::PxOverlapHit const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_finalizeQuery___(void * jarg1) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      (arg1)->finalizeQuery();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapCallback___(void * jarg1) {
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapCallback_hasAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxOverlapHit > *arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_block_set___(void * jarg1, void * jarg2) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxSweepHit *arg2 = (physx::PxSweepHit *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxSweepHit *)jarg2; 
  if (arg1) (arg1)->block = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_block_get___(void * jarg1) {
  void * jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxSweepHit *result = 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  result = (physx::PxSweepHit *)& ((arg1)->block);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_hasBlock_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasBlock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_hasBlock_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  result = (bool) ((arg1)->hasBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_maxNbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_maxNbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_nbTouches_set___(void * jarg1, unsigned int jarg2) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbTouches = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_nbTouches_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbTouches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_processTouches___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  physx::PxSweepHit *arg2 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxAgain result;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxSweepHit *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxAgain)(arg1)->processTouches((physx::PxSweepHit const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_finalizeQuery___(void * jarg1) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  {
    try {
      (arg1)->finalizeQuery();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepCallback___(void * jarg1) {
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepCallback_hasAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitCallback< physx::PxSweepHit > *arg1 = (physx::PxHitCallback< physx::PxSweepHit > *) 0 ;
  bool result;
  
  arg1 = (physx::PxHitCallback< physx::PxSweepHit > *)jarg1; 
  {
    try {
      result = (bool)(arg1)->hasAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxHitBuffer< physx::PxRaycastHit > *result = 0 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxRaycastHit > *)new physx::PxHitBuffer< physx::PxRaycastHit >(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxHitBuffer< physx::PxRaycastHit > *result = 0 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxRaycastHit > *)new physx::PxHitBuffer< physx::PxRaycastHit >(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer__SWIG_2___() {
  void * jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *result = 0 ;
  
  {
    try {
      result = (physx::PxHitBuffer< physx::PxRaycastHit > *)new physx::PxHitBuffer< physx::PxRaycastHit >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getNbAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getNbAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getAnyHit___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxRaycastHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxRaycastHit *) &((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getAnyHit(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getTouches___(void * jarg1) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxRaycastHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      result = (physx::PxRaycastHit *)((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getTouch___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxRaycastHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxRaycastHit *) &((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getTouch(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_getMaxNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxRaycastHit > const *)arg1)->getMaxNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastBuffer___(void * jarg1) {
  physx::PxHitBuffer< physx::PxRaycastHit > *arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *) 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxHitBuffer< physx::PxOverlapHit > *result = 0 ;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxOverlapHit > *)new physx::PxHitBuffer< physx::PxOverlapHit >(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  physx::PxHitBuffer< physx::PxOverlapHit > *result = 0 ;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxOverlapHit > *)new physx::PxHitBuffer< physx::PxOverlapHit >(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer__SWIG_2___() {
  void * jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *result = 0 ;
  
  {
    try {
      result = (physx::PxHitBuffer< physx::PxOverlapHit > *)new physx::PxHitBuffer< physx::PxOverlapHit >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getNbAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getNbAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getAnyHit___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxOverlapHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxOverlapHit *) &((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getAnyHit(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getTouches___(void * jarg1) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxOverlapHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      result = (physx::PxOverlapHit *)((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getTouch___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxOverlapHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxOverlapHit *) &((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getTouch(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_getMaxNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxOverlapHit > const *)arg1)->getMaxNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapBuffer___(void * jarg1) {
  physx::PxHitBuffer< physx::PxOverlapHit > *arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *) 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxHitBuffer< physx::PxSweepHit > *result = 0 ;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxSweepHit > *)new physx::PxHitBuffer< physx::PxSweepHit >(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  physx::PxHitBuffer< physx::PxSweepHit > *result = 0 ;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  {
    try {
      result = (physx::PxHitBuffer< physx::PxSweepHit > *)new physx::PxHitBuffer< physx::PxSweepHit >(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer__SWIG_2___() {
  void * jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *result = 0 ;
  
  {
    try {
      result = (physx::PxHitBuffer< physx::PxSweepHit > *)new physx::PxHitBuffer< physx::PxSweepHit >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getNbAnyHits___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getNbAnyHits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getAnyHit___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxSweepHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxSweepHit *) &((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getAnyHit(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getTouches___(void * jarg1) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxSweepHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  {
    try {
      result = (physx::PxSweepHit *)((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getTouch___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxSweepHit *result = 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxSweepHit *) &((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getTouch(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_getMaxNbTouches___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHitBuffer< physx::PxSweepHit > const *)arg1)->getMaxNbTouches();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepBuffer___(void * jarg1) {
  physx::PxHitBuffer< physx::PxSweepHit > *arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *) 0 ;
  
  arg1 = (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer1___() {
  void * jresult ;
  physx::PxRaycastBufferN< 1 > *result = 0 ;
  
  {
    try {
      result = (physx::PxRaycastBufferN< 1 > *)new physx::PxRaycastBufferN< 1 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastBuffer1___(void * jarg1) {
  physx::PxRaycastBufferN< 1 > *arg1 = (physx::PxRaycastBufferN< 1 > *) 0 ;
  
  arg1 = (physx::PxRaycastBufferN< 1 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer10___() {
  void * jresult ;
  physx::PxRaycastBufferN< 10 > *result = 0 ;
  
  {
    try {
      result = (physx::PxRaycastBufferN< 10 > *)new physx::PxRaycastBufferN< 10 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastBuffer10___(void * jarg1) {
  physx::PxRaycastBufferN< 10 > *arg1 = (physx::PxRaycastBufferN< 10 > *) 0 ;
  
  arg1 = (physx::PxRaycastBufferN< 10 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRaycastBuffer100___() {
  void * jresult ;
  physx::PxRaycastBufferN< 100 > *result = 0 ;
  
  {
    try {
      result = (physx::PxRaycastBufferN< 100 > *)new physx::PxRaycastBufferN< 100 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRaycastBuffer100___(void * jarg1) {
  physx::PxRaycastBufferN< 100 > *arg1 = (physx::PxRaycastBufferN< 100 > *) 0 ;
  
  arg1 = (physx::PxRaycastBufferN< 100 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer1___() {
  void * jresult ;
  physx::PxOverlapBufferN< 1 > *result = 0 ;
  
  {
    try {
      result = (physx::PxOverlapBufferN< 1 > *)new physx::PxOverlapBufferN< 1 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapBuffer1___(void * jarg1) {
  physx::PxOverlapBufferN< 1 > *arg1 = (physx::PxOverlapBufferN< 1 > *) 0 ;
  
  arg1 = (physx::PxOverlapBufferN< 1 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer10___() {
  void * jresult ;
  physx::PxOverlapBufferN< 10 > *result = 0 ;
  
  {
    try {
      result = (physx::PxOverlapBufferN< 10 > *)new physx::PxOverlapBufferN< 10 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapBuffer10___(void * jarg1) {
  physx::PxOverlapBufferN< 10 > *arg1 = (physx::PxOverlapBufferN< 10 > *) 0 ;
  
  arg1 = (physx::PxOverlapBufferN< 10 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxOverlapBuffer100___() {
  void * jresult ;
  physx::PxOverlapBufferN< 100 > *result = 0 ;
  
  {
    try {
      result = (physx::PxOverlapBufferN< 100 > *)new physx::PxOverlapBufferN< 100 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOverlapBuffer100___(void * jarg1) {
  physx::PxOverlapBufferN< 100 > *arg1 = (physx::PxOverlapBufferN< 100 > *) 0 ;
  
  arg1 = (physx::PxOverlapBufferN< 100 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer1___() {
  void * jresult ;
  physx::PxSweepBufferN< 1 > *result = 0 ;
  
  {
    try {
      result = (physx::PxSweepBufferN< 1 > *)new physx::PxSweepBufferN< 1 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepBuffer1___(void * jarg1) {
  physx::PxSweepBufferN< 1 > *arg1 = (physx::PxSweepBufferN< 1 > *) 0 ;
  
  arg1 = (physx::PxSweepBufferN< 1 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer10___() {
  void * jresult ;
  physx::PxSweepBufferN< 10 > *result = 0 ;
  
  {
    try {
      result = (physx::PxSweepBufferN< 10 > *)new physx::PxSweepBufferN< 10 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepBuffer10___(void * jarg1) {
  physx::PxSweepBufferN< 10 > *arg1 = (physx::PxSweepBufferN< 10 > *) 0 ;
  
  arg1 = (physx::PxSweepBufferN< 10 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSweepBuffer100___() {
  void * jresult ;
  physx::PxSweepBufferN< 100 > *result = 0 ;
  
  {
    try {
      result = (physx::PxSweepBufferN< 100 > *)new physx::PxSweepBufferN< 100 >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSweepBuffer100___(void * jarg1) {
  physx::PxSweepBufferN< 100 > *arg1 = (physx::PxSweepBufferN< 100 > *) 0 ;
  
  arg1 = (physx::PxSweepBufferN< 100 > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQueryFilterData___() {
  void * jresult ;
  physx::PxQueryFilterData *result = 0 ;
  
  {
    try {
      result = (physx::PxQueryFilterData *)new physx::PxQueryFilterData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryFilterData_data_set___(void * jarg1,  physx::PxFilterData*  jarg2) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxFilterData *arg2 = (physx::PxFilterData *) 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT  physx::PxFilterData*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryFilterData_data_get___(void * jarg1) {
  physx::PxFilterData*  jresult ;
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  result = (physx::PxFilterData *)& ((arg1)->data);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryFilterData_flags_set___(void * jarg1, int jarg2) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxQueryFlag::Enum arg2 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  arg2 = (physx::PxQueryFlag::Enum)jarg2; 
  {
    try {
      physx_PxQueryFilterData_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryFilterData_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxQueryFlag::Enum result;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  {
    try {
      result = (physx::PxQueryFlag::Enum)physx_PxQueryFilterData_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxQueryFilterData___(void * jarg1) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQueryCache__SWIG_0___() {
  void * jresult ;
  physx::PxQueryCache *result = 0 ;
  
  {
    try {
      result = (physx::PxQueryCache *)new physx::PxQueryCache();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxQueryCache__SWIG_1___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxQueryCache *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxQueryCache *)new physx::PxQueryCache(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_shape_set___(void * jarg1, void * jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  if (arg1) (arg1)->shape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_shape_get___(void * jarg1) {
  void * jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxShape *) ((arg1)->shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_actor_set___(void * jarg1, void * jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  if (arg1) (arg1)->actor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_actor_get___(void * jarg1) {
  void * jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxRigidActor *) ((arg1)->actor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_faceIndex_set___(void * jarg1, unsigned int jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->faceIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryCache_faceIndex_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxU32) ((arg1)->faceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxQueryCache___(void * jarg1) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_meshSizePerformanceTradeOff_set___(void * jarg1, float jarg2) {
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  if (arg1) (arg1)->meshSizePerformanceTradeOff = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_meshSizePerformanceTradeOff_get___(void * jarg1) {
  float jresult ;
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  result = (physx::PxF32) ((arg1)->meshSizePerformanceTradeOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_meshCookingHint_set___(void * jarg1, int jarg2) {
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  physx::PxMeshCookingHint::Enum arg2 ;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  arg2 = (physx::PxMeshCookingHint::Enum)jarg2; 
  if (arg1) (arg1)->meshCookingHint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_meshCookingHint_get___(void * jarg1) {
  int jresult ;
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  physx::PxMeshCookingHint::Enum result;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  result = (physx::PxMeshCookingHint::Enum) ((arg1)->meshCookingHint);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_setToDefault___(void * jarg1) {
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH33MidphaseDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxBVH33MidphaseDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBVH33MidphaseDesc___(void * jarg1) {
  physx::PxBVH33MidphaseDesc *arg1 = (physx::PxBVH33MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxBVH33MidphaseDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH34MidphaseDesc_numPrimsPerLeaf_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBVH34MidphaseDesc *arg1 = (physx::PxBVH34MidphaseDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBVH34MidphaseDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->numPrimsPerLeaf = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH34MidphaseDesc_numPrimsPerLeaf_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBVH34MidphaseDesc *arg1 = (physx::PxBVH34MidphaseDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBVH34MidphaseDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->numPrimsPerLeaf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH34MidphaseDesc_setToDefault___(void * jarg1) {
  physx::PxBVH34MidphaseDesc *arg1 = (physx::PxBVH34MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxBVH34MidphaseDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVH34MidphaseDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBVH34MidphaseDesc *arg1 = (physx::PxBVH34MidphaseDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxBVH34MidphaseDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxBVH34MidphaseDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBVH34MidphaseDesc___(void * jarg1) {
  physx::PxBVH34MidphaseDesc *arg1 = (physx::PxBVH34MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxBVH34MidphaseDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMidphaseDesc___() {
  void * jresult ;
  physx::PxMidphaseDesc *result = 0 ;
  
  {
    try {
      result = (physx::PxMidphaseDesc *)new physx::PxMidphaseDesc();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_getType___(void * jarg1) {
  int jresult ;
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxMeshMidPhase::Enum result;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  {
    try {
      result = (physx::PxMeshMidPhase::Enum)((physx::PxMidphaseDesc const *)arg1)->getType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_mBVH33Desc_set___(void * jarg1, void * jarg2) {
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxBVH33MidphaseDesc *arg2 = (physx::PxBVH33MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  arg2 = (physx::PxBVH33MidphaseDesc *)jarg2; 
  if (arg1) (arg1)->mBVH33Desc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_mBVH33Desc_get___(void * jarg1) {
  void * jresult ;
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxBVH33MidphaseDesc *result = 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  result = (physx::PxBVH33MidphaseDesc *)& ((arg1)->mBVH33Desc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_mBVH34Desc_set___(void * jarg1, void * jarg2) {
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxBVH34MidphaseDesc *arg2 = (physx::PxBVH34MidphaseDesc *) 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  arg2 = (physx::PxBVH34MidphaseDesc *)jarg2; 
  if (arg1) (arg1)->mBVH34Desc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_mBVH34Desc_get___(void * jarg1) {
  void * jresult ;
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxBVH34MidphaseDesc *result = 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  result = (physx::PxBVH34MidphaseDesc *)& ((arg1)->mBVH34Desc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_setToDefault___(void * jarg1, int jarg2) {
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxMeshMidPhase::Enum arg2 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  arg2 = (physx::PxMeshMidPhase::Enum)jarg2; 
  {
    try {
      (arg1)->setToDefault(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxMidphaseDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMidphaseDesc___assign___(void * jarg1, int jarg2) {
  void * jresult ;
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  physx::PxMeshMidPhase::Enum arg2 ;
  physx::PxMidphaseDesc *result = 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  arg2 = (physx::PxMeshMidPhase::Enum)jarg2; 
  {
    try {
      result = (physx::PxMidphaseDesc *) &(arg1)->operator =(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMidphaseDesc___(void * jarg1) {
  physx::PxMidphaseDesc *arg1 = (physx::PxMidphaseDesc *) 0 ;
  
  arg1 = (physx::PxMidphaseDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_areaTestEpsilon_set___(void * jarg1, float jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  float arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->areaTestEpsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_areaTestEpsilon_get___(void * jarg1) {
  float jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  float result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (float) ((arg1)->areaTestEpsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_planeTolerance_set___(void * jarg1, float jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  float arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->planeTolerance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_planeTolerance_get___(void * jarg1) {
  float jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  float result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (float) ((arg1)->planeTolerance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_convexMeshCookingType_set___(void * jarg1, int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxConvexMeshCookingType::Enum arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxConvexMeshCookingType::Enum)jarg2; 
  if (arg1) (arg1)->convexMeshCookingType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_convexMeshCookingType_get___(void * jarg1) {
  int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxConvexMeshCookingType::Enum result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (physx::PxConvexMeshCookingType::Enum) ((arg1)->convexMeshCookingType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_suppressTriangleMeshRemapTable_set___(void * jarg1, unsigned int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->suppressTriangleMeshRemapTable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_suppressTriangleMeshRemapTable_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (bool) ((arg1)->suppressTriangleMeshRemapTable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_buildTriangleAdjacencies_set___(void * jarg1, unsigned int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->buildTriangleAdjacencies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_buildTriangleAdjacencies_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (bool) ((arg1)->buildTriangleAdjacencies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_buildGPUData_set___(void * jarg1, unsigned int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->buildGPUData = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_buildGPUData_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  bool result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (bool) ((arg1)->buildGPUData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_scale_set___(void * jarg1, void * jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxTolerancesScale *arg2 = (physx::PxTolerancesScale *) 0 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxTolerancesScale *)jarg2; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_scale_get___(void * jarg1) {
  void * jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxTolerancesScale *result = 0 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (physx::PxTolerancesScale *)& ((arg1)->scale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_meshPreprocessParams_set___(void * jarg1, int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxMeshPreprocessingFlag::Enum arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxMeshPreprocessingFlag::Enum)jarg2; 
  {
    try {
      physx_PxCookingParams_meshPreprocessParams_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_meshPreprocessParams_get___(void * jarg1) {
  int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxMeshPreprocessingFlag::Enum result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  {
    try {
      result = (physx::PxMeshPreprocessingFlag::Enum)physx_PxCookingParams_meshPreprocessParams_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_meshWeldTolerance_set___(void * jarg1, float jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->meshWeldTolerance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_meshWeldTolerance_get___(void * jarg1) {
  float jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (physx::PxReal) ((arg1)->meshWeldTolerance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_midphaseDesc_set___(void * jarg1, void * jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxMidphaseDesc *arg2 = (physx::PxMidphaseDesc *) 0 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxMidphaseDesc *)jarg2; 
  if (arg1) (arg1)->midphaseDesc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_midphaseDesc_get___(void * jarg1) {
  void * jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxMidphaseDesc *result = 0 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (physx::PxMidphaseDesc *)& ((arg1)->midphaseDesc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_gaussMapLimit_set___(void * jarg1, unsigned int jarg2) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->gaussMapLimit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCookingParams_gaussMapLimit_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  result = (physx::PxU32) ((arg1)->gaussMapLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxCookingParams___(void * jarg1) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxCookingParams *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxCookingParams *)new physx::PxCookingParams((physx::PxTolerancesScale const &)*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxCookingParams___(void * jarg1) {
  physx::PxCookingParams *arg1 = (physx::PxCookingParams *) 0 ;
  
  arg1 = (physx::PxCookingParams *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoundedData_count_set___(void * jarg1, unsigned int jarg2) {
  physx::PxBoundedData *arg1 = (physx::PxBoundedData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBoundedData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoundedData_count_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBoundedData *arg1 = (physx::PxBoundedData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBoundedData *)jarg1; 
  result = (physx::PxU32) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBoundedData___() {
  void * jresult ;
  physx::PxBoundedData *result = 0 ;
  
  {
    try {
      result = (physx::PxBoundedData *)new physx::PxBoundedData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBoundedData___(void * jarg1) {
  physx::PxBoundedData *arg1 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxBoundedData *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_points_set___(void * jarg1, void * jarg2) {
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_points_get___(void * jarg1) {
  void * jresult ;
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_triangles_set___(void * jarg1, void * jarg2) {
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->triangles = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_triangles_get___(void * jarg1) {
  void * jresult ;
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->triangles);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_flags_set___(void * jarg1, int jarg2) {
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxMeshFlag::Enum arg2 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  arg2 = (physx::PxMeshFlag::Enum)jarg2; 
  {
    try {
      physx_PxSimpleTriangleMesh_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  physx::PxMeshFlag::Enum result;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxMeshFlag::Enum)physx_PxSimpleTriangleMesh_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSimpleTriangleMesh___() {
  void * jresult ;
  physx::PxSimpleTriangleMesh *result = 0 ;
  
  {
    try {
      result = (physx::PxSimpleTriangleMesh *)new physx::PxSimpleTriangleMesh();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_setToDefault___(void * jarg1) {
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSimpleTriangleMesh_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  bool result;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  {
    try {
      result = (bool)((physx::PxSimpleTriangleMesh const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSimpleTriangleMesh___(void * jarg1) {
  physx::PxSimpleTriangleMesh *arg1 = (physx::PxSimpleTriangleMesh *) 0 ;
  
  arg1 = (physx::PxSimpleTriangleMesh *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterialIndices_stride_set___(void * jarg1, unsigned int jarg2) {
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->stride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterialIndices_stride_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg1; 
  result = (physx::PxU32) ((arg1)->stride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterialIndices_data_set___(void * jarg1, void * jarg2) {
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  unsigned short *arg2 = (unsigned short *) 0 ;
  
  arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg1; 
  arg2 = (unsigned short *)jarg2; 
  if (arg1) (arg1)->data = (unsigned short const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterialIndices_data_get___(void * jarg1) {
  void * jresult ;
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg1; 
  result = (unsigned short *) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxMaterialIndices___() {
  void * jresult ;
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *result = 0 ;
  
  {
    try {
      result = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)new physx::PxTypedStridedData< physx::PxMaterialTableIndex >();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxMaterialIndices___(void * jarg1) {
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  
  arg1 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshDesc_materialIndices_set___(void * jarg1, void * jarg2) {
  physx::PxTriangleMeshDesc *arg1 = (physx::PxTriangleMeshDesc *) 0 ;
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *arg2 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *) 0 ;
  
  arg1 = (physx::PxTriangleMeshDesc *)jarg1; 
  arg2 = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)jarg2; 
  if (arg1) (arg1)->materialIndices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshDesc_materialIndices_get___(void * jarg1) {
  void * jresult ;
  physx::PxTriangleMeshDesc *arg1 = (physx::PxTriangleMeshDesc *) 0 ;
  physx::PxTypedStridedData< physx::PxMaterialTableIndex > *result = 0 ;
  
  arg1 = (physx::PxTriangleMeshDesc *)jarg1; 
  result = (physx::PxTypedStridedData< physx::PxMaterialTableIndex > *)& ((arg1)->materialIndices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxTriangleMeshDesc___() {
  void * jresult ;
  physx::PxTriangleMeshDesc *result = 0 ;
  
  {
    try {
      result = (physx::PxTriangleMeshDesc *)new physx::PxTriangleMeshDesc();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshDesc_setToDefault___(void * jarg1) {
  physx::PxTriangleMeshDesc *arg1 = (physx::PxTriangleMeshDesc *) 0 ;
  
  arg1 = (physx::PxTriangleMeshDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTriangleMeshDesc *arg1 = (physx::PxTriangleMeshDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxTriangleMeshDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxTriangleMeshDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTriangleMeshDesc___(void * jarg1) {
  physx::PxTriangleMeshDesc *arg1 = (physx::PxTriangleMeshDesc *) 0 ;
  
  arg1 = (physx::PxTriangleMeshDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOutputStream_write___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxOutputStream *arg1 = (physx::PxOutputStream *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  
  arg1 = (physx::PxOutputStream *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (uint32_t)(arg1)->write((void const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxOutputStream___(void * jarg1) {
  physx::PxOutputStream *arg1 = (physx::PxOutputStream *) 0 ;
  
  arg1 = (physx::PxOutputStream *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxDefaultMemoryOutputStream___() {
  void * jresult ;
  physx::PxDefaultMemoryOutputStream *result = 0 ;
  
  {
    try {
      result = (physx::PxDefaultMemoryOutputStream *)new physx::PxDefaultMemoryOutputStream();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDefaultMemoryOutputStream___(void * jarg1) {
  physx::PxDefaultMemoryOutputStream *arg1 = (physx::PxDefaultMemoryOutputStream *) 0 ;
  
  arg1 = (physx::PxDefaultMemoryOutputStream *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryOutputStream_write___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxDefaultMemoryOutputStream *arg1 = (physx::PxDefaultMemoryOutputStream *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  uint32_t result;
  
  arg1 = (physx::PxDefaultMemoryOutputStream *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (uint32_t)(arg1)->write((void const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryOutputStream_getSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxDefaultMemoryOutputStream *arg1 = (physx::PxDefaultMemoryOutputStream *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxDefaultMemoryOutputStream *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxDefaultMemoryOutputStream const *)arg1)->getSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryOutputStream_getData___(void * jarg1) {
  void * jresult ;
  physx::PxDefaultMemoryOutputStream *arg1 = (physx::PxDefaultMemoryOutputStream *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxDefaultMemoryOutputStream *)jarg1; 
  {
    try {
      result = (void *)((physx::PxDefaultMemoryOutputStream const *)arg1)->getData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_points_set___(void * jarg1, void * jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->points = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_points_get___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->points);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_polygons_set___(void * jarg1, void * jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->polygons = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_polygons_get___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->polygons);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_indices_set___(void * jarg1, void * jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->indices = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_indices_get___(void * jarg1) {
  void * jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->indices);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_flags_set___(void * jarg1, int jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxConvexFlag::Enum arg2 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxConvexFlag::Enum)jarg2; 
  {
    try {
      physx_PxConvexMeshDesc_flags_set(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_flags_get___(void * jarg1) {
  int jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxConvexFlag::Enum result;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  {
    try {
      result = (physx::PxConvexFlag::Enum)physx_PxConvexMeshDesc_flags_get(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_vertexLimit_set___(void * jarg1, unsigned short jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxU16 arg2 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  if (arg1) (arg1)->vertexLimit = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_vertexLimit_get___(void * jarg1) {
  unsigned short jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  result = (physx::PxU16) ((arg1)->vertexLimit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_quantizedCount_set___(void * jarg1, unsigned short jarg2) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxU16 arg2 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  arg2 = (physx::PxU16)jarg2; 
  if (arg1) (arg1)->quantizedCount = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_quantizedCount_get___(void * jarg1) {
  unsigned short jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  result = (physx::PxU16) ((arg1)->quantizedCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxConvexMeshDesc___() {
  void * jresult ;
  physx::PxConvexMeshDesc *result = 0 ;
  
  {
    try {
      result = (physx::PxConvexMeshDesc *)new physx::PxConvexMeshDesc();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_setToDefault___(void * jarg1) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxConvexMeshDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxConvexMeshDesc___(void * jarg1) {
  physx::PxConvexMeshDesc *arg1 = (physx::PxConvexMeshDesc *) 0 ;
  
  arg1 = (physx::PxConvexMeshDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxBVHStructureDesc___() {
  void * jresult ;
  physx::PxBVHStructureDesc *result = 0 ;
  
  {
    try {
      result = (physx::PxBVHStructureDesc *)new physx::PxBVHStructureDesc();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructureDesc_bounds_set___(void * jarg1, void * jarg2) {
  physx::PxBVHStructureDesc *arg1 = (physx::PxBVHStructureDesc *) 0 ;
  physx::PxBoundedData *arg2 = (physx::PxBoundedData *) 0 ;
  
  arg1 = (physx::PxBVHStructureDesc *)jarg1; 
  arg2 = (physx::PxBoundedData *)jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructureDesc_bounds_get___(void * jarg1) {
  void * jresult ;
  physx::PxBVHStructureDesc *arg1 = (physx::PxBVHStructureDesc *) 0 ;
  physx::PxBoundedData *result = 0 ;
  
  arg1 = (physx::PxBVHStructureDesc *)jarg1; 
  result = (physx::PxBoundedData *)& ((arg1)->bounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructureDesc_setToDefault___(void * jarg1) {
  physx::PxBVHStructureDesc *arg1 = (physx::PxBVHStructureDesc *) 0 ;
  
  arg1 = (physx::PxBVHStructureDesc *)jarg1; 
  {
    try {
      (arg1)->setToDefault();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructureDesc_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBVHStructureDesc *arg1 = (physx::PxBVHStructureDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxBVHStructureDesc *)jarg1; 
  {
    try {
      result = (bool)((physx::PxBVHStructureDesc const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBVHStructureDesc___(void * jarg1) {
  physx::PxBVHStructureDesc *arg1 = (physx::PxBVHStructureDesc *) 0 ;
  
  arg1 = (physx::PxBVHStructureDesc *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdSceneClient_setScenePvdFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxPvdSceneClient *arg1 = (physx::PxPvdSceneClient *) 0 ;
  physx::PxPvdSceneFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxPvdSceneClient *)jarg1; 
  arg2 = (physx::PxPvdSceneFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setScenePvdFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdSceneClient_setScenePvdFlags___(void * jarg1, int jarg2) {
  physx::PxPvdSceneClient *arg1 = (physx::PxPvdSceneClient *) 0 ;
  physx::PxPvdSceneFlag::Enum arg2 ;
  
  arg1 = (physx::PxPvdSceneClient *)jarg1; 
  arg2 = (physx::PxPvdSceneFlag::Enum)jarg2; 
  {
    try {
      physx_PxPvdSceneClient_setScenePvdFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdSceneClient_getScenePvdFlags___(void * jarg1) {
  int jresult ;
  physx::PxPvdSceneClient *arg1 = (physx::PxPvdSceneClient *) 0 ;
  physx::PxPvdSceneFlag::Enum result;
  
  arg1 = (physx::PxPvdSceneClient *)jarg1; 
  {
    try {
      result = (physx::PxPvdSceneFlag::Enum)physx_PxPvdSceneClient_getScenePvdFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdSceneClient_updateCamera___(void * jarg1, char * jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4,  physx::PxVec3*  jarg5) {
  physx::PxPvdSceneClient *arg1 = (physx::PxPvdSceneClient *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxVec3 *arg5 = 0 ;
  
  arg1 = (physx::PxPvdSceneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  {
    try {
      (arg1)->updateCamera((char const *)arg2,(physx::PxVec3 const &)*arg3,(physx::PxVec3 const &)*arg4,(physx::PxVec3 const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxRigidActorList___() {
  void * jresult ;
  physx::PxRigidActorList *result = 0 ;
  
  {
    try {
      result = (physx::PxRigidActorList *)new physx::PxRigidActorList();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActorList_addRigidActor___(void * jarg1, void * jarg2) {
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  {
    try {
      (arg1)->addRigidActor(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActorList_getNbRigidActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxRigidActorList const *)arg1)->getNbRigidActors();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActorList_getRigidActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxRigidActor *)(arg1)->getRigidActor(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActorList_getRigidActorMatrices___(void * jarg1, float* jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  physx::PxF32 *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  {
    try {
      (arg1)->getRigidActorMatrices(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActorList_releaseRigidActors___(void * jarg1) {
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  {
    try {
      (arg1)->releaseRigidActors();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRigidActorList___(void * jarg1) {
  physx::PxRigidActorList *arg1 = (physx::PxRigidActorList *) 0 ;
  
  arg1 = (physx::PxRigidActorList *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxSceneCollision___() {
  void * jresult ;
  physx::PxSceneCollision *result = 0 ;
  
  {
    try {
      result = (physx::PxSceneCollision *)new physx::PxSceneCollision();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneCollision_canCollide___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxSceneCollision *arg1 = (physx::PxSceneCollision *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  bool result;
  
  arg1 = (physx::PxSceneCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (bool)((physx::PxSceneCollision const *)arg1)->canCollide(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSceneCollision_setCanCollide___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxSceneCollision *arg1 = (physx::PxSceneCollision *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxSceneCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setCanCollide(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxSceneCollision___(void * jarg1) {
  physx::PxSceneCollision *arg1 = (physx::PxSceneCollision *) 0 ;
  
  arg1 = (physx::PxSceneCollision *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_index_set___(void * jarg1, unsigned int jarg2) {
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_index_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  result = (physx::PxU32) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_collisionEvents_set___(void * jarg1, unsigned int jarg2) {
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->collisionEvents = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_collisionEvents_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  bool result;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  result = (bool) ((arg1)->collisionEvents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxActorCollision___() {
  void * jresult ;
  physx::PxActorCollision *result = 0 ;
  
  {
    try {
      result = (physx::PxActorCollision *)new physx::PxActorCollision();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_canCollide___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  bool result;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (bool)((physx::PxActorCollision const *)arg1)->canCollide(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActorCollision_setCanCollide___(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setCanCollide(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxActorCollision___(void * jarg1) {
  physx::PxActorCollision *arg1 = (physx::PxActorCollision *) 0 ;
  
  arg1 = (physx::PxActorCollision *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShapeCollision_index_set___(void * jarg1, unsigned int jarg2) {
  physx::PxShapeCollision *arg1 = (physx::PxShapeCollision *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxShapeCollision *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShapeCollision_index_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxShapeCollision *arg1 = (physx::PxShapeCollision *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxShapeCollision *)jarg1; 
  result = (physx::PxU32) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShapeCollision_solveContacts_set___(void * jarg1, unsigned int jarg2) {
  physx::PxShapeCollision *arg1 = (physx::PxShapeCollision *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxShapeCollision *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->solveContacts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShapeCollision_solveContacts_get___(void * jarg1) {
  unsigned int jresult ;
  physx::PxShapeCollision *arg1 = (physx::PxShapeCollision *) 0 ;
  bool result;
  
  arg1 = (physx::PxShapeCollision *)jarg1; 
  result = (bool) ((arg1)->solveContacts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_new_PxShapeCollision___() {
  void * jresult ;
  physx::PxShapeCollision *result = 0 ;
  
  {
    try {
      result = (physx::PxShapeCollision *)new physx::PxShapeCollision();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxShapeCollision___(void * jarg1) {
  physx::PxShapeCollision *arg1 = (physx::PxShapeCollision *) 0 ;
  
  arg1 = (physx::PxShapeCollision *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_setCollision__SWIG_0___(void * jarg1, void * jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxShapeCollision *arg2 = (physx::PxShapeCollision *) 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxShapeCollision *)jarg2; 
  {
    try {
      physx::PxUnityCollisionFiltering::setCollision(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_getCollision__SWIG_0___(void * jarg1) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxShapeCollision *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxShapeCollision *)physx::PxUnityCollisionFiltering::getCollision((physx::PxShape const *)arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_setCollision__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxActorCollision *arg2 = (physx::PxActorCollision *) 0 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  arg2 = (physx::PxActorCollision *)jarg2; 
  {
    try {
      physx::PxUnityCollisionFiltering::setCollision(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_getCollision__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxActorCollision *result = 0 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = (physx::PxActorCollision *)physx::PxUnityCollisionFiltering::getCollision((physx::PxActor const *)arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_setCollision__SWIG_2___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneCollision *arg2 = (physx::PxSceneCollision *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneCollision *)jarg2; 
  {
    try {
      physx::PxUnityCollisionFiltering::setCollision(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_getCollision__SWIG_2___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneCollision *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxSceneCollision *)physx::PxUnityCollisionFiltering::getCollision((physx::PxScene const *)arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_instance_get___() {
  void * jresult ;
  physx::PxUnityCollisionFiltering *result = 0 ;
  
  result = (physx::PxUnityCollisionFiltering *)&physx::PxUnityCollisionFiltering::instance;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT  physx::PxSimulationFilterShader*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_function_get___() {
  physx::PxSimulationFilterShader*  jresult ;
  physx::PxSimulationFilterShader *result = 0 ;
  
  {
    try {
      result = (physx::PxSimulationFilterShader *)physx_PxUnityCollisionFiltering_function_get();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxUnityCollisionFiltering___(void * jarg1) {
  physx::PxUnityCollisionFiltering *arg1 = (physx::PxUnityCollisionFiltering *) 0 ;
  
  arg1 = (physx::PxUnityCollisionFiltering *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_create___(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxVersion arg1 ;
  physx::PxAllocatorCallback *arg2 = 0 ;
  physx::PxErrorCallback *arg3 = 0 ;
  physx::PxFoundation *result = 0 ;
  
  arg1 = (physx::PxVersion)jarg1; 
  arg2 = (physx::PxAllocatorCallback *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAllocatorCallback & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxErrorCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxErrorCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxFoundation *)physx_PxFoundation_create(arg1,*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createPhysics__SWIG_0___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4, void * jarg5) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxVersion arg2 ;
  physx::PxTolerancesScale *arg3 = 0 ;
  bool arg4 ;
  physx::PxPvd *arg5 = (physx::PxPvd *) 0 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxVersion)jarg2; 
  arg3 = (physx::PxTolerancesScale *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (physx::PxPvd *)jarg5; 
  {
    try {
      result = (physx::PxPhysics *)physx_PxFoundation_createPhysics__SWIG_0(arg1,arg2,(physx::PxTolerancesScale const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createPhysics__SWIG_1___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxVersion arg2 ;
  physx::PxTolerancesScale *arg3 = 0 ;
  bool arg4 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxVersion)jarg2; 
  arg3 = (physx::PxTolerancesScale *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (physx::PxPhysics *)physx_PxFoundation_createPhysics__SWIG_0(arg1,arg2,(physx::PxTolerancesScale const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createPhysics__SWIG_2___(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxVersion arg2 ;
  physx::PxTolerancesScale *arg3 = 0 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxVersion)jarg2; 
  arg3 = (physx::PxTolerancesScale *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxPhysics *)physx_PxFoundation_createPhysics__SWIG_0(arg1,arg2,(physx::PxTolerancesScale const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createPhysics__SWIG_3___(void * jarg1, int jarg2) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxVersion arg2 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxVersion)jarg2; 
  {
    try {
      result = (physx::PxPhysics *)physx_PxFoundation_createPhysics__SWIG_0(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createCudaContextManager___(void * jarg1, char * jarg2) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxCudaContextManager *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (physx::PxCudaContextManager *)physx_PxFoundation_createCudaContextManager(arg1,(char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createPvd___(void * jarg1) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxPvd *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  {
    try {
      result = (physx::PxPvd *)physx_PxFoundation_createPvd(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_createCooking___(void * jarg1, int jarg2, void * jarg3) {
  void * jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxVersion arg2 ;
  physx::PxCookingParams *arg3 = 0 ;
  physx::PxCooking *result = 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxVersion)jarg2; 
  arg3 = (physx::PxCookingParams *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxCookingParams const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxCooking *)physx_PxFoundation_createCooking(arg1,arg2,(physx::PxCookingParams const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_release___(void * jarg1) {
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_setErrorLevel__SWIG_0___(void * jarg1, int jarg2) {
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxErrorCode::Enum arg2 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = (physx::PxErrorCode::Enum)jarg2; 
  {
    try {
      (arg1)->setErrorLevel(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_setErrorLevel__SWIG_1___(void * jarg1) {
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  {
    try {
      (arg1)->setErrorLevel();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_getErrorLevel___(void * jarg1) {
  int jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  physx::PxErrorCode::Enum result;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  {
    try {
      result = (physx::PxErrorCode::Enum)((physx::PxFoundation const *)arg1)->getErrorLevel();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_getReportAllocationNames___(void * jarg1) {
  unsigned int jresult ;
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  bool result;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  {
    try {
      result = (bool)((physx::PxFoundation const *)arg1)->getReportAllocationNames();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFoundation_setReportAllocationNames___(void * jarg1, unsigned int jarg2) {
  physx::PxFoundation *arg1 = (physx::PxFoundation *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxFoundation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setReportAllocationNames(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_release___(void * jarg1) {
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getFoundation___(void * jarg1) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxFoundation *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxFoundation *) &(arg1)->getFoundation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createAggregate___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  bool arg3 ;
  physx::PxAggregate *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (physx::PxAggregate *)(arg1)->createAggregate(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getTolerancesScale___(void * jarg1) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxTolerancesScale *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxTolerancesScale *) &((physx::PxPhysics const *)arg1)->getTolerancesScale();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createTriangleMesh___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxInputStream *arg2 = 0 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxInputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxInputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxTriangleMesh *)(arg1)->createTriangleMesh(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbTriangleMeshes___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbTriangleMeshes();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getTriangleMesh___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxTriangleMesh *)physx_PxPhysics_getTriangleMesh(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createHeightField___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxInputStream *arg2 = 0 ;
  physx::PxHeightField *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxInputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxInputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxHeightField *)(arg1)->createHeightField(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbHeightFields___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbHeightFields();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getHeightField___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxHeightField *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxHeightField *)physx_PxPhysics_getHeightField(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createConvexMesh___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxInputStream *arg2 = 0 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxInputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxInputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxConvexMesh *)(arg1)->createConvexMesh(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbConvexMeshes___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbConvexMeshes();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getConvexMesh___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxConvexMesh *)physx_PxPhysics_getConvexMesh(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createBVHStructure___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxInputStream *arg2 = 0 ;
  physx::PxBVHStructure *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxInputStream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxInputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxBVHStructure *)(arg1)->createBVHStructure(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbBVHStructures___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbBVHStructures();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getBVHStructure___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxBVHStructure *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxBVHStructure *)physx_PxPhysics_getBVHStructure(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createScene___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxSceneDesc *arg2 = 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxSceneDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSceneDesc const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxScene *)(arg1)->createScene((physx::PxSceneDesc const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbScenes___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbScenes();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getScene___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxScene *)physx_PxPhysics_getScene(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createRigidStatic___(void * jarg1,  physx::PxTransform*  jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxRigidStatic *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxRigidStatic *)(arg1)->createRigidStatic((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createRigidDynamic___(void * jarg1,  physx::PxTransform*  jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxRigidDynamic *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (physx::PxRigidDynamic *)(arg1)->createRigidDynamic((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createPruningStructure___(void * jarg1, physx::PxRigidActor** jarg2, unsigned int jarg3) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor **arg2 ;
  physx::PxU32 arg3 ;
  physx::PxPruningStructure *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxPruningStructure *)(arg1)->createPruningStructure(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, int jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial *arg3 = 0 ;
  bool arg4 ;
  physx::PxShapeFlag::Enum arg5 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMaterial const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  arg5 = (physx::PxShapeFlag::Enum)jarg5; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxMaterial const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial *arg3 = 0 ;
  bool arg4 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMaterial const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxMaterial const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_2___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial *arg3 = 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMaterial const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxMaterial const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_3___(void * jarg1, void * jarg2, physx::PxMaterial** jarg3, unsigned short jarg4, unsigned int jarg5, int jarg6) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial **arg3 ;
  physx::PxU16 arg4 ;
  bool arg5 ;
  physx::PxShapeFlag::Enum arg6 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU16)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (physx::PxShapeFlag::Enum)jarg6; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_3(arg1,(physx::PxGeometry const &)*arg2,arg3,arg4,arg5,arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_4___(void * jarg1, void * jarg2, physx::PxMaterial** jarg3, unsigned short jarg4, unsigned int jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial **arg3 ;
  physx::PxU16 arg4 ;
  bool arg5 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU16)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_3(arg1,(physx::PxGeometry const &)*arg2,arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createShape__SWIG_5___(void * jarg1, void * jarg2, physx::PxMaterial** jarg3, unsigned short jarg4) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial **arg3 ;
  physx::PxU16 arg4 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU16)jarg4; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_createShape__SWIG_3(arg1,(physx::PxGeometry const &)*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbShapes___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbShapes();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getShape___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxShape *)physx_PxPhysics_getShape(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createFixedJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxFixedJoint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxFixedJoint *)physx_PxPhysics_createFixedJoint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createRevoluteJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxRevoluteJoint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxRevoluteJoint *)physx_PxPhysics_createRevoluteJoint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createDistanceJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxDistanceJoint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxDistanceJoint *)physx_PxPhysics_createDistanceJoint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createSphericalJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxSphericalJoint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxSphericalJoint *)physx_PxPhysics_createSphericalJoint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createPrismaticJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxPrismaticJoint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxPrismaticJoint *)physx_PxPhysics_createPrismaticJoint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createD6Joint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxD6Joint *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxD6Joint *)physx_PxPhysics_createD6Joint(arg1,arg2,(physx::PxTransform const &)*arg3,arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createArticulation___(void * jarg1) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxArticulation *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxArticulation *)(arg1)->createArticulation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createArticulationReducedCoordinate___(void * jarg1) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxArticulationReducedCoordinate *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxArticulationReducedCoordinate *)(arg1)->createArticulationReducedCoordinate();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_createMaterial___(void * jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxMaterial *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      result = (physx::PxMaterial *)(arg1)->createMaterial(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getNbMaterials___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPhysics const *)arg1)->getNbMaterials();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getMaterial___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxMaterial *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxMaterial *)physx_PxPhysics_getMaterial(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_getPhysicsInsertionCallback___(void * jarg1) {
  void * jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxPhysicsInsertionCallback *result = 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (physx::PxPhysicsInsertionCallback *) &(arg1)->getPhysicsInsertionCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_initExtensions__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  physx::PxPvd *arg2 = (physx::PxPvd *) 0 ;
  bool result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  arg2 = (physx::PxPvd *)jarg2; 
  {
    try {
      result = (bool)physx_PxPhysics_initExtensions__SWIG_0(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_initExtensions__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  bool result;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      result = (bool)physx_PxPhysics_initExtensions__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPhysics_closeExtensions___(void * jarg1) {
  physx::PxPhysics *arg1 = (physx::PxPhysics *) 0 ;
  
  arg1 = (physx::PxPhysics *)jarg1; 
  {
    try {
      physx_PxPhysics_closeExtensions(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_release___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFlags___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneFlag::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxSceneFlag::Enum)physx_PxScene_getFlags((physx::PxScene const *)arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setLimits___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneLimits *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneLimits *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSceneLimits const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLimits((physx::PxSceneLimits const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getLimits___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneLimits result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = ((physx::PxScene const *)arg1)->getLimits();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxSceneLimits((const physx::PxSceneLimits &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getPhysics___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPhysics *) &(arg1)->getPhysics();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getTimestamp___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getTimestamp();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addArticulation___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulationBase *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulationBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationBase & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addArticulation(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeArticulation__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulationBase *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulationBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationBase & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->removeArticulation(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeArticulation__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulationBase *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulationBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationBase & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->removeArticulation(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addActor__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  physx::PxBVHStructure *arg3 = (physx::PxBVHStructure *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxBVHStructure *)jarg3; 
  {
    try {
      (arg1)->addActor(*arg2,(physx::PxBVHStructure const *)arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addActor__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addActor(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addActors__SWIG_0___(void * jarg1, physx::PxActor** jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->addActors(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addActors__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPruningStructure *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxPruningStructure *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPruningStructure const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addActors((physx::PxPruningStructure const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeActor__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->removeActor(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeActor__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->removeActor(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeActors__SWIG_0___(void * jarg1, physx::PxActor** jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 ;
  physx::PxU32 arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->removeActors(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeActors__SWIG_1___(void * jarg1, physx::PxActor** jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->removeActors(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addAggregate___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addAggregate(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeAggregate__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->removeAggregate(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeAggregate__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->removeAggregate(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)physx_PxScene_getNbActors(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxActor *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxActor *)physx_PxScene_getActor(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbStaticActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)physx_PxScene_getNbStaticActors(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getStaticActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxActor *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxActor *)physx_PxScene_getStaticActor(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbDynamicActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)physx_PxScene_getNbDynamicActors(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getDynamicActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxActor *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxActor *)physx_PxScene_getDynamicActor(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbArticulations___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbArticulations();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getArticulation___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxArticulationBase *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxArticulationBase *)physx_PxScene_getArticulation(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbConstraints___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbConstraints();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getConstraint___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxConstraint *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxConstraint *)physx_PxScene_getConstraint(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbAggregates___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbAggregates();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getAggregate___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxAggregate *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxAggregate *)physx_PxScene_getAggregate(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setDominanceGroupPair___(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxDominanceGroup arg2 ;
  physx::PxDominanceGroup arg3 ;
  physx::PxDominanceGroupPair *arg4 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxDominanceGroup)jarg2; 
  arg3 = (physx::PxDominanceGroup)jarg3; 
  arg4 = (physx::PxDominanceGroupPair *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxDominanceGroupPair const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setDominanceGroupPair(arg2,arg3,(physx::PxDominanceGroupPair const &)*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getDominanceGroupPair___(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxDominanceGroup arg2 ;
  physx::PxDominanceGroup arg3 ;
  SwigValueWrapper< physx::PxDominanceGroupPair > result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxDominanceGroup)jarg2; 
  arg3 = (physx::PxDominanceGroup)jarg3; 
  {
    try {
      result = ((physx::PxScene const *)arg1)->getDominanceGroupPair(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxDominanceGroupPair((const physx::PxDominanceGroupPair &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getCpuDispatcher___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxCpuDispatcher *)((physx::PxScene const *)arg1)->getCpuDispatcher();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getCudaContextManager___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxCudaContextManager *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxCudaContextManager *)((physx::PxScene const *)arg1)->getCudaContextManager();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_createClient___(void * jarg1) {
  unsigned char jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxClientID)(arg1)->createClient();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setSimulationEventCallback___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::wrap::PxSimulationEventCallback *arg2 = (physx::wrap::PxSimulationEventCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::wrap::PxSimulationEventCallback *)jarg2; 
  {
    try {
      (arg1)->setSimulationEventCallback(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSimulationEventCallback___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::wrap::PxSimulationEventCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::wrap::PxSimulationEventCallback *)((physx::PxScene const *)arg1)->getSimulationEventCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setBroadPhaseCallback___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCallback *arg2 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseCallback *)jarg2; 
  {
    try {
      (arg1)->setBroadPhaseCallback(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getBroadPhaseCallback___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxBroadPhaseCallback *)((physx::PxScene const *)arg1)->getBroadPhaseCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setFilterShaderData___(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  void *arg2 = (void *) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->setFilterShaderData((void const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFilterShaderData___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (void *)((physx::PxScene const *)arg1)->getFilterShaderData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFilterShaderDataSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getFilterShaderDataSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxSimulationFilterShader* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFilterShader___(void * jarg1) {
  physx::PxSimulationFilterShader* jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationFilterShader result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = ((physx::PxScene const *)arg1)->getFilterShader();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxSimulationFilterShader out_temp;
  out_temp = *(physx::PxSimulationFilterShader*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFilterCallback___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::wrap::PxSimulationFilterCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::wrap::PxSimulationFilterCallback *)((physx::PxScene const *)arg1)->getFilterCallback();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_resetFiltering__SWIG_0___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->resetFiltering(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_resetFiltering__SWIG_1___(void * jarg1, void * jarg2, physx::PxShape** jarg3, unsigned int jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxRigidActor *arg2 = 0 ;
  physx::PxShape **arg3 ;
  physx::PxU32 arg4 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRigidActor & type is null", 0);
    return ;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU32)jarg4; 
  {
    try {
      (arg1)->resetFiltering(*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getKinematicKinematicFilteringMode___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPairFilteringMode::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPairFilteringMode::Enum)((physx::PxScene const *)arg1)->getKinematicKinematicFilteringMode();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getStaticKinematicFilteringMode___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPairFilteringMode::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPairFilteringMode::Enum)((physx::PxScene const *)arg1)->getStaticKinematicFilteringMode();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_simulate___(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->simulate(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_advance___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->advance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_collide___(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->collide(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_checkResults__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->checkResults(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_checkResults__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (bool)(arg1)->checkResults();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchCollision__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->fetchCollision(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchCollision__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (bool)(arg1)->fetchCollision();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchResults__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int * jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  physx::PxU32 *arg3 = (physx::PxU32 *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (physx::PxU32 *)jarg3; 
  {
    try {
      result = (bool)(arg1)->fetchResults(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchResults__SWIG_1___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->fetchResults(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchResults__SWIG_2___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (bool)(arg1)->fetchResults();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_flushSimulation__SWIG_0___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->flushSimulation(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_flushSimulation__SWIG_1___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->flushSimulation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setGravity___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setGravity((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getGravity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = ((physx::PxScene const *)arg1)->getGravity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setBounceThresholdVelocity___(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setBounceThresholdVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getBounceThresholdVelocity___(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxScene const *)arg1)->getBounceThresholdVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setCCDMaxPasses___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setCCDMaxPasses(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getCCDMaxPasses___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getCCDMaxPasses();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFrictionOffsetThreshold___(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxScene const *)arg1)->getFrictionOffsetThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setFrictionType___(void * jarg1, int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxFrictionType::Enum arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxFrictionType::Enum)jarg2; 
  {
    try {
      (arg1)->setFrictionType(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getFrictionType___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxFrictionType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxFrictionType::Enum)((physx::PxScene const *)arg1)->getFrictionType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSimulationStatistics___(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationStatistics *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSimulationStatistics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSimulationStatistics & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxScene const *)arg1)->getSimulationStatistics(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getStaticStructure___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPruningStructureType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPruningStructureType::Enum)((physx::PxScene const *)arg1)->getStaticStructure();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getDynamicStructure___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPruningStructureType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPruningStructureType::Enum)((physx::PxScene const *)arg1)->getDynamicStructure();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_flushQueryUpdates___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->flushQueryUpdates();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setDynamicTreeRebuildRateHint___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setDynamicTreeRebuildRateHint(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getDynamicTreeRebuildRateHint___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getDynamicTreeRebuildRateHint();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_forceDynamicTreeRebuild___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->forceDynamicTreeRebuild(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setSceneQueryUpdateMode___(void * jarg1, int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneQueryUpdateMode::Enum arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneQueryUpdateMode::Enum)jarg2; 
  {
    try {
      (arg1)->setSceneQueryUpdateMode(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSceneQueryUpdateMode___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneQueryUpdateMode::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxSceneQueryUpdateMode::Enum)((physx::PxScene const *)arg1)->getSceneQueryUpdateMode();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sceneQueriesUpdate___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->sceneQueriesUpdate();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_checkQueries__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->checkQueries(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_checkQueries__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (bool)(arg1)->checkQueries();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchQueries__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->fetchQueries(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_fetchQueries__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (bool)(arg1)->fetchQueries();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_raycast__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, void * jarg5, int jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  physx::PxHitFlag::Enum arg6 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryCache *arg8 = (physx::PxQueryCache *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxHitFlag::Enum)jarg6; 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryCache *)jarg8; 
  {
    try {
      result = (bool)physx_PxScene_raycast__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6,(physx::PxQueryFilterData const &)*arg7,(physx::PxQueryCache const *)arg8);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_raycast__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, void * jarg5, int jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  physx::PxHitFlag::Enum arg6 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxHitFlag::Enum)jarg6; 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_raycast__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6,(physx::PxQueryFilterData const &)*arg7);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_raycast__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, void * jarg5, int jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  physx::PxHitFlag::Enum arg6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxHitFlag::Enum)jarg6; 
  {
    try {
      result = (bool)physx_PxScene_raycast__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_raycast__SWIG_3___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_raycast__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sweep__SWIG_0___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3,  physx::PxVec3*  jarg4, float jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9, float jarg10) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  physx::PxHitFlag::Enum arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryCache *arg9 = (physx::PxQueryCache *) 0 ;
  physx::PxReal arg10 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxHitFlag::Enum)jarg7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryCache *)jarg9; 
  arg10 = (physx::PxReal)jarg10; 
  {
    try {
      result = (bool)physx_PxScene_sweep__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8,(physx::PxQueryCache const *)arg9,arg10);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sweep__SWIG_1___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3,  physx::PxVec3*  jarg4, float jarg5, void * jarg6, int jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  physx::PxHitFlag::Enum arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryCache *arg9 = (physx::PxQueryCache *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxHitFlag::Enum)jarg7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryCache *)jarg9; 
  {
    try {
      result = (bool)physx_PxScene_sweep__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8,(physx::PxQueryCache const *)arg9);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sweep__SWIG_2___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3,  physx::PxVec3*  jarg4, float jarg5, void * jarg6, int jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  physx::PxHitFlag::Enum arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxHitFlag::Enum)jarg7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_sweep__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sweep__SWIG_3___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3,  physx::PxVec3*  jarg4, float jarg5, void * jarg6, int jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  physx::PxHitFlag::Enum arg7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxHitFlag::Enum)jarg7; 
  {
    try {
      result = (bool)physx_PxScene_sweep__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_sweep__SWIG_4___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3,  physx::PxVec3*  jarg4, float jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_sweep__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_overlap__SWIG_0___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapCallback *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (physx::PxOverlapCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapCallback & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_overlap__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_overlap__SWIG_1___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapCallback *arg4 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (physx::PxOverlapCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)physx_PxScene_overlap__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSceneQueryStaticTimestamp___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getSceneQueryStaticTimestamp();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getBroadPhaseType___(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxBroadPhaseType::Enum)((physx::PxScene const *)arg1)->getBroadPhaseType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getBroadPhaseCaps___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCaps *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseCaps *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseCaps & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxScene const *)arg1)->getBroadPhaseCaps(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbBroadPhaseRegions___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbBroadPhaseRegions();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getBroadPhaseRegion___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxBroadPhaseRegionInfo result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = physx_PxScene_getBroadPhaseRegion(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxBroadPhaseRegionInfo((const physx::PxBroadPhaseRegionInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addBroadPhaseRegion__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = 0 ;
  bool arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseRegion const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (physx::PxU32)(arg1)->addBroadPhaseRegion((physx::PxBroadPhaseRegion const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_addBroadPhaseRegion__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseRegion const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxU32)(arg1)->addBroadPhaseRegion((physx::PxBroadPhaseRegion const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_removeBroadPhaseRegion___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (bool)(arg1)->removeBroadPhaseRegion(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getTaskManager___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxTaskManager *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxTaskManager *)((physx::PxScene const *)arg1)->getTaskManager();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockRead__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->lockRead((char const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockRead__SWIG_1___(void * jarg1, char * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->lockRead((char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockRead__SWIG_2___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->lockRead();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_unlockRead___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->unlockRead();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockWrite__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->lockWrite((char const *)arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockWrite__SWIG_1___(void * jarg1, char * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->lockWrite((char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_lockWrite__SWIG_2___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->lockWrite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_unlockWrite___(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      (arg1)->unlockWrite();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setNbContactDataBlocks___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setNbContactDataBlocks(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getNbContactDataBlocksUsed___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbContactDataBlocksUsed();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getMaxNbContactDataBlocksUsed___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getMaxNbContactDataBlocksUsed();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getContactReportStreamBufferSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getContactReportStreamBufferSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setSolverBatchSize___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setSolverBatchSize(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSolverBatchSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getSolverBatchSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_setSolverArticulationBatchSize___(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setSolverArticulationBatchSize(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getSolverArticulationBatchSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxScene const *)arg1)->getSolverArticulationBatchSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getWakeCounterResetValue___(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxScene const *)arg1)->getWakeCounterResetValue();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_shiftOrigin___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->shiftOrigin((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxScene_getScenePvdClient___(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPvdSceneClient *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  {
    try {
      result = (physx::PxPvdSceneClient *)(arg1)->getScenePvdClient();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_release___(void * jarg1) {
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getConcreteTypeName___(void * jarg1) {
  char * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (char *)((physx::PxBase const *)arg1)->getConcreteTypeName();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getConcreteType___(void * jarg1) {
  unsigned short jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxType result;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxType)((physx::PxBase const *)arg1)->getConcreteType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_setBaseFlags___(void * jarg1, int jarg2) {
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxBaseFlag::Enum arg2 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  arg2 = (physx::PxBaseFlag::Enum)jarg2; 
  {
    try {
      physx_PxBase_setBaseFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getBaseFlags___(void * jarg1) {
  int jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxBaseFlag::Enum result;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxBaseFlag::Enum)physx_PxBase_getBaseFlags((physx::PxBase const *)arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getRigidActor___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxBase_getRigidActor(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getRigidStatic___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxRigidStatic *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxRigidStatic *)physx_PxBase_getRigidStatic(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getRigidBody___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxRigidBody *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxRigidBody *)physx_PxBase_getRigidBody(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getRigidDynamic___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxRigidDynamic *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxRigidDynamic *)physx_PxBase_getRigidDynamic(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getArticulationLink___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxArticulationLink *)physx_PxBase_getArticulationLink(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getConvexMesh___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxConvexMesh *)physx_PxBase_getConvexMesh(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getTriangleMesh___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxTriangleMesh *)physx_PxBase_getTriangleMesh(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getHeightField___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxHeightField *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxHeightField *)physx_PxBase_getHeightField(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_getMaterial___(void * jarg1) {
  void * jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  physx::PxMaterial *result = 0 ;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (physx::PxMaterial *)physx_PxBase_getMaterial(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBase_isReleasable___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBase *arg1 = (physx::PxBase *) 0 ;
  bool result;
  
  arg1 = (physx::PxBase *)jarg1; 
  {
    try {
      result = (bool)((physx::PxBase const *)arg1)->isReleasable();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getScene___(void * jarg1) {
  void * jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = (physx::PxScene *)((physx::PxActor const *)arg1)->getScene();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getWorldBounds__SWIG_0___(void * jarg1, float jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  float arg2 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxActor *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = ((physx::PxActor const *)arg1)->getWorldBounds(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getWorldBounds__SWIG_1___(void * jarg1) {
  physx::PxBounds3* jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = ((physx::PxActor const *)arg1)->getWorldBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_setActorFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxActorFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  arg2 = (physx::PxActorFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setActorFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_setActorFlags___(void * jarg1, int jarg2) {
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxActorFlag::Enum arg2 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  arg2 = (physx::PxActorFlag::Enum)jarg2; 
  {
    try {
      physx_PxActor_setActorFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getActorFlags___(void * jarg1) {
  int jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxActorFlag::Enum result;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = (physx::PxActorFlag::Enum)physx_PxActor_getActorFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_setDominanceGroup___(void * jarg1, unsigned char jarg2) {
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxDominanceGroup arg2 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  arg2 = (physx::PxDominanceGroup)jarg2; 
  {
    try {
      (arg1)->setDominanceGroup(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getDominanceGroup___(void * jarg1) {
  unsigned char jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxDominanceGroup result;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = (physx::PxDominanceGroup)((physx::PxActor const *)arg1)->getDominanceGroup();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_getAggregate___(void * jarg1) {
  void * jresult ;
  physx::PxActor *arg1 = (physx::PxActor *) 0 ;
  physx::PxAggregate *result = 0 ;
  
  arg1 = (physx::PxActor *)jarg1; 
  {
    try {
      result = (physx::PxAggregate *)((physx::PxActor const *)arg1)->getAggregate();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getGlobalPose___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  {
    try {
      result = ((physx::PxRigidActor const *)arg1)->getGlobalPose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT  physx::PxMat44*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getGlobalMatrix___(void * jarg1) {
  physx::PxMat44*  jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxMat44 *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  {
    try {
      result = (physx::PxMat44 *) &physx_PxRigidActor_getGlobalMatrix(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_setGlobalPose__SWIG_0___(void * jarg1,  physx::PxTransform*  jarg2, unsigned int jarg3) {
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setGlobalPose((physx::PxTransform const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_setGlobalPose__SWIG_1___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setGlobalPose((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_attachShape___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxShape *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxShape & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->attachShape(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_detachShape__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxShape *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxShape & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->detachShape(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_detachShape__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxShape *arg2 = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxShape & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->detachShape(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getNbShapes___(void * jarg1) {
  unsigned int jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxRigidActor const *)arg1)->getNbShapes();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getShape___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxShape *)physx_PxRigidActor_getShape(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getNbConstraints___(void * jarg1) {
  unsigned int jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxRigidActor const *)arg1)->getNbConstraints();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_getConstraint___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxConstraint *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxConstraint *)physx_PxRigidActor_getConstraint(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_createExclusiveShape__SWIG_0___(void * jarg1, void * jarg2, physx::PxMaterial** jarg3, unsigned short jarg4, int jarg5) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial **arg3 ;
  physx::PxU16 arg4 ;
  physx::PxShapeFlag::Enum arg5 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU16)jarg4; 
  arg5 = (physx::PxShapeFlag::Enum)jarg5; 
  {
    try {
      result = (physx::PxShape *)physx_PxRigidActor_createExclusiveShape__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_createExclusiveShape__SWIG_1___(void * jarg1, void * jarg2, physx::PxMaterial** jarg3, unsigned short jarg4) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial **arg3 ;
  physx::PxU16 arg4 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3;
  arg4 = (physx::PxU16)jarg4; 
  {
    try {
      result = (physx::PxShape *)physx_PxRigidActor_createExclusiveShape__SWIG_0(arg1,(physx::PxGeometry const &)*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_createExclusiveShape__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial *arg3 = 0 ;
  physx::PxShapeFlag::Enum arg4 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMaterial & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxShapeFlag::Enum)jarg4; 
  {
    try {
      result = (physx::PxShape *)physx_PxRigidActor_createExclusiveShape__SWIG_2(arg1,(physx::PxGeometry const &)*arg2,*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_createExclusiveShape__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  physx::PxMaterial *arg3 = 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxMaterial *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMaterial & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxShape *)physx_PxRigidActor_createExclusiveShape__SWIG_2(arg1,(physx::PxGeometry const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setCMassLocalPose___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setCMassLocalPose((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getCMassLocalPose___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = ((physx::PxRigidBody const *)arg1)->getCMassLocalPose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMass___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMass(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMass___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMass();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getInvMass___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getInvMass();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassSpaceInertiaTensor___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setMassSpaceInertiaTensor((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMassSpaceInertiaTensor___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = ((physx::PxRigidBody const *)arg1)->getMassSpaceInertiaTensor();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMassSpaceInvInertiaTensor___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = ((physx::PxRigidBody const *)arg1)->getMassSpaceInvInertiaTensor();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setLinearDamping___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setLinearDamping(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getLinearDamping___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getLinearDamping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setAngularDamping___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setAngularDamping(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getAngularDamping___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getAngularDamping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getLinearVelocity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = ((physx::PxRigidBody const *)arg1)->getLinearVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setLinearVelocity__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2, unsigned int jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setLinearVelocity((physx::PxVec3 const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setLinearVelocity__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setLinearVelocity((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getAngularVelocity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = ((physx::PxRigidBody const *)arg1)->getAngularVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setAngularVelocity__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2, unsigned int jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setAngularVelocity((physx::PxVec3 const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setAngularVelocity__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setAngularVelocity((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMaxAngularVelocity___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxAngularVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMaxAngularVelocity___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMaxAngularVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMaxLinearVelocity___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxLinearVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMaxLinearVelocity___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMaxLinearVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForce__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2, int jarg3, unsigned int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxForceMode::Enum arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxForceMode::Enum)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->addForce((physx::PxVec3 const &)*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForce__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2, int jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxForceMode::Enum arg3 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxForceMode::Enum)jarg3; 
  {
    try {
      (arg1)->addForce((physx::PxVec3 const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForce__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->addForce((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addTorque__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2, int jarg3, unsigned int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxForceMode::Enum arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxForceMode::Enum)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->addTorque((physx::PxVec3 const &)*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addTorque__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2, int jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxForceMode::Enum arg3 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxForceMode::Enum)jarg3; 
  {
    try {
      (arg1)->addTorque((physx::PxVec3 const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addTorque__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->addTorque((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_clearForce__SWIG_0___(void * jarg1, int jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxForceMode::Enum arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxForceMode::Enum)jarg2; 
  {
    try {
      (arg1)->clearForce(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_clearForce__SWIG_1___(void * jarg1) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      (arg1)->clearForce();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_clearTorque__SWIG_0___(void * jarg1, int jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxForceMode::Enum arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxForceMode::Enum)jarg2; 
  {
    try {
      (arg1)->clearTorque(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_clearTorque__SWIG_1___(void * jarg1) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      (arg1)->clearTorque();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setForceAndTorque__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  {
    try {
      (arg1)->setForceAndTorque((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setForceAndTorque__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      (arg1)->setForceAndTorque((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setRigidBodyFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxRigidBodyFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxRigidBodyFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setRigidBodyFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setRigidBodyFlags___(void * jarg1, int jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxRigidBodyFlag::Enum arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxRigidBodyFlag::Enum)jarg2; 
  {
    try {
      physx_PxRigidBody_setRigidBodyFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getRigidBodyFlags___(void * jarg1) {
  int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxRigidBodyFlag::Enum result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxRigidBodyFlag::Enum)physx_PxRigidBody_getRigidBodyFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMinCCDAdvanceCoefficient___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMinCCDAdvanceCoefficient(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMinCCDAdvanceCoefficient___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMinCCDAdvanceCoefficient();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMaxDepenetrationVelocity___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxDepenetrationVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMaxDepenetrationVelocity___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMaxDepenetrationVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMaxContactImpulse___(void * jarg1, float jarg2) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxContactImpulse(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getMaxContactImpulse___(void * jarg1) {
  float jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidBody const *)arg1)->getMaxContactImpulse();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_0___(void * jarg1, float* jarg2, unsigned int jarg3,  physx::PxVec3*  jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxVec3 *arg4 = (physx::PxVec3 *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_0(arg1,(float const (*))arg2,arg3,(physx::PxVec3 const *)arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_1___(void * jarg1, float* jarg2, unsigned int jarg3,  physx::PxVec3*  jarg4) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxVec3 *arg4 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_0(arg1,(float const (*))arg2,arg3,(physx::PxVec3 const *)arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_2___(void * jarg1, float* jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_0(arg1,(float const (*))arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_3___(void * jarg1, float jarg2,  physx::PxVec3*  jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  physx::PxVec3 *arg3 = (physx::PxVec3 *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_3(arg1,arg2,(physx::PxVec3 const *)arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_4___(void * jarg1, float jarg2,  physx::PxVec3*  jarg3) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  physx::PxVec3 *arg3 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_3(arg1,arg2,(physx::PxVec3 const *)arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_5___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_3(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_updateMassAndInertia__SWIG_6___(void * jarg1) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  {
    try {
      result = (bool)physx_PxRigidBody_updateMassAndInertia__SWIG_3(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_0___(void * jarg1, float* jarg2, unsigned int jarg3,  physx::PxVec3*  jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxVec3 *arg4 = (physx::PxVec3 *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_0(arg1,(float const (*))arg2,arg3,(physx::PxVec3 const *)arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_1___(void * jarg1, float* jarg2, unsigned int jarg3,  physx::PxVec3*  jarg4) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  physx::PxVec3 *arg4 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_0(arg1,(float const (*))arg2,arg3,(physx::PxVec3 const *)arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_2___(void * jarg1, float* jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal *arg2 ;
  physx::PxU32 arg3 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_0(arg1,(float const (*))arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_3___(void * jarg1, float jarg2,  physx::PxVec3*  jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  physx::PxVec3 *arg3 = (physx::PxVec3 *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_3(arg1,arg2,(physx::PxVec3 const *)arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_4___(void * jarg1, float jarg2,  physx::PxVec3*  jarg3) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  physx::PxVec3 *arg3 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_3(arg1,arg2,(physx::PxVec3 const *)arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_setMassAndUpdateInertia__SWIG_5___(void * jarg1, float jarg2) {
  unsigned int jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxReal arg2 ;
  bool result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      result = (bool)physx_PxRigidBody_setMassAndUpdateInertia__SWIG_3(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxMassProperties* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_computeMassPropertiesFromShapes___(physx::PxShape** jarg1, int jarg2) {
  physx::PxMassProperties* jresult ;
  physx::PxShape **arg1 ;
  int arg2 ;
  SwigValueWrapper< physx::PxMassProperties > result;
  
  arg1 = jarg1;
  arg2 = (int)jarg2; 
  {
    try {
      result = physx_PxRigidBody_computeMassPropertiesFromShapes(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxMassProperties out_temp;
  out_temp = *(physx::PxMassProperties*)&result; 
  jresult = &out_temp; 
  
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtPos__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4, unsigned int jarg5) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  bool arg5 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      physx_PxRigidBody_addForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtPos__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  {
    try {
      physx_PxRigidBody_addForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtPos__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      physx_PxRigidBody_addForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtLocalPos__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4, unsigned int jarg5) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  bool arg5 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      physx_PxRigidBody_addForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtLocalPos__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  {
    try {
      physx_PxRigidBody_addForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addForceAtLocalPos__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      physx_PxRigidBody_addForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtPos__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4, unsigned int jarg5) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  bool arg5 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtPos__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtPos__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtLocalPos__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4, unsigned int jarg5) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  bool arg5 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtLocalPos__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, int jarg4) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxForceMode::Enum arg4 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxForceMode::Enum)jarg4; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_addLocalForceAtLocalPos__SWIG_2___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      physx_PxRigidBody_addLocalForceAtLocalPos__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getVelocityAtPos___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx_PxRigidBody_getVelocityAtPos(arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getLocalVelocityAtLocalPos___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx_PxRigidBody_getLocalVelocityAtLocalPos(arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_getVelocityAtOffset___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxVec3* jresult ;
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = physx_PxRigidBody_getVelocityAtOffset(arg1,(physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4,  physx::PxVec3*  jarg5) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxVec3 *arg5 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = jarg5; 
  {
    try {
      physx_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_0(arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,*arg4,*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_1___(void * jarg1,  physx::PxTransform*  jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4, float jarg5, float jarg6,  physx::PxVec3*  jarg7,  physx::PxVec3*  jarg8) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxReal arg6 ;
  physx::PxVec3 *arg7 = 0 ;
  physx::PxVec3 *arg8 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxReal)jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  {
    try {
      physx_PxRigidBody_computeVelocityDeltaFromImpulse__SWIG_1(arg1,(physx::PxTransform const &)*arg2,(physx::PxVec3 const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,*arg8);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_computeLinearAngularImpulse___(void * jarg1,  physx::PxTransform*  jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4, float jarg5, float jarg6,  physx::PxVec3*  jarg7,  physx::PxVec3*  jarg8) {
  physx::PxRigidBody *arg1 = (physx::PxRigidBody *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxReal arg6 ;
  physx::PxVec3 *arg7 = 0 ;
  physx::PxVec3 *arg8 = 0 ;
  
  arg1 = (physx::PxRigidBody *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxReal)jarg6; 
  arg7 = jarg7; 
  arg8 = jarg8; 
  {
    try {
      physx_PxRigidBody_computeLinearAngularImpulse(arg1,(physx::PxTransform const &)*arg2,(physx::PxVec3 const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,*arg8);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setKinematicTarget___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setKinematicTarget((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getKinematicTarget___(void * jarg1,  physx::PxTransform*  jarg2) {
  unsigned int jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      result = (bool)((physx::PxRigidDynamic const *)arg1)->getKinematicTarget(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_isSleeping___(void * jarg1) {
  unsigned int jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  bool result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (bool)((physx::PxRigidDynamic const *)arg1)->isSleeping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setSleepThreshold___(void * jarg1, float jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setSleepThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getSleepThreshold___(void * jarg1) {
  float jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidDynamic const *)arg1)->getSleepThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setStabilizationThreshold___(void * jarg1, float jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setStabilizationThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getStabilizationThreshold___(void * jarg1) {
  float jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidDynamic const *)arg1)->getStabilizationThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setRigidDynamicLockFlags___(void * jarg1, int jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxRigidDynamicLockFlag::Enum arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxRigidDynamicLockFlag::Enum)jarg2; 
  {
    try {
      physx_PxRigidDynamic_setRigidDynamicLockFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getRigidDynamicLockFlags___(void * jarg1) {
  int jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxRigidDynamicLockFlag::Enum result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (physx::PxRigidDynamicLockFlag::Enum)physx_PxRigidDynamic_getRigidDynamicLockFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setWakeCounter___(void * jarg1, float jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setWakeCounter(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getWakeCounter___(void * jarg1) {
  float jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidDynamic const *)arg1)->getWakeCounter();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_wakeUp___(void * jarg1) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      (arg1)->wakeUp();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_putToSleep___(void * jarg1) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      (arg1)->putToSleep();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setSolverIterationCounts__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->setSolverIterationCounts(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setSolverIterationCounts__SWIG_1___(void * jarg1, unsigned int jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setSolverIterationCounts(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getSolverIterationCounts___(void * jarg1, unsigned int * jarg2, unsigned int * jarg3) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxU32 *arg2 = 0 ;
  physx::PxU32 *arg3 = 0 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2; 
  arg3 = (physx::PxU32 *)jarg3; 
  {
    try {
      ((physx::PxRigidDynamic const *)arg1)->getSolverIterationCounts(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_getContactReportThreshold___(void * jarg1) {
  float jresult ;
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRigidDynamic const *)arg1)->getContactReportThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_setContactReportThreshold___(void * jarg1, float jarg2) {
  physx::PxRigidDynamic *arg1 = (physx::PxRigidDynamic *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRigidDynamic *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setContactReportThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getReferenceCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxShape const *)arg1)->getReferenceCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_acquireReference___(void * jarg1) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      (arg1)->acquireReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getGeometryType___(void * jarg1) {
  int jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxGeometryType::Enum result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxGeometryType::Enum)((physx::PxShape const *)arg1)->getGeometryType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setGeometry___(void * jarg1, void * jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxGeometry *arg2 = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxGeometry const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGeometry((physx::PxGeometry const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getGeometry___(void * jarg1) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxGeometryHolder result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (arg1)->getGeometry();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxGeometryHolder((const physx::PxGeometryHolder &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getActor___(void * jarg1) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)((physx::PxShape const *)arg1)->getActor();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setLocalPose___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setLocalPose((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getLocalPose___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = ((physx::PxShape const *)arg1)->getLocalPose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setSimulationFilterData___(void * jarg1,  physx::PxFilterData*  jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxFilterData *arg2 = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setSimulationFilterData((physx::PxFilterData const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxFilterData* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getSimulationFilterData___(void * jarg1) {
  physx::PxFilterData* jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  SwigValueWrapper< physx::PxFilterData > result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = ((physx::PxShape const *)arg1)->getSimulationFilterData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxFilterData out_temp;
  out_temp = *(physx::PxFilterData*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setQueryFilterData___(void * jarg1,  physx::PxFilterData*  jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxFilterData *arg2 = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setQueryFilterData((physx::PxFilterData const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxFilterData* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getQueryFilterData___(void * jarg1) {
  physx::PxFilterData* jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  SwigValueWrapper< physx::PxFilterData > result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = ((physx::PxShape const *)arg1)->getQueryFilterData();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxFilterData out_temp;
  out_temp = *(physx::PxFilterData*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setMaterials___(void * jarg1, physx::PxMaterial** jarg2, unsigned short jarg3) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxMaterial **arg2 ;
  physx::PxU16 arg3 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = jarg2;
  arg3 = (physx::PxU16)jarg3; 
  {
    try {
      (arg1)->setMaterials(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getNbMaterials___(void * jarg1) {
  unsigned short jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU16 result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxU16)((physx::PxShape const *)arg1)->getNbMaterials();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getMaterial___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxMaterial *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxMaterial *)physx_PxShape_getMaterial(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getMaterialFromInternalFaceIndex___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxMaterial *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxMaterial *)((physx::PxShape const *)arg1)->getMaterialFromInternalFaceIndex(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setContactOffset___(void * jarg1, float jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setContactOffset(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getContactOffset___(void * jarg1) {
  float jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxShape const *)arg1)->getContactOffset();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setRestOffset___(void * jarg1, float jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setRestOffset(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getRestOffset___(void * jarg1) {
  float jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxShape const *)arg1)->getRestOffset();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setTorsionalPatchRadius___(void * jarg1, float jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setTorsionalPatchRadius(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getTorsionalPatchRadius___(void * jarg1) {
  float jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxShape const *)arg1)->getTorsionalPatchRadius();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setMinTorsionalPatchRadius___(void * jarg1, float jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMinTorsionalPatchRadius(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getMinTorsionalPatchRadius___(void * jarg1) {
  float jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxShape const *)arg1)->getMinTorsionalPatchRadius();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxShapeFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxShapeFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setFlags___(void * jarg1, int jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxShapeFlag::Enum arg2 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxShapeFlag::Enum)jarg2; 
  {
    try {
      physx_PxShape_setFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getFlags___(void * jarg1) {
  int jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxShapeFlag::Enum result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (physx::PxShapeFlag::Enum)physx_PxShape_getFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_isExclusive___(void * jarg1) {
  unsigned int jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  bool result;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (bool)((physx::PxShape const *)arg1)->isExclusive();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_setName___(void * jarg1, char * jarg2) {
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_getName___(void * jarg1) {
  char * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  char *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  {
    try {
      result = (char *)((physx::PxShape const *)arg1)->getName();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getNbVertices___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxConvexMesh const *)arg1)->getNbVertices();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getVertex___(void * jarg1, unsigned int jarg2) {
  physx::PxVec3*  jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxVec3 *) &physx_PxConvexMesh_getVertex(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getIndex___(void * jarg1, unsigned int jarg2) {
  unsigned char jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU8 result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxU8)physx_PxConvexMesh_getIndex(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getNbPolygons___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxConvexMesh const *)arg1)->getNbPolygons();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getPolygonData___(void * jarg1, unsigned int jarg2,  physx::PxHullPolygon*  jarg3) {
  unsigned int jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxHullPolygon *arg3 = 0 ;
  bool result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (bool)((physx::PxConvexMesh const *)arg1)->getPolygonData(arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getReferenceCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxConvexMesh const *)arg1)->getReferenceCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_acquireReference___(void * jarg1) {
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      (arg1)->acquireReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getMassInformation___(void * jarg1, float * jarg2,  physx::PxMat33*  jarg3,  physx::PxVec3*  jarg4) {
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxMat33 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  arg2 = (physx::PxReal *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  {
    try {
      ((physx::PxConvexMesh const *)arg1)->getMassInformation(*arg2,*arg3,*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getMass___(void * jarg1) {
  float jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxReal)physx_PxConvexMesh_getMass(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxMat33*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getLocalInertia___(void * jarg1) {
  physx::PxMat33*  jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxMat33 *) &physx_PxConvexMesh_getLocalInertia(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxVec3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getLocalCenterOfMass___(void * jarg1) {
  physx::PxVec3*  jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (physx::PxVec3 *) &physx_PxConvexMesh_getLocalCenterOfMass(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_getLocalBounds___(void * jarg1) {
  physx::PxBounds3* jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = ((physx::PxConvexMesh const *)arg1)->getLocalBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_isGpuCompatible___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConvexMesh *arg1 = (physx::PxConvexMesh *) 0 ;
  bool result;
  
  arg1 = (physx::PxConvexMesh *)jarg1; 
  {
    try {
      result = (bool)((physx::PxConvexMesh const *)arg1)->isGpuCompatible();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getNbVertices___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxTriangleMesh const *)arg1)->getNbVertices();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getVertex___(void * jarg1, unsigned int jarg2) {
  physx::PxVec3* jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 arg2 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = physx_PxTriangleMesh_getVertex(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_setVertex___(void * jarg1, unsigned int jarg2,  physx::PxVec3*  jarg3) {
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = jarg3; 
  {
    try {
      physx_PxTriangleMesh_setVertex(arg1,arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_refitBVH___(void * jarg1) {
  physx::PxBounds3* jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (arg1)->refitBVH();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getNbTriangles___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxTriangleMesh const *)arg1)->getNbTriangles();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getTriangleVertex___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  int result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (int)physx_PxTriangleMesh_getTriangleVertex(arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getTriangleMeshFlags___(void * jarg1) {
  int jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxTriangleMeshFlag::Enum result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxTriangleMeshFlag::Enum)physx_PxTriangleMesh_getTriangleMeshFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getTriangleMaterialIndex___(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxTriangleID arg2 ;
  physx::PxMaterialTableIndex result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  arg2 = (physx::PxTriangleID)jarg2; 
  {
    try {
      result = (physx::PxMaterialTableIndex)((physx::PxTriangleMesh const *)arg1)->getTriangleMaterialIndex(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getLocalBounds___(void * jarg1) {
  physx::PxBounds3* jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = ((physx::PxTriangleMesh const *)arg1)->getLocalBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_getReferenceCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxTriangleMesh const *)arg1)->getReferenceCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_acquireReference___(void * jarg1) {
  physx::PxTriangleMesh *arg1 = (physx::PxTriangleMesh *) 0 ;
  
  arg1 = (physx::PxTriangleMesh *)jarg1; 
  {
    try {
      (arg1)->acquireReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_saveCells___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  void *arg2 = (void *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->saveCells(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_modifySamples__SWIG_0___(void * jarg1, int jarg2, int jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxI32 arg2 ;
  physx::PxI32 arg3 ;
  physx::PxHeightFieldDesc *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxI32)jarg2; 
  arg3 = (physx::PxI32)jarg3; 
  arg4 = (physx::PxHeightFieldDesc *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxHeightFieldDesc const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (bool)(arg1)->modifySamples(arg2,arg3,(physx::PxHeightFieldDesc const &)*arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_modifySamples__SWIG_1___(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxI32 arg2 ;
  physx::PxI32 arg3 ;
  physx::PxHeightFieldDesc *arg4 = 0 ;
  bool result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxI32)jarg2; 
  arg3 = (physx::PxI32)jarg3; 
  arg4 = (physx::PxHeightFieldDesc *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxHeightFieldDesc const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->modifySamples(arg2,arg3,(physx::PxHeightFieldDesc const &)*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getNbRows___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->getNbRows();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getNbColumns___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->getNbColumns();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getFormat___(void * jarg1) {
  int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxHeightFieldFormat::Enum result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxHeightFieldFormat::Enum)((physx::PxHeightField const *)arg1)->getFormat();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getSampleStride___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->getSampleStride();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getConvexEdgeThreshold___(void * jarg1) {
  float jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxHeightField const *)arg1)->getConvexEdgeThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getFlags___(void * jarg1) {
  int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxHeightFieldFlag::Enum result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxHeightFieldFlag::Enum)physx_PxHeightField_getFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getHeight___(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      result = (physx::PxReal)((physx::PxHeightField const *)arg1)->getHeight(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getReferenceCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->getReferenceCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_acquireReference___(void * jarg1) {
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      (arg1)->acquireReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getTriangleMaterialIndex___(void * jarg1, unsigned int jarg2) {
  unsigned short jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxTriangleID arg2 ;
  physx::PxMaterialTableIndex result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxTriangleID)jarg2; 
  {
    try {
      result = (physx::PxMaterialTableIndex)((physx::PxHeightField const *)arg1)->getTriangleMaterialIndex(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getTriangleNormal___(void * jarg1, unsigned int jarg2) {
  physx::PxVec3* jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxTriangleID arg2 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxTriangleID)jarg2; 
  {
    try {
      result = ((physx::PxHeightField const *)arg1)->getTriangleNormal(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT  physx::PxHeightFieldSample*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getSample___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  physx::PxHeightFieldSample*  jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  physx::PxHeightFieldSample *result = 0 ;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxHeightFieldSample *) &((physx::PxHeightField const *)arg1)->getSample(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_getTimestamp___(void * jarg1) {
  unsigned int jresult ;
  physx::PxHeightField *arg1 = (physx::PxHeightField *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxHeightField *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxHeightField const *)arg1)->getTimestamp();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_release___(void * jarg1) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getReferenceCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxMaterial const *)arg1)->getReferenceCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_acquireReference___(void * jarg1) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      (arg1)->acquireReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setDynamicFriction___(void * jarg1, float jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDynamicFriction(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getDynamicFriction___(void * jarg1) {
  float jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxMaterial const *)arg1)->getDynamicFriction();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setStaticFriction___(void * jarg1, float jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setStaticFriction(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getStaticFriction___(void * jarg1) {
  float jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxMaterial const *)arg1)->getStaticFriction();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setRestitution___(void * jarg1, float jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setRestitution(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getRestitution___(void * jarg1) {
  float jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxMaterial const *)arg1)->getRestitution();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxMaterialFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxMaterialFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setFlags___(void * jarg1, int jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxMaterialFlag::Enum arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxMaterialFlag::Enum)jarg2; 
  {
    try {
      physx_PxMaterial_setFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getFlags___(void * jarg1) {
  int jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxMaterialFlag::Enum result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxMaterialFlag::Enum)physx_PxMaterial_getFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setFrictionCombineMode___(void * jarg1, int jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxCombineMode::Enum arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxCombineMode::Enum)jarg2; 
  {
    try {
      (arg1)->setFrictionCombineMode(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getFrictionCombineMode___(void * jarg1) {
  int jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxCombineMode::Enum result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxCombineMode::Enum)((physx::PxMaterial const *)arg1)->getFrictionCombineMode();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_setRestitutionCombineMode___(void * jarg1, int jarg2) {
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxCombineMode::Enum arg2 ;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  arg2 = (physx::PxCombineMode::Enum)jarg2; 
  {
    try {
      (arg1)->setRestitutionCombineMode(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_getRestitutionCombineMode___(void * jarg1) {
  int jresult ;
  physx::PxMaterial *arg1 = (physx::PxMaterial *) 0 ;
  physx::PxCombineMode::Enum result;
  
  arg1 = (physx::PxMaterial *)jarg1; 
  {
    try {
      result = (physx::PxCombineMode::Enum)(arg1)->getRestitutionCombineMode();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_raycast___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, unsigned int jarg5, unsigned int * jarg6) {
  unsigned int jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxU32 arg5 ;
  physx::PxU32 *arg6 = (physx::PxU32 *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = (physx::PxU32 *)jarg6; 
  {
    try {
      result = (physx::PxU32)(arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_sweep___(void * jarg1,  physx::PxBounds3*  jarg2,  physx::PxVec3*  jarg3, float jarg4, unsigned int jarg5, unsigned int * jarg6) {
  unsigned int jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxU32 arg5 ;
  physx::PxU32 *arg6 = (physx::PxU32 *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = (physx::PxU32 *)jarg6; 
  {
    try {
      result = (physx::PxU32)(arg1)->sweep((physx::PxBounds3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_overlap___(void * jarg1,  physx::PxBounds3*  jarg2, unsigned int jarg3, unsigned int * jarg4) {
  unsigned int jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 *arg4 = (physx::PxU32 *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  arg2 = jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32 *)jarg4; 
  {
    try {
      result = (physx::PxU32)((physx::PxBVHStructure const *)arg1)->overlap((physx::PxBounds3 const &)*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT  physx::PxBounds3*  SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_getBounds___(void * jarg1) {
  physx::PxBounds3*  jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  {
    try {
      result = (physx::PxBounds3 *)((physx::PxBVHStructure const *)arg1)->getBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_getNbBounds___(void * jarg1) {
  unsigned int jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxBVHStructure const *)arg1)->getNbBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_getConcreteTypeName___(void * jarg1) {
  char * jresult ;
  physx::PxBVHStructure *arg1 = (physx::PxBVHStructure *) 0 ;
  char *result = 0 ;
  
  arg1 = (physx::PxBVHStructure *)jarg1; 
  {
    try {
      result = (char *)((physx::PxBVHStructure const *)arg1)->getConcreteTypeName();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPruningStructure_getRigidActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxPruningStructure *arg1 = (physx::PxPruningStructure *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxPruningStructure *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxPruningStructure_getRigidActor(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPruningStructure_getNbRigidActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPruningStructure *arg1 = (physx::PxPruningStructure *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxPruningStructure *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxPruningStructure const *)arg1)->getNbRigidActors();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getScene___(void * jarg1) {
  void * jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (physx::PxScene *)((physx::PxConstraint const *)arg1)->getScene();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getActor0___(void * jarg1) {
  void * jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxConstraint_getActor0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getActor1___(void * jarg1) {
  void * jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxConstraint_getActor1(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setActor0___(void * jarg1, void * jarg2) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  {
    try {
      physx_PxConstraint_setActor0(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setActor1___(void * jarg1, void * jarg2) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  {
    try {
      physx_PxConstraint_setActor1(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_markDirty___(void * jarg1) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      (arg1)->markDirty();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setFlags___(void * jarg1, int jarg2) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxConstraintFlag::Enum arg2 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxConstraintFlag::Enum)jarg2; 
  {
    try {
      physx_PxConstraint_setFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getFlags___(void * jarg1) {
  int jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxConstraintFlag::Enum result;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (physx::PxConstraintFlag::Enum)physx_PxConstraint_getFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxConstraintFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxConstraintFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getForce___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      ((physx::PxConstraint const *)arg1)->getForce(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_isValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  bool result;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (bool)((physx::PxConstraint const *)arg1)->isValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setBreakForce___(void * jarg1, float jarg2, float jarg3) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setBreakForce(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getBreakForce___(void * jarg1, float * jarg2, float * jarg3) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxReal *arg3 = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxReal *)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  {
    try {
      ((physx::PxConstraint const *)arg1)->getBreakForce(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setMinResponseThreshold___(void * jarg1, float jarg2) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMinResponseThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_getMinResponseThreshold___(void * jarg1) {
  float jresult ;
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxConstraint const *)arg1)->getMinResponseThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_setConstraintFunctions___(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxConstraint *arg1 = (physx::PxConstraint *) 0 ;
  physx::PxConstraintConnector *arg2 = 0 ;
  physx::PxConstraintShaderTable *arg3 = 0 ;
  
  arg1 = (physx::PxConstraint *)jarg1; 
  arg2 = (physx::PxConstraintConnector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConstraintConnector & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxConstraintShaderTable *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConstraintShaderTable const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setConstraintFunctions(*arg2,(physx::PxConstraintShaderTable const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getParentArticulationLink___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = (physx::PxArticulationLink *) &((physx::PxArticulationJointBase const *)arg1)->getParentArticulationLink();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_setParentPose___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setParentPose((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getParentPose___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = ((physx::PxArticulationJointBase const *)arg1)->getParentPose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getChildArticulationLink___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = (physx::PxArticulationLink *) &((physx::PxArticulationJointBase const *)arg1)->getChildArticulationLink();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_setChildPose___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setChildPose((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getChildPose___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = ((physx::PxArticulationJointBase const *)arg1)->getChildPose();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getArticulationJoint___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxArticulationJoint *result = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJoint *)physx_PxArticulationJointBase_getArticulationJoint(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_getArticulationJointReducedCoordinate___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  physx::PxArticulationJointReducedCoordinate *result = 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJointReducedCoordinate *)physx_PxArticulationJointBase_getArticulationJointReducedCoordinate(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxArticulationJointBase___(void * jarg1) {
  physx::PxArticulationJointBase *arg1 = (physx::PxArticulationJointBase *) 0 ;
  
  arg1 = (physx::PxArticulationJointBase *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTargetOrientation___(void * jarg1,  physx::PxQuat*  jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxQuat *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setTargetOrientation((physx::PxQuat const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxQuat* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTargetOrientation___(void * jarg1) {
  physx::PxQuat* jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  SwigValueWrapper< physx::PxQuat > result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = ((physx::PxArticulationJoint const *)arg1)->getTargetOrientation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxQuat out_temp;
  out_temp = *(physx::PxQuat*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTargetVelocity___(void * jarg1,  physx::PxVec3*  jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setTargetVelocity((physx::PxVec3 const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTargetVelocity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = ((physx::PxArticulationJoint const *)arg1)->getTargetVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setDriveType___(void * jarg1, int jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxArticulationJointDriveType::Enum arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxArticulationJointDriveType::Enum)jarg2; 
  {
    try {
      (arg1)->setDriveType(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getDriveType___(void * jarg1) {
  int jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxArticulationJointDriveType::Enum result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJointDriveType::Enum)((physx::PxArticulationJoint const *)arg1)->getDriveType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setStiffness___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setStiffness(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getStiffness___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getStiffness();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setDamping___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDamping(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getDamping___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getDamping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setInternalCompliance___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setInternalCompliance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getInternalCompliance___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getInternalCompliance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setExternalCompliance___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setExternalCompliance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getExternalCompliance___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getExternalCompliance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setSwingLimit___(void * jarg1, float jarg2, float jarg3) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setSwingLimit(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getSwingLimit___(void * jarg1, float * jarg2, float * jarg3) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxReal *arg3 = 0 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal *)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  {
    try {
      ((physx::PxArticulationJoint const *)arg1)->getSwingLimit(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTangentialStiffness___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setTangentialStiffness(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTangentialStiffness___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getTangentialStiffness();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTangentialDamping___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setTangentialDamping(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTangentialDamping___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getTangentialDamping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setSwingLimitContactDistance___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setSwingLimitContactDistance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getSwingLimitContactDistance___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getSwingLimitContactDistance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setSwingLimitEnabled___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setSwingLimitEnabled(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getSwingLimitEnabled___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  bool result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (bool)((physx::PxArticulationJoint const *)arg1)->getSwingLimitEnabled();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTwistLimit___(void * jarg1, float jarg2, float jarg3) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setTwistLimit(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTwistLimit___(void * jarg1, float * jarg2, float * jarg3) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxReal *arg3 = 0 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal *)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  {
    try {
      ((physx::PxArticulationJoint const *)arg1)->getTwistLimit(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTwistLimitEnabled___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTwistLimitEnabled(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTwistLimitEnabled___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  bool result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (bool)((physx::PxArticulationJoint const *)arg1)->getTwistLimitEnabled();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_setTwistLimitContactDistance___(void * jarg1, float jarg2) {
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setTwistLimitContactDistance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_getTwistLimitContactDistance___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJoint *arg1 = (physx::PxArticulationJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJoint const *)arg1)->getTwistLimitContactDistance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setJointType___(void * jarg1, int jarg2) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationJointType::Enum arg2 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationJointType::Enum)jarg2; 
  {
    try {
      (arg1)->setJointType(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getJointType___(void * jarg1) {
  int jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationJointType::Enum result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJointType::Enum)((physx::PxArticulationJointReducedCoordinate const *)arg1)->getJointType();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setMotion___(void * jarg1, int jarg2, int jarg3) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxArticulationMotion::Enum arg3 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxArticulationMotion::Enum)jarg3; 
  {
    try {
      (arg1)->setMotion(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getMotion___(void * jarg1, int jarg2) {
  int jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxArticulationMotion::Enum result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  {
    try {
      result = (physx::PxArticulationMotion::Enum)((physx::PxArticulationJointReducedCoordinate const *)arg1)->getMotion(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setLimit___(void * jarg1, int jarg2, float jarg3, float jarg4) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  {
    try {
      (arg1)->setLimit(arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getLimit___(void * jarg1, int jarg2, float * jarg3, float * jarg4) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal *arg3 = 0 ;
  physx::PxReal *arg4 = 0 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  arg4 = (physx::PxReal *)jarg4; 
  {
    try {
      (arg1)->getLimit(arg2,*arg3,*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setDrive__SWIG_0___(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxReal arg5 ;
  physx::PxArticulationDriveType::Enum arg6 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxArticulationDriveType::Enum)jarg6; 
  {
    try {
      (arg1)->setDrive(arg2,arg3,arg4,arg5,arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setDrive__SWIG_1___(void * jarg1, int jarg2, float jarg3, float jarg4, float jarg5) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxReal arg5 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxReal)jarg5; 
  {
    try {
      (arg1)->setDrive(arg2,arg3,arg4,arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getDrive___(void * jarg1, int jarg2, float * jarg3, float * jarg4, float * jarg5, int * jarg6) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal *arg3 = 0 ;
  physx::PxReal *arg4 = 0 ;
  physx::PxReal *arg5 = 0 ;
  physx::PxArticulationDriveType::Enum *arg6 = 0 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  arg4 = (physx::PxReal *)jarg4; 
  arg5 = (physx::PxReal *)jarg5; 
  arg6 = (physx::PxArticulationDriveType::Enum *)jarg6; 
  {
    try {
      (arg1)->getDrive(arg2,*arg3,*arg4,*arg5,*arg6);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setDriveTarget___(void * jarg1, int jarg2, float jarg3) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setDriveTarget(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setDriveVelocity___(void * jarg1, int jarg2, float jarg3) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setDriveVelocity(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getDriveTarget___(void * jarg1, int jarg2) {
  float jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  {
    try {
      result = (physx::PxReal)(arg1)->getDriveTarget(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getDriveVelocity___(void * jarg1, int jarg2) {
  float jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxArticulationAxis::Enum arg2 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationAxis::Enum)jarg2; 
  {
    try {
      result = (physx::PxReal)(arg1)->getDriveVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setFrictionCoefficient___(void * jarg1, float jarg2) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setFrictionCoefficient(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getFrictionCoefficient___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJointReducedCoordinate const *)arg1)->getFrictionCoefficient();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_setMaxJointVelocity___(void * jarg1, float jarg2) {
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxJointVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_getMaxJointVelocity___(void * jarg1) {
  float jresult ;
  physx::PxArticulationJointReducedCoordinate *arg1 = (physx::PxArticulationJointReducedCoordinate *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationJointReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationJointReducedCoordinate const *)arg1)->getMaxJointVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getArticulation___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxArticulationBase *result = 0 ;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxArticulationBase *) &((physx::PxArticulationLink const *)arg1)->getArticulation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getInboundJoint___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxArticulationJointBase *result = 0 ;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJointBase *)((physx::PxArticulationLink const *)arg1)->getInboundJoint();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getInboundJointReducedCoordinate___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxArticulationJointReducedCoordinate *result = 0 ;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxArticulationJointReducedCoordinate *)physx_PxArticulationLink_getInboundJointReducedCoordinate(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getInboundJointDof___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationLink const *)arg1)->getInboundJointDof();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getNbChildren___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationLink const *)arg1)->getNbChildren();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getLinkIndex___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationLink const *)arg1)->getLinkIndex();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_getChild___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxArticulationLink *arg1 = (physx::PxArticulationLink *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxArticulationLink *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxArticulationLink *)physx_PxArticulationLink_getChild(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getScene___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (physx::PxScene *)((physx::PxArticulationBase const *)arg1)->getScene();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setSolverIterationCounts__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      (arg1)->setSolverIterationCounts(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setSolverIterationCounts__SWIG_1___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setSolverIterationCounts(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getSolverIterationCounts___(void * jarg1, unsigned int * jarg2, unsigned int * jarg3) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxU32 *arg2 = 0 ;
  physx::PxU32 *arg3 = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2; 
  arg3 = (physx::PxU32 *)jarg3; 
  {
    try {
      ((physx::PxArticulationBase const *)arg1)->getSolverIterationCounts(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_isSleeping___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  bool result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (bool)((physx::PxArticulationBase const *)arg1)->isSleeping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setSleepThreshold___(void * jarg1, float jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setSleepThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getSleepThreshold___(void * jarg1) {
  float jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationBase const *)arg1)->getSleepThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setStabilizationThreshold___(void * jarg1, float jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setStabilizationThreshold(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getStabilizationThreshold___(void * jarg1) {
  float jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationBase const *)arg1)->getStabilizationThreshold();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setWakeCounter___(void * jarg1, float jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setWakeCounter(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getWakeCounter___(void * jarg1) {
  float jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulationBase const *)arg1)->getWakeCounter();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_wakeUp___(void * jarg1) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      (arg1)->wakeUp();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_putToSleep___(void * jarg1) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      (arg1)->putToSleep();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_createLink___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3) {
  void * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxArticulationLink *arg2 = (physx::PxArticulationLink *) 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxArticulationLink *)jarg2; 
  arg3 = jarg3; 
  {
    try {
      result = (physx::PxArticulationLink *)(arg1)->createLink(arg2,(physx::PxTransform const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getLink___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxArticulationLink *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxArticulationLink *)physx_PxArticulationBase_getLink(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_setName___(void * jarg1, char * jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      (arg1)->setName((char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getName___(void * jarg1) {
  char * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (char *)((physx::PxArticulationBase const *)arg1)->getName();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getWorldBounds__SWIG_0___(void * jarg1, float jarg2) {
  physx::PxBounds3* jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  float arg2 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (float)jarg2; 
  {
    try {
      result = ((physx::PxArticulationBase const *)arg1)->getWorldBounds(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxBounds3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getWorldBounds__SWIG_1___(void * jarg1) {
  physx::PxBounds3* jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  SwigValueWrapper< physx::PxBounds3 > result;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = ((physx::PxArticulationBase const *)arg1)->getWorldBounds();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxBounds3 out_temp;
  out_temp = *(physx::PxBounds3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_getAggregate___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxAggregate *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      result = (physx::PxAggregate *)((physx::PxArticulationBase const *)arg1)->getAggregate();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_createArticulationJoint___(void * jarg1, void * jarg2,  physx::PxTransform*  jarg3, void * jarg4,  physx::PxTransform*  jarg5) {
  void * jresult ;
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxArticulationLink *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxArticulationLink *arg4 = 0 ;
  physx::PxTransform *arg5 = 0 ;
  physx::PxArticulationJointBase *result = 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxArticulationLink *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationLink & type is null", 0);
    return 0;
  } 
  arg3 = jarg3; 
  arg4 = (physx::PxArticulationLink *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationLink & type is null", 0);
    return 0;
  } 
  arg5 = jarg5; 
  {
    try {
      result = (physx::PxArticulationJointBase *)(arg1)->createArticulationJoint(*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxTransform const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_releaseArticulationJoint___(void * jarg1, void * jarg2) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  physx::PxArticulationJointBase *arg2 = (physx::PxArticulationJointBase *) 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  arg2 = (physx::PxArticulationJointBase *)jarg2; 
  {
    try {
      (arg1)->releaseArticulationJoint(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxArticulationBase___(void * jarg1) {
  physx::PxArticulationBase *arg1 = (physx::PxArticulationBase *) 0 ;
  
  arg1 = (physx::PxArticulationBase *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_release___(void * jarg1) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_setMaxProjectionIterations___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setMaxProjectionIterations(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_getMaxProjectionIterations___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulation const *)arg1)->getMaxProjectionIterations();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_setSeparationTolerance___(void * jarg1, float jarg2) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setSeparationTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_getSeparationTolerance___(void * jarg1) {
  float jresult ;
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxArticulation const *)arg1)->getSeparationTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_setInternalDriveIterations___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setInternalDriveIterations(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_getInternalDriveIterations___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulation const *)arg1)->getInternalDriveIterations();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_setExternalDriveIterations___(void * jarg1, unsigned int jarg2) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      (arg1)->setExternalDriveIterations(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_getExternalDriveIterations___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulation const *)arg1)->getExternalDriveIterations();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_createDriveCache___(void * jarg1, float jarg2, unsigned int jarg3) {
  void * jresult ;
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxReal arg2 ;
  physx::PxU32 arg3 ;
  physx::PxArticulationDriveCache *result = 0 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  {
    try {
      result = (physx::PxArticulationDriveCache *)((physx::PxArticulation const *)arg1)->createDriveCache(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_updateDriveCache___(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxArticulationDriveCache *arg2 = 0 ;
  physx::PxReal arg3 ;
  physx::PxU32 arg4 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxArticulationDriveCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationDriveCache & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  {
    try {
      ((physx::PxArticulation const *)arg1)->updateDriveCache(*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_releaseDriveCache___(void * jarg1, void * jarg2) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxArticulationDriveCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxArticulationDriveCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationDriveCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulation const *)arg1)->releaseDriveCache(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_applyImpulse___(void * jarg1, void * jarg2, void * jarg3,  physx::PxVec3*  jarg4,  physx::PxVec3*  jarg5) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxArticulationLink *arg2 = (physx::PxArticulationLink *) 0 ;
  physx::PxArticulationDriveCache *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxVec3 *arg5 = 0 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxArticulationLink *)jarg2; 
  arg3 = (physx::PxArticulationDriveCache *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationDriveCache const & type is null", 0);
    return ;
  } 
  arg4 = jarg4; 
  arg5 = jarg5; 
  {
    try {
      (arg1)->applyImpulse(arg2,(physx::PxArticulationDriveCache const &)*arg3,(physx::PxVec3 const &)*arg4,(physx::PxVec3 const &)*arg5);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_computeImpulseResponse___(void * jarg1, void * jarg2,  physx::PxVec3*  jarg3,  physx::PxVec3*  jarg4, void * jarg5,  physx::PxVec3*  jarg6,  physx::PxVec3*  jarg7) {
  physx::PxArticulation *arg1 = (physx::PxArticulation *) 0 ;
  physx::PxArticulationLink *arg2 = (physx::PxArticulationLink *) 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxArticulationDriveCache *arg5 = 0 ;
  physx::PxVec3 *arg6 = 0 ;
  physx::PxVec3 *arg7 = 0 ;
  
  arg1 = (physx::PxArticulation *)jarg1; 
  arg2 = (physx::PxArticulationLink *)jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4; 
  arg5 = (physx::PxArticulationDriveCache *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationDriveCache const & type is null", 0);
    return ;
  } 
  arg6 = jarg6; 
  arg7 = jarg7; 
  {
    try {
      ((physx::PxArticulation const *)arg1)->computeImpulseResponse(arg2,*arg3,*arg4,(physx::PxArticulationDriveCache const &)*arg5,(physx::PxVec3 const &)*arg6,(physx::PxVec3 const &)*arg7);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_setArticulationFlags___(void * jarg1, int jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationFlag::Enum arg2 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationFlag::Enum)jarg2; 
  {
    try {
      physx_PxArticulationReducedCoordinate_setArticulationFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_setArticulationFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setArticulationFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getArticulationFlags___(void * jarg1) {
  int jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationFlag::Enum result;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxArticulationFlag::Enum)physx_PxArticulationReducedCoordinate_getArticulationFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getDofs___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationReducedCoordinate const *)arg1)->getDofs();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_createCache___(void * jarg1) {
  void * jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *result = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxArticulationCache *)((physx::PxArticulationReducedCoordinate const *)arg1)->createCache();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getCacheDataSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationReducedCoordinate const *)arg1)->getCacheDataSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_zeroCache___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->zeroCache(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_applyCache__SWIG_0___(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  physx::PxArticulationCache::Enum arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxArticulationCache::Enum)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      physx_PxArticulationReducedCoordinate_applyCache__SWIG_0(arg1,*arg2,arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_applyCache__SWIG_1___(void * jarg1, void * jarg2, int jarg3) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  physx::PxArticulationCache::Enum arg3 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxArticulationCache::Enum)jarg3; 
  {
    try {
      physx_PxArticulationReducedCoordinate_applyCache__SWIG_0(arg1,*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_copyInternalStateToCache___(void * jarg1, void * jarg2, int jarg3) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  physx::PxArticulationCache::Enum arg3 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxArticulationCache::Enum)jarg3; 
  {
    try {
      physx_PxArticulationReducedCoordinate_copyInternalStateToCache(arg1,*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_releaseCache___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->releaseCache(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_commonInit___(void * jarg1) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->commonInit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeGeneralizedGravityForce___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeGeneralizedGravityForce(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeCoriolisAndCentrifugalForce(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeGeneralizedExternalForce___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeGeneralizedExternalForce(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeJointAcceleration___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeJointAcceleration(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeJointForce___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeJointForce(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeDenseJacobian___(void * jarg1, void * jarg2, unsigned int * jarg3, unsigned int * jarg4) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  physx::PxU32 *arg3 = 0 ;
  physx::PxU32 *arg4 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxU32 *)jarg3; 
  arg4 = (physx::PxU32 *)jarg4; 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeDenseJacobian(*arg2,*arg3,*arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeCoefficientMatrix___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeCoefficientMatrix(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_computeGeneralizedMassMatrix___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxArticulationCache *arg2 = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxArticulationCache *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationCache & type is null", 0);
    return ;
  } 
  {
    try {
      ((physx::PxArticulationReducedCoordinate const *)arg1)->computeGeneralizedMassMatrix(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_addLoopJoint___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxJoint *arg2 = (physx::PxJoint *) 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxJoint *)jarg2; 
  {
    try {
      (arg1)->addLoopJoint(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_removeLoopJoint___(void * jarg1, void * jarg2) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxJoint *arg2 = (physx::PxJoint *) 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxJoint *)jarg2; 
  {
    try {
      (arg1)->removeLoopJoint(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getNbLoopJoints___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationReducedCoordinate const *)arg1)->getNbLoopJoints();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getLoopJoint___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxJoint *result = 0 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxJoint *)physx_PxArticulationReducedCoordinate_getLoopJoint(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_getCoefficientMatrixSize___(void * jarg1) {
  unsigned int jresult ;
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxArticulationReducedCoordinate const *)arg1)->getCoefficientMatrixSize();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_teleportRootLink___(void * jarg1,  physx::PxTransform*  jarg2, unsigned int jarg3) {
  physx::PxArticulationReducedCoordinate *arg1 = (physx::PxArticulationReducedCoordinate *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxArticulationReducedCoordinate *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->teleportRootLink((physx::PxTransform const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_addActor__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxActor *arg2 = 0 ;
  physx::PxBVHStructure *arg3 = (physx::PxBVHStructure *) 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxBVHStructure *)jarg3; 
  {
    try {
      result = (bool)(arg1)->addActor(*arg2,(physx::PxBVHStructure const *)arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_addActor__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxActor *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addActor(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_removeActor___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxActor *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->removeActor(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_addArticulation___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxArticulationBase *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxArticulationBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationBase & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addArticulation(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_removeArticulation___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxArticulationBase *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxArticulationBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulationBase & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->removeArticulation(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_getNbActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxAggregate const *)arg1)->getNbActors();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_getMaxNbActors___(void * jarg1) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  {
    try {
      result = (physx::PxU32)((physx::PxAggregate const *)arg1)->getMaxNbActors();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_getActor___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxActor *result = 0 ;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  {
    try {
      result = (physx::PxActor *)physx_PxAggregate_getActor(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_getScene___(void * jarg1) {
  void * jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  {
    try {
      result = (physx::PxScene *)(arg1)->getScene();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_getSelfCollision___(void * jarg1) {
  unsigned int jresult ;
  physx::PxAggregate *arg1 = (physx::PxAggregate *) 0 ;
  bool result;
  
  arg1 = (physx::PxAggregate *)jarg1; 
  {
    try {
      result = (bool)((physx::PxAggregate const *)arg1)->getSelfCollision();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCudaContextManager_contextIsValid___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCudaContextManager *arg1 = (physx::PxCudaContextManager *) 0 ;
  bool result;
  
  arg1 = (physx::PxCudaContextManager *)jarg1; 
  {
    try {
      result = (bool)((physx::PxCudaContextManager const *)arg1)->contextIsValid();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCudaContextManager_release___(void * jarg1) {
  physx::PxCudaContextManager *arg1 = (physx::PxCudaContextManager *) 0 ;
  
  arg1 = (physx::PxCudaContextManager *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getActor0___(void * jarg1) {
  void * jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxJoint_getActor0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getActor1___(void * jarg1) {
  void * jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxRigidActor *)physx_PxJoint_getActor1(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setActor0___(void * jarg1, void * jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  {
    try {
      physx_PxJoint_setActor0(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setActor1___(void * jarg1, void * jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  {
    try {
      physx_PxJoint_setActor1(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setLocalPose___(void * jarg1, int jarg2,  physx::PxTransform*  jarg3) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxJointActorIndex::Enum arg2 ;
  physx::PxTransform *arg3 = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxJointActorIndex::Enum)jarg2; 
  arg3 = jarg3; 
  {
    try {
      (arg1)->setLocalPose(arg2,(physx::PxTransform const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getLocalPose___(void * jarg1, int jarg2) {
  physx::PxTransform* jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxJointActorIndex::Enum arg2 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxJointActorIndex::Enum)jarg2; 
  {
    try {
      result = ((physx::PxJoint const *)arg1)->getLocalPose(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getRelativeTransform___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = ((physx::PxJoint const *)arg1)->getRelativeTransform();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getRelativeLinearVelocity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = ((physx::PxJoint const *)arg1)->getRelativeLinearVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT physx::PxVec3* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getRelativeAngularVelocity___(void * jarg1) {
  physx::PxVec3* jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  SwigValueWrapper< physx::PxVec3 > result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = ((physx::PxJoint const *)arg1)->getRelativeAngularVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxVec3 out_temp;
  out_temp = *(physx::PxVec3*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setBreakForce___(void * jarg1, float jarg2, float jarg3) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  {
    try {
      (arg1)->setBreakForce(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getBreakForce___(void * jarg1, float * jarg2, float * jarg3) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxReal *arg3 = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal *)jarg2; 
  arg3 = (physx::PxReal *)jarg3; 
  {
    try {
      ((physx::PxJoint const *)arg1)->getBreakForce(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setConstraintFlags___(void * jarg1, int jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxConstraintFlag::Enum arg2 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxConstraintFlag::Enum)jarg2; 
  {
    try {
      physx_PxJoint_setConstraintFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setConstraintFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxConstraintFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxConstraintFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setConstraintFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getConstraintFlags___(void * jarg1) {
  int jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxConstraintFlag::Enum result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxConstraintFlag::Enum)physx_PxJoint_getConstraintFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setInvMassScale0___(void * jarg1, float jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setInvMassScale0(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getInvMassScale0___(void * jarg1) {
  float jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxJoint const *)arg1)->getInvMassScale0();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setInvInertiaScale0___(void * jarg1, float jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setInvInertiaScale0(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getInvInertiaScale0___(void * jarg1) {
  float jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxJoint const *)arg1)->getInvInertiaScale0();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setInvMassScale1___(void * jarg1, float jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setInvMassScale1(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getInvMassScale1___(void * jarg1) {
  float jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxJoint const *)arg1)->getInvMassScale1();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_setInvInertiaScale1___(void * jarg1, float jarg2) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setInvInertiaScale1(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getInvInertiaScale1___(void * jarg1) {
  float jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxJoint const *)arg1)->getInvInertiaScale1();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getConstraint___(void * jarg1) {
  void * jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxConstraint *result = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxConstraint *)((physx::PxJoint const *)arg1)->getConstraint();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_release___(void * jarg1) {
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_getScene___(void * jarg1) {
  void * jresult ;
  physx::PxJoint *arg1 = (physx::PxJoint *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (physx::PxJoint *)jarg1; 
  {
    try {
      result = (physx::PxScene *)((physx::PxJoint const *)arg1)->getScene();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFixedJoint_setProjectionLinearTolerance___(void * jarg1, float jarg2) {
  physx::PxFixedJoint *arg1 = (physx::PxFixedJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxFixedJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionLinearTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFixedJoint_getProjectionLinearTolerance___(void * jarg1) {
  float jresult ;
  physx::PxFixedJoint *arg1 = (physx::PxFixedJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxFixedJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxFixedJoint const *)arg1)->getProjectionLinearTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFixedJoint_setProjectionAngularTolerance___(void * jarg1, float jarg2) {
  physx::PxFixedJoint *arg1 = (physx::PxFixedJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxFixedJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionAngularTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFixedJoint_getProjectionAngularTolerance___(void * jarg1) {
  float jresult ;
  physx::PxFixedJoint *arg1 = (physx::PxFixedJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxFixedJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxFixedJoint const *)arg1)->getProjectionAngularTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getAngle___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getVelocity___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setLimit___(void * jarg1, void * jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxJointAngularLimitPair *arg2 = 0 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxJointAngularLimitPair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointAngularLimitPair const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLimit((physx::PxJointAngularLimitPair const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getLimit___(void * jarg1) {
  void * jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  SwigValueWrapper< physx::PxJointAngularLimitPair > result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = ((physx::PxRevoluteJoint const *)arg1)->getLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointAngularLimitPair((const physx::PxJointAngularLimitPair &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setDriveVelocity__SWIG_0___(void * jarg1, float jarg2, unsigned int jarg3) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setDriveVelocity(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setDriveVelocity__SWIG_1___(void * jarg1, float jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDriveVelocity(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getDriveVelocity___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getDriveVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setDriveForceLimit___(void * jarg1, float jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDriveForceLimit(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getDriveForceLimit___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getDriveForceLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setDriveGearRatio___(void * jarg1, float jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDriveGearRatio(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getDriveGearRatio___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getDriveGearRatio();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setRevoluteJointFlags___(void * jarg1, int jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxRevoluteJointFlag::Enum arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxRevoluteJointFlag::Enum)jarg2; 
  {
    try {
      physx_PxRevoluteJoint_setRevoluteJointFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setRevoluteJointFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxRevoluteJointFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxRevoluteJointFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setRevoluteJointFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getRevoluteJointFlags___(void * jarg1) {
  int jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxRevoluteJointFlag::Enum result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxRevoluteJointFlag::Enum)physx_PxRevoluteJoint_getRevoluteJointFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setProjectionLinearTolerance___(void * jarg1, float jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionLinearTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getProjectionLinearTolerance___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getProjectionLinearTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_setProjectionAngularTolerance___(void * jarg1, float jarg2) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionAngularTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_getProjectionAngularTolerance___(void * jarg1) {
  float jresult ;
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxRevoluteJoint const *)arg1)->getProjectionAngularTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxRevoluteJoint___(void * jarg1) {
  physx::PxRevoluteJoint *arg1 = (physx::PxRevoluteJoint *) 0 ;
  
  arg1 = (physx::PxRevoluteJoint *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getDistance___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getDistance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setMinDistance___(void * jarg1, float jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMinDistance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getMinDistance___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getMinDistance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setMaxDistance___(void * jarg1, float jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setMaxDistance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getMaxDistance___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getMaxDistance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setTolerance___(void * jarg1, float jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getTolerance___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setStiffness___(void * jarg1, float jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setStiffness(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getStiffness___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getStiffness();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setDamping___(void * jarg1, float jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setDamping(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getDamping___(void * jarg1) {
  float jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxDistanceJoint const *)arg1)->getDamping();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setDistanceJointFlags___(void * jarg1, int jarg2) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxDistanceJointFlag::Enum arg2 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxDistanceJointFlag::Enum)jarg2; 
  {
    try {
      physx_PxDistanceJoint_setDistanceJointFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_setDistanceJointFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxDistanceJointFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  arg2 = (physx::PxDistanceJointFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setDistanceJointFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_getDistanceJointFlags___(void * jarg1) {
  int jresult ;
  physx::PxDistanceJoint *arg1 = (physx::PxDistanceJoint *) 0 ;
  physx::PxDistanceJointFlag::Enum result;
  
  arg1 = (physx::PxDistanceJoint *)jarg1; 
  {
    try {
      result = (physx::PxDistanceJointFlag::Enum)physx_PxDistanceJoint_getDistanceJointFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_getLimitCone___(void * jarg1) {
  void * jresult ;
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  SwigValueWrapper< physx::PxJointLimitCone > result;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  {
    try {
      result = ((physx::PxSphericalJoint const *)arg1)->getLimitCone();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLimitCone((const physx::PxJointLimitCone &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_setLimitCone___(void * jarg1, void * jarg2) {
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxJointLimitCone *arg2 = 0 ;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  arg2 = (physx::PxJointLimitCone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLimitCone const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLimitCone((physx::PxJointLimitCone const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_getSwingYAngle___(void * jarg1) {
  float jresult ;
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxSphericalJoint const *)arg1)->getSwingYAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_getSwingZAngle___(void * jarg1) {
  float jresult ;
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxSphericalJoint const *)arg1)->getSwingZAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_setSphericalJointFlags___(void * jarg1, int jarg2) {
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxSphericalJointFlag::Enum arg2 ;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  arg2 = (physx::PxSphericalJointFlag::Enum)jarg2; 
  {
    try {
      physx_PxSphericalJoint_setSphericalJointFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_setSphericalJointFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxSphericalJointFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  arg2 = (physx::PxSphericalJointFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setSphericalJointFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_getSphericalJointFlags___(void * jarg1) {
  int jresult ;
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxSphericalJointFlag::Enum result;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  {
    try {
      result = (physx::PxSphericalJointFlag::Enum)physx_PxSphericalJoint_getSphericalJointFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_setProjectionLinearTolerance___(void * jarg1, float jarg2) {
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionLinearTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_getProjectionLinearTolerance___(void * jarg1) {
  float jresult ;
  physx::PxSphericalJoint *arg1 = (physx::PxSphericalJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSphericalJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxSphericalJoint const *)arg1)->getProjectionLinearTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getPosition___(void * jarg1) {
  float jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxPrismaticJoint const *)arg1)->getPosition();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getVelocity___(void * jarg1) {
  float jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxPrismaticJoint const *)arg1)->getVelocity();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_setLimit___(void * jarg1, void * jarg2) {
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxJointLinearLimitPair *arg2 = 0 ;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  arg2 = (physx::PxJointLinearLimitPair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLinearLimitPair const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLimit((physx::PxJointLinearLimitPair const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getLimit___(void * jarg1) {
  void * jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  SwigValueWrapper< physx::PxJointLinearLimitPair > result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = ((physx::PxPrismaticJoint const *)arg1)->getLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLinearLimitPair((const physx::PxJointLinearLimitPair &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_setPrismaticJointFlags___(void * jarg1, int jarg2) {
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxPrismaticJointFlag::Enum arg2 ;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  arg2 = (physx::PxPrismaticJointFlag::Enum)jarg2; 
  {
    try {
      physx_PxPrismaticJoint_setPrismaticJointFlags(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_setPrismaticJointFlag___(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxPrismaticJointFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  arg2 = (physx::PxPrismaticJointFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setPrismaticJointFlag(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getPrismaticJointFlags___(void * jarg1) {
  int jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxPrismaticJointFlag::Enum result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = (physx::PxPrismaticJointFlag::Enum)physx_PxPrismaticJoint_getPrismaticJointFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_setProjectionLinearTolerance___(void * jarg1, float jarg2) {
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionLinearTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getProjectionLinearTolerance___(void * jarg1) {
  float jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxPrismaticJoint const *)arg1)->getProjectionLinearTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_setProjectionAngularTolerance___(void * jarg1, float jarg2) {
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionAngularTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_getProjectionAngularTolerance___(void * jarg1) {
  float jresult ;
  physx::PxPrismaticJoint *arg1 = (physx::PxPrismaticJoint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPrismaticJoint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxPrismaticJoint const *)arg1)->getProjectionAngularTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setMotion___(void * jarg1, int jarg2, int jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Axis::Enum arg2 ;
  physx::PxD6Motion::Enum arg3 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Axis::Enum)jarg2; 
  arg3 = (physx::PxD6Motion::Enum)jarg3; 
  {
    try {
      (arg1)->setMotion(arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getMotion___(void * jarg1, int jarg2) {
  int jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Axis::Enum arg2 ;
  physx::PxD6Motion::Enum result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Axis::Enum)jarg2; 
  {
    try {
      result = (physx::PxD6Motion::Enum)((physx::PxD6Joint const *)arg1)->getMotion(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getTwistAngle___(void * jarg1) {
  float jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxD6Joint const *)arg1)->getTwistAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getSwingYAngle___(void * jarg1) {
  float jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxD6Joint const *)arg1)->getSwingYAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getSwingZAngle___(void * jarg1) {
  float jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxD6Joint const *)arg1)->getSwingZAngle();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDistanceLimit___(void * jarg1, void * jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxJointLinearLimit *arg2 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxJointLinearLimit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLinearLimit const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setDistanceLimit((physx::PxJointLinearLimit const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getDistanceLimit___(void * jarg1) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  SwigValueWrapper< physx::PxJointLinearLimit > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getDistanceLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLinearLimit((const physx::PxJointLinearLimit &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setLinearLimit___(void * jarg1, int jarg2, void * jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Axis::Enum arg2 ;
  physx::PxJointLinearLimitPair *arg3 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Axis::Enum)jarg2; 
  arg3 = (physx::PxJointLinearLimitPair *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLinearLimitPair const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setLinearLimit(arg2,(physx::PxJointLinearLimitPair const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getLinearLimit___(void * jarg1, int jarg2) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Axis::Enum arg2 ;
  SwigValueWrapper< physx::PxJointLinearLimitPair > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Axis::Enum)jarg2; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getLinearLimit(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLinearLimitPair((const physx::PxJointLinearLimitPair &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setTwistLimit___(void * jarg1, void * jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxJointAngularLimitPair *arg2 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxJointAngularLimitPair *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointAngularLimitPair const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setTwistLimit((physx::PxJointAngularLimitPair const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getTwistLimit___(void * jarg1) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  SwigValueWrapper< physx::PxJointAngularLimitPair > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getTwistLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointAngularLimitPair((const physx::PxJointAngularLimitPair &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setSwingLimit___(void * jarg1, void * jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxJointLimitCone *arg2 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxJointLimitCone *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLimitCone const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setSwingLimit((physx::PxJointLimitCone const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getSwingLimit___(void * jarg1) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  SwigValueWrapper< physx::PxJointLimitCone > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getSwingLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLimitCone((const physx::PxJointLimitCone &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setPyramidSwingLimit___(void * jarg1, void * jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxJointLimitPyramid *arg2 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxJointLimitPyramid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxJointLimitPyramid const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setPyramidSwingLimit((physx::PxJointLimitPyramid const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getPyramidSwingLimit___(void * jarg1) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  SwigValueWrapper< physx::PxJointLimitPyramid > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getPyramidSwingLimit();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxJointLimitPyramid((const physx::PxJointLimitPyramid &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDrive___(void * jarg1, int jarg2, void * jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Drive::Enum arg2 ;
  physx::PxD6JointDrive *arg3 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Drive::Enum)jarg2; 
  arg3 = (physx::PxD6JointDrive *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxD6JointDrive const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setDrive(arg2,(physx::PxD6JointDrive const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getDrive___(void * jarg1, int jarg2) {
  void * jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxD6Drive::Enum arg2 ;
  physx::PxD6JointDrive result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxD6Drive::Enum)jarg2; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getDrive(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = new physx::PxD6JointDrive((const physx::PxD6JointDrive &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDrivePosition__SWIG_0___(void * jarg1,  physx::PxTransform*  jarg2, unsigned int jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setDrivePosition((physx::PxTransform const &)*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDrivePosition__SWIG_1___(void * jarg1,  physx::PxTransform*  jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = jarg2; 
  {
    try {
      (arg1)->setDrivePosition((physx::PxTransform const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT physx::PxTransform* SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getDrivePosition___(void * jarg1) {
  physx::PxTransform* jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  SwigValueWrapper< physx::PxTransform > result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = ((physx::PxD6Joint const *)arg1)->getDrivePosition();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return NULL; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return NULL; 
      };
    }
  }
  
  thread_local physx::PxTransform out_temp;
  out_temp = *(physx::PxTransform*)&result; 
  jresult = &out_temp; 
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDriveVelocity__SWIG_0___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3, unsigned int jarg4) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setDriveVelocity((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setDriveVelocity__SWIG_1___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      (arg1)->setDriveVelocity((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getDriveVelocity___(void * jarg1,  physx::PxVec3*  jarg2,  physx::PxVec3*  jarg3) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      ((physx::PxD6Joint const *)arg1)->getDriveVelocity(*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setProjectionLinearTolerance___(void * jarg1, float jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionLinearTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getProjectionLinearTolerance___(void * jarg1) {
  float jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxD6Joint const *)arg1)->getProjectionLinearTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_setProjectionAngularTolerance___(void * jarg1, float jarg2) {
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  {
    try {
      (arg1)->setProjectionAngularTolerance(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT float SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_getProjectionAngularTolerance___(void * jarg1) {
  float jresult ;
  physx::PxD6Joint *arg1 = (physx::PxD6Joint *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxD6Joint *)jarg1; 
  {
    try {
      result = (physx::PxReal)((physx::PxD6Joint const *)arg1)->getProjectionAngularTolerance();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdTransport_createDefaultSocketTransport___(char * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  physx::PxPvdTransport *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (physx::PxPvdTransport *)physx_PxPvdTransport_createDefaultSocketTransport((char const *)arg1,arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdTransport_connect___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPvdTransport *arg1 = (physx::PxPvdTransport *) 0 ;
  bool result;
  
  arg1 = (physx::PxPvdTransport *)jarg1; 
  {
    try {
      result = (bool)(arg1)->connect();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdTransport_disconnect___(void * jarg1) {
  physx::PxPvdTransport *arg1 = (physx::PxPvdTransport *) 0 ;
  
  arg1 = (physx::PxPvdTransport *)jarg1; 
  {
    try {
      (arg1)->disconnect();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdTransport_isConnected___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPvdTransport *arg1 = (physx::PxPvdTransport *) 0 ;
  bool result;
  
  arg1 = (physx::PxPvdTransport *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isConnected();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvdTransport_release___(void * jarg1) {
  physx::PxPvdTransport *arg1 = (physx::PxPvdTransport *) 0 ;
  
  arg1 = (physx::PxPvdTransport *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_connect___(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  physx::PxPvdTransport *arg2 = 0 ;
  physx::PxPvdInstrumentationFlag::Enum arg3 ;
  bool result;
  
  arg1 = (physx::PxPvd *)jarg1; 
  arg2 = (physx::PxPvdTransport *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPvdTransport & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPvdInstrumentationFlag::Enum)jarg3; 
  {
    try {
      result = (bool)physx_PxPvd_connect(arg1,*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_disconnect___(void * jarg1) {
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  
  arg1 = (physx::PxPvd *)jarg1; 
  {
    try {
      (arg1)->disconnect();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_isConnected__SWIG_0___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxPvd *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (bool)(arg1)->isConnected(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_isConnected__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  bool result;
  
  arg1 = (physx::PxPvd *)jarg1; 
  {
    try {
      result = (bool)(arg1)->isConnected();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_getTransport___(void * jarg1) {
  void * jresult ;
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  physx::PxPvdTransport *result = 0 ;
  
  arg1 = (physx::PxPvd *)jarg1; 
  {
    try {
      result = (physx::PxPvdTransport *)(arg1)->getTransport();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_getInstrumentationFlags___(void * jarg1) {
  int jresult ;
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  physx::PxPvdInstrumentationFlag::Enum result;
  
  arg1 = (physx::PxPvd *)jarg1; 
  {
    try {
      result = (physx::PxPvdInstrumentationFlag::Enum)physx_PxPvd_getInstrumentationFlags(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_release___(void * jarg1) {
  physx::PxPvd *arg1 = (physx::PxPvd *) 0 ;
  
  arg1 = (physx::PxPvd *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCpuDispatcher_submitTask___(void * jarg1, void * jarg2) {
  physx::PxCpuDispatcher *arg1 = (physx::PxCpuDispatcher *) 0 ;
  physx::PxBaseTask *arg2 = 0 ;
  
  arg1 = (physx::PxCpuDispatcher *)jarg1; 
  arg2 = (physx::PxBaseTask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBaseTask & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->submitTask(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCpuDispatcher_getWorkerCount___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCpuDispatcher *arg1 = (physx::PxCpuDispatcher *) 0 ;
  uint32_t result;
  
  arg1 = (physx::PxCpuDispatcher *)jarg1; 
  {
    try {
      result = (uint32_t)((physx::PxCpuDispatcher const *)arg1)->getWorkerCount();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxCpuDispatcher___(void * jarg1) {
  physx::PxCpuDispatcher *arg1 = (physx::PxCpuDispatcher *) 0 ;
  
  arg1 = (physx::PxCpuDispatcher *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCpuDispatcher_createDefault__SWIG_0___(unsigned int jarg1, unsigned int* jarg2) {
  void * jresult ;
  physx::PxU32 arg1 ;
  physx::PxU32 *arg2 ;
  physx::PxDefaultCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxU32)jarg1; 
  arg2 = jarg2;
  {
    try {
      result = (physx::PxDefaultCpuDispatcher *)physx_PxCpuDispatcher_createDefault__SWIG_0(arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCpuDispatcher_createDefault__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  physx::PxU32 arg1 ;
  physx::PxDefaultCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxU32)jarg1; 
  {
    try {
      result = (physx::PxDefaultCpuDispatcher *)physx_PxCpuDispatcher_createDefault__SWIG_0(arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultCpuDispatcher_release___(void * jarg1) {
  physx::PxDefaultCpuDispatcher *arg1 = (physx::PxDefaultCpuDispatcher *) 0 ;
  
  arg1 = (physx::PxDefaultCpuDispatcher *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultCpuDispatcher_setRunProfiled___(void * jarg1, unsigned int jarg2) {
  physx::PxDefaultCpuDispatcher *arg1 = (physx::PxDefaultCpuDispatcher *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxDefaultCpuDispatcher *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setRunProfiled(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultCpuDispatcher_getRunProfiled___(void * jarg1) {
  unsigned int jresult ;
  physx::PxDefaultCpuDispatcher *arg1 = (physx::PxDefaultCpuDispatcher *) 0 ;
  bool result;
  
  arg1 = (physx::PxDefaultCpuDispatcher *)jarg1; 
  {
    try {
      result = (bool)((physx::PxDefaultCpuDispatcher const *)arg1)->getRunProfiled();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxDefaultCpuDispatcher___(void * jarg1) {
  physx::PxDefaultCpuDispatcher *arg1 = (physx::PxDefaultCpuDispatcher *) 0 ;
  
  arg1 = (physx::PxDefaultCpuDispatcher *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxBaseTask___(void * jarg1) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_run___(void * jarg1) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      (arg1)->run();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_getName___(void * jarg1) {
  char * jresult ;
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  char *result = 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      result = (char *)((physx::PxBaseTask const *)arg1)->getName();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_addReference___(void * jarg1) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      (arg1)->addReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_removeReference___(void * jarg1) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      (arg1)->removeReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_getReference___(void * jarg1) {
  int jresult ;
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  int32_t result;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      result = (int32_t)((physx::PxBaseTask const *)arg1)->getReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_release___(void * jarg1) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_getTaskManager___(void * jarg1) {
  void * jresult ;
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  physx::PxTaskManager *result = 0 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      result = (physx::PxTaskManager *)((physx::PxBaseTask const *)arg1)->getTaskManager();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_setContextId___(void * jarg1, unsigned long long jarg2) {
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  physx::PxU64 arg2 ;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  arg2 = (physx::PxU64)jarg2; 
  {
    try {
      (arg1)->setContextId(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBaseTask_getContextId___(void * jarg1) {
  unsigned long long jresult ;
  physx::PxBaseTask *arg1 = (physx::PxBaseTask *) 0 ;
  physx::PxU64 result;
  
  arg1 = (physx::PxBaseTask *)jarg1; 
  {
    try {
      result = (physx::PxU64)(arg1)->getContextId();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxTask___(void * jarg1) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_release___(void * jarg1) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_finishBefore___(void * jarg1, unsigned int jarg2) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  physx::PxTaskID arg2 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  arg2 = (physx::PxTaskID)jarg2; 
  {
    try {
      (arg1)->finishBefore(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_startAfter___(void * jarg1, unsigned int jarg2) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  physx::PxTaskID arg2 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  arg2 = (physx::PxTaskID)jarg2; 
  {
    try {
      (arg1)->startAfter(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_addReference___(void * jarg1) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      (arg1)->addReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_removeReference___(void * jarg1) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      (arg1)->removeReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_getReference___(void * jarg1) {
  int jresult ;
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  int32_t result;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      result = (int32_t)((physx::PxTask const *)arg1)->getReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_getTaskID___(void * jarg1) {
  unsigned int jresult ;
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      result = (physx::PxTaskID)((physx::PxTask const *)arg1)->getTaskID();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_submitted___(void * jarg1) {
  physx::PxTask *arg1 = (physx::PxTask *) 0 ;
  
  arg1 = (physx::PxTask *)jarg1; 
  {
    try {
      (arg1)->submitted();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_setCpuDispatcher___(void * jarg1, void * jarg2) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxCpuDispatcher *arg2 = 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxCpuDispatcher *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxCpuDispatcher & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCpuDispatcher(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_getCpuDispatcher___(void * jarg1) {
  void * jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  {
    try {
      result = (physx::PxCpuDispatcher *)((physx::PxTaskManager const *)arg1)->getCpuDispatcher();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_resetDependencies___(void * jarg1) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  {
    try {
      (arg1)->resetDependencies();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_startSimulation___(void * jarg1) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  {
    try {
      (arg1)->startSimulation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_stopSimulation___(void * jarg1) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  {
    try {
      (arg1)->stopSimulation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_taskCompleted___(void * jarg1, void * jarg2) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTask *arg2 = 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTask & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->taskCompleted(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_getNamedTask___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    try {
      result = (physx::PxTaskID)(arg1)->getNamedTask((char const *)arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_submitNamedTask__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTask *arg2 = (physx::PxTask *) 0 ;
  char *arg3 = (char *) 0 ;
  physx::PxTaskType::Enum arg4 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTask *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (physx::PxTaskType::Enum)jarg4; 
  {
    try {
      result = (physx::PxTaskID)(arg1)->submitNamedTask(arg2,(char const *)arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_submitNamedTask__SWIG_1___(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTask *arg2 = (physx::PxTask *) 0 ;
  char *arg3 = (char *) 0 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTask *)jarg2; 
  arg3 = (char *)jarg3; 
  {
    try {
      result = (physx::PxTaskID)(arg1)->submitNamedTask(arg2,(char const *)arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_submitUnnamedTask__SWIG_0___(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTask *arg2 = 0 ;
  physx::PxTaskType::Enum arg3 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTask & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTaskType::Enum)jarg3; 
  {
    try {
      result = (physx::PxTaskID)(arg1)->submitUnnamedTask(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_submitUnnamedTask__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTask *arg2 = 0 ;
  physx::PxTaskID result;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTask *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTask & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxTaskID)(arg1)->submitUnnamedTask(*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_getTaskFromID___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  physx::PxTaskID arg2 ;
  physx::PxTask *result = 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  arg2 = (physx::PxTaskID)jarg2; 
  {
    try {
      result = (physx::PxTask *)(arg1)->getTaskFromID(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_release___(void * jarg1) {
  physx::PxTaskManager *arg1 = (physx::PxTaskManager *) 0 ;
  
  arg1 = (physx::PxTaskManager *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_createTaskManager__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxErrorCallback *arg1 = 0 ;
  physx::PxCpuDispatcher *arg2 = (physx::PxCpuDispatcher *) 0 ;
  physx::PxTaskManager *result = 0 ;
  
  arg1 = (physx::PxErrorCallback *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxErrorCallback & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxCpuDispatcher *)jarg2; 
  {
    try {
      result = (physx::PxTaskManager *)physx::PxTaskManager::createTaskManager(*arg1,arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTaskManager_createTaskManager__SWIG_1___(void * jarg1) {
  void * jresult ;
  physx::PxErrorCallback *arg1 = 0 ;
  physx::PxTaskManager *result = 0 ;
  
  arg1 = (physx::PxErrorCallback *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxErrorCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxTaskManager *)physx::PxTaskManager::createTaskManager(*arg1);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_delete_PxLightCpuTask___(void * jarg1) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_setContinuation__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  physx::PxTaskManager *arg2 = 0 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  arg2 = (physx::PxTaskManager *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTaskManager & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxBaseTask *)jarg3; 
  {
    try {
      (arg1)->setContinuation(*arg2,arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_setContinuation__SWIG_1___(void * jarg1, void * jarg2) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  physx::PxBaseTask *arg2 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  arg2 = (physx::PxBaseTask *)jarg2; 
  {
    try {
      (arg1)->setContinuation(arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_getContinuation___(void * jarg1) {
  void * jresult ;
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  physx::PxBaseTask *result = 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      result = (physx::PxBaseTask *)((physx::PxLightCpuTask const *)arg1)->getContinuation();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_removeReference___(void * jarg1) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      (arg1)->removeReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_getReference___(void * jarg1) {
  int jresult ;
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  int32_t result;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      result = (int32_t)((physx::PxLightCpuTask const *)arg1)->getReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_addReference___(void * jarg1) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      (arg1)->addReference();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_release___(void * jarg1) {
  physx::PxLightCpuTask *arg1 = (physx::PxLightCpuTask *) 0 ;
  
  arg1 = (physx::PxLightCpuTask *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_release___(void * jarg1) {
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  {
    try {
      (arg1)->release();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_setParams___(void * jarg1, void * jarg2) {
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxCookingParams *arg2 = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxCookingParams *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxCookingParams const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setParams((physx::PxCookingParams const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_getParams___(void * jarg1) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxCookingParams *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  {
    try {
      result = (physx::PxCookingParams *) &((physx::PxCooking const *)arg1)->getParams();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_platformMismatch___(void * jarg1) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->platformMismatch();
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookTriangleMesh__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int * jarg4) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxTriangleMeshDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  physx::PxTriangleMeshCookingResult::Enum *arg4 = (physx::PxTriangleMeshCookingResult::Enum *) 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxTriangleMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriangleMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxTriangleMeshCookingResult::Enum *)jarg4; 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookTriangleMesh((physx::PxTriangleMeshDesc const &)*arg2,*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookTriangleMesh__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxTriangleMeshDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxTriangleMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriangleMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookTriangleMesh((physx::PxTriangleMeshDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createTriangleMesh__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int * jarg4) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxTriangleMeshDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxTriangleMeshCookingResult::Enum *arg4 = (physx::PxTriangleMeshCookingResult::Enum *) 0 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxTriangleMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriangleMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxTriangleMeshCookingResult::Enum *)jarg4; 
  {
    try {
      result = (physx::PxTriangleMesh *)((physx::PxCooking const *)arg1)->createTriangleMesh((physx::PxTriangleMeshDesc const &)*arg2,*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createTriangleMesh__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxTriangleMeshDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxTriangleMesh *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxTriangleMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriangleMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxTriangleMesh *)((physx::PxCooking const *)arg1)->createTriangleMesh((physx::PxTriangleMeshDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_validateTriangleMesh___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxTriangleMeshDesc *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxTriangleMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTriangleMeshDesc const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->validateTriangleMesh((physx::PxTriangleMeshDesc const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookConvexMesh__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int * jarg4) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxConvexMeshDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  physx::PxConvexMeshCookingResult::Enum *arg4 = (physx::PxConvexMeshCookingResult::Enum *) 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxConvexMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConvexMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxConvexMeshCookingResult::Enum *)jarg4; 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookConvexMesh((physx::PxConvexMeshDesc const &)*arg2,*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookConvexMesh__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxConvexMeshDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxConvexMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConvexMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookConvexMesh((physx::PxConvexMeshDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createConvexMesh__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, int * jarg4) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxConvexMeshDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxConvexMeshCookingResult::Enum *arg4 = (physx::PxConvexMeshCookingResult::Enum *) 0 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxConvexMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConvexMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxConvexMeshCookingResult::Enum *)jarg4; 
  {
    try {
      result = (physx::PxConvexMesh *)((physx::PxCooking const *)arg1)->createConvexMesh((physx::PxConvexMeshDesc const &)*arg2,*arg3,arg4);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createConvexMesh__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxConvexMeshDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxConvexMesh *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxConvexMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConvexMeshDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxConvexMesh *)((physx::PxCooking const *)arg1)->createConvexMesh((physx::PxConvexMeshDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_validateConvexMesh___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxConvexMeshDesc *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxConvexMeshDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxConvexMeshDesc const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->validateConvexMesh((physx::PxConvexMeshDesc const &)*arg2);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookHeightField___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxHeightFieldDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxHeightFieldDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxHeightFieldDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookHeightField((physx::PxHeightFieldDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createHeightField___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxHeightFieldDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxHeightField *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxHeightFieldDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxHeightFieldDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxHeightField *)((physx::PxCooking const *)arg1)->createHeightField((physx::PxHeightFieldDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_cookBVHStructure___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxBVHStructureDesc *arg2 = 0 ;
  physx::PxOutputStream *arg3 = 0 ;
  bool result;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxBVHStructureDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBVHStructureDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxOutputStream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOutputStream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((physx::PxCooking const *)arg1)->cookBVHStructure((physx::PxBVHStructureDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCooking_createBVHStructure___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxCooking *arg1 = (physx::PxCooking *) 0 ;
  physx::PxBVHStructureDesc *arg2 = 0 ;
  physx::PxPhysicsInsertionCallback *arg3 = 0 ;
  physx::PxBVHStructure *result = 0 ;
  
  arg1 = (physx::PxCooking *)jarg1; 
  arg2 = (physx::PxBVHStructureDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBVHStructureDesc const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPhysicsInsertionCallback *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPhysicsInsertionCallback & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (physx::PxBVHStructure *)((physx::PxCooking const *)arg1)->createBVHStructure((physx::PxBVHStructureDesc const &)*arg2,*arg3);
    } catch(std::exception e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch(...) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, "Unknown exception"); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT physx::PxInputStream * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxInputData_SWIGUpcast___(physx::PxInputData *jarg1) {
    return (physx::PxInputStream *)jarg1;
}

SWIGEXPORT physx::PxInputData * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryInputData_SWIGUpcast___(physx::PxDefaultMemoryInputData *jarg1) {
    return (physx::PxInputData *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoxGeometry_SWIGUpcast___(physx::PxBoxGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphereGeometry_SWIGUpcast___(physx::PxSphereGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxCapsuleGeometry_SWIGUpcast___(physx::PxCapsuleGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPlaneGeometry_SWIGUpcast___(physx::PxPlaneGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMeshGeometry_SWIGUpcast___(physx::PxConvexMeshGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshGeometry_SWIGUpcast___(physx::PxTriangleMeshGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxGeometry * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightFieldGeometry_SWIGUpcast___(physx::PxHeightFieldGeometry *jarg1) {
    return (physx::PxGeometry *)jarg1;
}

SWIGEXPORT physx::PxSpring * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6JointDrive_SWIGUpcast___(physx::PxD6JointDrive *jarg1) {
    return (physx::PxSpring *)jarg1;
}

SWIGEXPORT physx::PxJointLimitParameters * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimit_SWIGUpcast___(physx::PxJointLinearLimit *jarg1) {
    return (physx::PxJointLimitParameters *)jarg1;
}

SWIGEXPORT physx::PxJointLimitParameters * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLinearLimitPair_SWIGUpcast___(physx::PxJointLinearLimitPair *jarg1) {
    return (physx::PxJointLimitParameters *)jarg1;
}

SWIGEXPORT physx::PxJointLimitParameters * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointAngularLimitPair_SWIGUpcast___(physx::PxJointAngularLimitPair *jarg1) {
    return (physx::PxJointLimitParameters *)jarg1;
}

SWIGEXPORT physx::PxJointLimitParameters * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitCone_SWIGUpcast___(physx::PxJointLimitCone *jarg1) {
    return (physx::PxJointLimitParameters *)jarg1;
}

SWIGEXPORT physx::PxJointLimitParameters * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJointLimitPyramid_SWIGUpcast___(physx::PxJointLimitPyramid *jarg1) {
    return (physx::PxJointLimitParameters *)jarg1;
}

SWIGEXPORT physx::PxErrorCallback * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultErrorCallback_SWIGUpcast___(physx::PxDefaultErrorCallback *jarg1) {
    return (physx::PxErrorCallback *)jarg1;
}

SWIGEXPORT physx::PxAllocatorCallback * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultAllocator_SWIGUpcast___(physx::PxDefaultAllocator *jarg1) {
    return (physx::PxAllocatorCallback *)jarg1;
}

SWIGEXPORT physx::PxActorShape * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxQueryHit_SWIGUpcast___(physx::PxQueryHit *jarg1) {
    return (physx::PxActorShape *)jarg1;
}

SWIGEXPORT physx::PxQueryHit * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLocationHit_SWIGUpcast___(physx::PxLocationHit *jarg1) {
    return (physx::PxQueryHit *)jarg1;
}

SWIGEXPORT physx::PxLocationHit * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastHit_SWIGUpcast___(physx::PxRaycastHit *jarg1) {
    return (physx::PxLocationHit *)jarg1;
}

SWIGEXPORT physx::PxQueryHit * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapHit_SWIGUpcast___(physx::PxOverlapHit *jarg1) {
    return (physx::PxQueryHit *)jarg1;
}

SWIGEXPORT physx::PxLocationHit * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepHit_SWIGUpcast___(physx::PxSweepHit *jarg1) {
    return (physx::PxLocationHit *)jarg1;
}

SWIGEXPORT physx::PxHitCallback< physx::PxRaycastHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer_SWIGUpcast___(physx::PxHitBuffer< physx::PxRaycastHit > *jarg1) {
    return (physx::PxHitCallback< physx::PxRaycastHit > *)jarg1;
}

SWIGEXPORT physx::PxHitCallback< physx::PxOverlapHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer_SWIGUpcast___(physx::PxHitBuffer< physx::PxOverlapHit > *jarg1) {
    return (physx::PxHitCallback< physx::PxOverlapHit > *)jarg1;
}

SWIGEXPORT physx::PxHitCallback< physx::PxSweepHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer_SWIGUpcast___(physx::PxHitBuffer< physx::PxSweepHit > *jarg1) {
    return (physx::PxHitCallback< physx::PxSweepHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxRaycastHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer1_SWIGUpcast___(physx::PxRaycastBufferN< 1 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxRaycastHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer10_SWIGUpcast___(physx::PxRaycastBufferN< 10 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxRaycastHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRaycastBuffer100_SWIGUpcast___(physx::PxRaycastBufferN< 100 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxRaycastHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxOverlapHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer1_SWIGUpcast___(physx::PxOverlapBufferN< 1 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxOverlapHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer10_SWIGUpcast___(physx::PxOverlapBufferN< 10 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxOverlapHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxOverlapBuffer100_SWIGUpcast___(physx::PxOverlapBufferN< 100 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxOverlapHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxSweepHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer1_SWIGUpcast___(physx::PxSweepBufferN< 1 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxSweepHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer10_SWIGUpcast___(physx::PxSweepBufferN< 10 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1;
}

SWIGEXPORT physx::PxHitBuffer< physx::PxSweepHit > * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSweepBuffer100_SWIGUpcast___(physx::PxSweepBufferN< 100 > *jarg1) {
    return (physx::PxHitBuffer< physx::PxSweepHit > *)jarg1;
}

SWIGEXPORT physx::PxStridedData * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBoundedData_SWIGUpcast___(physx::PxBoundedData *jarg1) {
    return (physx::PxStridedData *)jarg1;
}

SWIGEXPORT physx::PxSimpleTriangleMesh * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMeshDesc_SWIGUpcast___(physx::PxTriangleMeshDesc *jarg1) {
    return (physx::PxSimpleTriangleMesh *)jarg1;
}

SWIGEXPORT physx::PxOutputStream * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultMemoryOutputStream_SWIGUpcast___(physx::PxDefaultMemoryOutputStream *jarg1) {
    return (physx::PxOutputStream *)jarg1;
}

SWIGEXPORT physx::wrap::PxSimulationFilterCallback * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxUnityCollisionFiltering_SWIGUpcast___(physx::PxUnityCollisionFiltering *jarg1) {
    return (physx::wrap::PxSimulationFilterCallback *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxActor_SWIGUpcast___(physx::PxActor *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxActor * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidActor_SWIGUpcast___(physx::PxRigidActor *jarg1) {
    return (physx::PxActor *)jarg1;
}

SWIGEXPORT physx::PxRigidActor * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidStatic_SWIGUpcast___(physx::PxRigidStatic *jarg1) {
    return (physx::PxRigidActor *)jarg1;
}

SWIGEXPORT physx::PxRigidActor * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidBody_SWIGUpcast___(physx::PxRigidBody *jarg1) {
    return (physx::PxRigidActor *)jarg1;
}

SWIGEXPORT physx::PxRigidBody * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRigidDynamic_SWIGUpcast___(physx::PxRigidDynamic *jarg1) {
    return (physx::PxRigidBody *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxShape_SWIGUpcast___(physx::PxShape *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConvexMesh_SWIGUpcast___(physx::PxConvexMesh *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTriangleMesh_SWIGUpcast___(physx::PxTriangleMesh *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxHeightField_SWIGUpcast___(physx::PxHeightField *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxMaterial_SWIGUpcast___(physx::PxMaterial *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxBVHStructure_SWIGUpcast___(physx::PxBVHStructure *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPruningStructure_SWIGUpcast___(physx::PxPruningStructure *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxConstraint_SWIGUpcast___(physx::PxConstraint *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointBase_SWIGUpcast___(physx::PxArticulationJointBase *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxArticulationJointBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJoint_SWIGUpcast___(physx::PxArticulationJoint *jarg1) {
    return (physx::PxArticulationJointBase *)jarg1;
}

SWIGEXPORT physx::PxArticulationJointBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationJointReducedCoordinate_SWIGUpcast___(physx::PxArticulationJointReducedCoordinate *jarg1) {
    return (physx::PxArticulationJointBase *)jarg1;
}

SWIGEXPORT physx::PxRigidBody * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationLink_SWIGUpcast___(physx::PxArticulationLink *jarg1) {
    return (physx::PxRigidBody *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationBase_SWIGUpcast___(physx::PxArticulationBase *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxArticulationBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulation_SWIGUpcast___(physx::PxArticulation *jarg1) {
    return (physx::PxArticulationBase *)jarg1;
}

SWIGEXPORT physx::PxArticulationBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxArticulationReducedCoordinate_SWIGUpcast___(physx::PxArticulationReducedCoordinate *jarg1) {
    return (physx::PxArticulationBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxAggregate_SWIGUpcast___(physx::PxAggregate *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxBase * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxJoint_SWIGUpcast___(physx::PxJoint *jarg1) {
    return (physx::PxBase *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxFixedJoint_SWIGUpcast___(physx::PxFixedJoint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxRevoluteJoint_SWIGUpcast___(physx::PxRevoluteJoint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDistanceJoint_SWIGUpcast___(physx::PxDistanceJoint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxSphericalJoint_SWIGUpcast___(physx::PxSphericalJoint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPrismaticJoint_SWIGUpcast___(physx::PxPrismaticJoint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxJoint * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxD6Joint_SWIGUpcast___(physx::PxD6Joint *jarg1) {
    return (physx::PxJoint *)jarg1;
}

SWIGEXPORT physx::PxProfilerCallback * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxPvd_SWIGUpcast___(physx::PxPvd *jarg1) {
    return (physx::PxProfilerCallback *)jarg1;
}

SWIGEXPORT physx::PxCpuDispatcher * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxDefaultCpuDispatcher_SWIGUpcast___(physx::PxDefaultCpuDispatcher *jarg1) {
    return (physx::PxCpuDispatcher *)jarg1;
}

SWIGEXPORT physx::PxBaseTask * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxTask_SWIGUpcast___(physx::PxTask *jarg1) {
    return (physx::PxBaseTask *)jarg1;
}

SWIGEXPORT physx::PxBaseTask * SWIGSTDCALL CSharp_NVIDIAfPhysX_PxLightCpuTask_SWIGUpcast___(physx::PxLightCpuTask *jarg1) {
    return (physx::PxBaseTask *)jarg1;
}

#ifdef __cplusplus
}
#endif

